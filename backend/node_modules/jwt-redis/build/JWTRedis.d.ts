/// <reference types="node" />
import * as jsonwebtoken from 'jsonwebtoken';
import { Secret } from "jsonwebtoken";
import { GetPublicKeyOrSecret } from "jsonwebtoken";
import { VerifyOptions } from "jsonwebtoken";
import { DecodeOptions } from "jsonwebtoken";
import { RedisClientType } from "redis";
export interface Options {
    prefix: string;
}
export default class JWTRedis {
    private readonly redisClient;
    private readonly options;
    private readonly redis;
    constructor(redisClient: RedisClientType, options?: Options);
    sign: <T extends object & {
        jti?: string | undefined;
    }>(payload: T, secretOrPrivateKey: Secret, options?: jsonwebtoken.SignOptions | undefined) => Promise<string>;
    destroy: (jti: string) => Promise<boolean>;
    decode<T>(token: string, options?: DecodeOptions): T;
    verify<T extends object & {
        jti?: string;
    }>(token: string, secretOrPublicKey: string | Buffer | GetPublicKeyOrSecret, options?: VerifyOptions): Promise<T>;
}
