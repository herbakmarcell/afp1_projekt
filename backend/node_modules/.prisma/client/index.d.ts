
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Felhasznalok
 * 
 */
export type Felhasznalok = $Result.DefaultSelection<Prisma.$FelhasznalokPayload>
/**
 * Model Jogkorok
 * 
 */
export type Jogkorok = $Result.DefaultSelection<Prisma.$JogkorokPayload>
/**
 * Model Kifizetesek
 * 
 */
export type Kifizetesek = $Result.DefaultSelection<Prisma.$KifizetesekPayload>
/**
 * Model Orak
 * 
 */
export type Orak = $Result.DefaultSelection<Prisma.$OrakPayload>
/**
 * Model Orarend
 * 
 */
export type Orarend = $Result.DefaultSelection<Prisma.$OrarendPayload>
/**
 * Model TanuloElorehaladas
 * 
 */
export type TanuloElorehaladas = $Result.DefaultSelection<Prisma.$TanuloElorehaladasPayload>
/**
 * Model Vizsgajelentkezes
 * 
 */
export type Vizsgajelentkezes = $Result.DefaultSelection<Prisma.$VizsgajelentkezesPayload>
/**
 * Model Vizsgak
 * 
 */
export type Vizsgak = $Result.DefaultSelection<Prisma.$VizsgakPayload>
/**
 * Model VizsgaTipus
 * 
 */
export type VizsgaTipus = $Result.DefaultSelection<Prisma.$VizsgaTipusPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Felhasznaloks
 * const felhasznaloks = await prisma.felhasznalok.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Felhasznaloks
   * const felhasznaloks = await prisma.felhasznalok.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.felhasznalok`: Exposes CRUD operations for the **Felhasznalok** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Felhasznaloks
    * const felhasznaloks = await prisma.felhasznalok.findMany()
    * ```
    */
  get felhasznalok(): Prisma.FelhasznalokDelegate<ExtArgs>;

  /**
   * `prisma.jogkorok`: Exposes CRUD operations for the **Jogkorok** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jogkoroks
    * const jogkoroks = await prisma.jogkorok.findMany()
    * ```
    */
  get jogkorok(): Prisma.JogkorokDelegate<ExtArgs>;

  /**
   * `prisma.kifizetesek`: Exposes CRUD operations for the **Kifizetesek** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kifizeteseks
    * const kifizeteseks = await prisma.kifizetesek.findMany()
    * ```
    */
  get kifizetesek(): Prisma.KifizetesekDelegate<ExtArgs>;

  /**
   * `prisma.orak`: Exposes CRUD operations for the **Orak** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Oraks
    * const oraks = await prisma.orak.findMany()
    * ```
    */
  get orak(): Prisma.OrakDelegate<ExtArgs>;

  /**
   * `prisma.orarend`: Exposes CRUD operations for the **Orarend** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orarends
    * const orarends = await prisma.orarend.findMany()
    * ```
    */
  get orarend(): Prisma.OrarendDelegate<ExtArgs>;

  /**
   * `prisma.tanuloElorehaladas`: Exposes CRUD operations for the **TanuloElorehaladas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TanuloElorehaladas
    * const tanuloElorehaladas = await prisma.tanuloElorehaladas.findMany()
    * ```
    */
  get tanuloElorehaladas(): Prisma.TanuloElorehaladasDelegate<ExtArgs>;

  /**
   * `prisma.vizsgajelentkezes`: Exposes CRUD operations for the **Vizsgajelentkezes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vizsgajelentkezes
    * const vizsgajelentkezes = await prisma.vizsgajelentkezes.findMany()
    * ```
    */
  get vizsgajelentkezes(): Prisma.VizsgajelentkezesDelegate<ExtArgs>;

  /**
   * `prisma.vizsgak`: Exposes CRUD operations for the **Vizsgak** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vizsgaks
    * const vizsgaks = await prisma.vizsgak.findMany()
    * ```
    */
  get vizsgak(): Prisma.VizsgakDelegate<ExtArgs>;

  /**
   * `prisma.vizsgaTipus`: Exposes CRUD operations for the **VizsgaTipus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VizsgaTipuses
    * const vizsgaTipuses = await prisma.vizsgaTipus.findMany()
    * ```
    */
  get vizsgaTipus(): Prisma.VizsgaTipusDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Felhasznalok: 'Felhasznalok',
    Jogkorok: 'Jogkorok',
    Kifizetesek: 'Kifizetesek',
    Orak: 'Orak',
    Orarend: 'Orarend',
    TanuloElorehaladas: 'TanuloElorehaladas',
    Vizsgajelentkezes: 'Vizsgajelentkezes',
    Vizsgak: 'Vizsgak',
    VizsgaTipus: 'VizsgaTipus'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "felhasznalok" | "jogkorok" | "kifizetesek" | "orak" | "orarend" | "tanuloElorehaladas" | "vizsgajelentkezes" | "vizsgak" | "vizsgaTipus"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Felhasznalok: {
        payload: Prisma.$FelhasznalokPayload<ExtArgs>
        fields: Prisma.FelhasznalokFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FelhasznalokFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FelhasznalokPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FelhasznalokFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FelhasznalokPayload>
          }
          findFirst: {
            args: Prisma.FelhasznalokFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FelhasznalokPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FelhasznalokFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FelhasznalokPayload>
          }
          findMany: {
            args: Prisma.FelhasznalokFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FelhasznalokPayload>[]
          }
          create: {
            args: Prisma.FelhasznalokCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FelhasznalokPayload>
          }
          createMany: {
            args: Prisma.FelhasznalokCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FelhasznalokDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FelhasznalokPayload>
          }
          update: {
            args: Prisma.FelhasznalokUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FelhasznalokPayload>
          }
          deleteMany: {
            args: Prisma.FelhasznalokDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FelhasznalokUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FelhasznalokUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FelhasznalokPayload>
          }
          aggregate: {
            args: Prisma.FelhasznalokAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFelhasznalok>
          }
          groupBy: {
            args: Prisma.FelhasznalokGroupByArgs<ExtArgs>
            result: $Utils.Optional<FelhasznalokGroupByOutputType>[]
          }
          count: {
            args: Prisma.FelhasznalokCountArgs<ExtArgs>
            result: $Utils.Optional<FelhasznalokCountAggregateOutputType> | number
          }
        }
      }
      Jogkorok: {
        payload: Prisma.$JogkorokPayload<ExtArgs>
        fields: Prisma.JogkorokFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JogkorokFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogkorokPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JogkorokFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogkorokPayload>
          }
          findFirst: {
            args: Prisma.JogkorokFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogkorokPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JogkorokFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogkorokPayload>
          }
          findMany: {
            args: Prisma.JogkorokFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogkorokPayload>[]
          }
          create: {
            args: Prisma.JogkorokCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogkorokPayload>
          }
          createMany: {
            args: Prisma.JogkorokCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.JogkorokDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogkorokPayload>
          }
          update: {
            args: Prisma.JogkorokUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogkorokPayload>
          }
          deleteMany: {
            args: Prisma.JogkorokDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JogkorokUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JogkorokUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JogkorokPayload>
          }
          aggregate: {
            args: Prisma.JogkorokAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJogkorok>
          }
          groupBy: {
            args: Prisma.JogkorokGroupByArgs<ExtArgs>
            result: $Utils.Optional<JogkorokGroupByOutputType>[]
          }
          count: {
            args: Prisma.JogkorokCountArgs<ExtArgs>
            result: $Utils.Optional<JogkorokCountAggregateOutputType> | number
          }
        }
      }
      Kifizetesek: {
        payload: Prisma.$KifizetesekPayload<ExtArgs>
        fields: Prisma.KifizetesekFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KifizetesekFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KifizetesekPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KifizetesekFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KifizetesekPayload>
          }
          findFirst: {
            args: Prisma.KifizetesekFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KifizetesekPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KifizetesekFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KifizetesekPayload>
          }
          findMany: {
            args: Prisma.KifizetesekFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KifizetesekPayload>[]
          }
          create: {
            args: Prisma.KifizetesekCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KifizetesekPayload>
          }
          createMany: {
            args: Prisma.KifizetesekCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.KifizetesekDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KifizetesekPayload>
          }
          update: {
            args: Prisma.KifizetesekUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KifizetesekPayload>
          }
          deleteMany: {
            args: Prisma.KifizetesekDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KifizetesekUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KifizetesekUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KifizetesekPayload>
          }
          aggregate: {
            args: Prisma.KifizetesekAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKifizetesek>
          }
          groupBy: {
            args: Prisma.KifizetesekGroupByArgs<ExtArgs>
            result: $Utils.Optional<KifizetesekGroupByOutputType>[]
          }
          count: {
            args: Prisma.KifizetesekCountArgs<ExtArgs>
            result: $Utils.Optional<KifizetesekCountAggregateOutputType> | number
          }
        }
      }
      Orak: {
        payload: Prisma.$OrakPayload<ExtArgs>
        fields: Prisma.OrakFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrakFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrakPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrakFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrakPayload>
          }
          findFirst: {
            args: Prisma.OrakFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrakPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrakFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrakPayload>
          }
          findMany: {
            args: Prisma.OrakFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrakPayload>[]
          }
          create: {
            args: Prisma.OrakCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrakPayload>
          }
          createMany: {
            args: Prisma.OrakCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrakDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrakPayload>
          }
          update: {
            args: Prisma.OrakUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrakPayload>
          }
          deleteMany: {
            args: Prisma.OrakDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrakUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrakUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrakPayload>
          }
          aggregate: {
            args: Prisma.OrakAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrak>
          }
          groupBy: {
            args: Prisma.OrakGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrakGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrakCountArgs<ExtArgs>
            result: $Utils.Optional<OrakCountAggregateOutputType> | number
          }
        }
      }
      Orarend: {
        payload: Prisma.$OrarendPayload<ExtArgs>
        fields: Prisma.OrarendFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrarendFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrarendPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrarendFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrarendPayload>
          }
          findFirst: {
            args: Prisma.OrarendFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrarendPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrarendFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrarendPayload>
          }
          findMany: {
            args: Prisma.OrarendFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrarendPayload>[]
          }
          create: {
            args: Prisma.OrarendCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrarendPayload>
          }
          createMany: {
            args: Prisma.OrarendCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrarendDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrarendPayload>
          }
          update: {
            args: Prisma.OrarendUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrarendPayload>
          }
          deleteMany: {
            args: Prisma.OrarendDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrarendUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrarendUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrarendPayload>
          }
          aggregate: {
            args: Prisma.OrarendAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrarend>
          }
          groupBy: {
            args: Prisma.OrarendGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrarendGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrarendCountArgs<ExtArgs>
            result: $Utils.Optional<OrarendCountAggregateOutputType> | number
          }
        }
      }
      TanuloElorehaladas: {
        payload: Prisma.$TanuloElorehaladasPayload<ExtArgs>
        fields: Prisma.TanuloElorehaladasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TanuloElorehaladasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TanuloElorehaladasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TanuloElorehaladasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TanuloElorehaladasPayload>
          }
          findFirst: {
            args: Prisma.TanuloElorehaladasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TanuloElorehaladasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TanuloElorehaladasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TanuloElorehaladasPayload>
          }
          findMany: {
            args: Prisma.TanuloElorehaladasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TanuloElorehaladasPayload>[]
          }
          create: {
            args: Prisma.TanuloElorehaladasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TanuloElorehaladasPayload>
          }
          createMany: {
            args: Prisma.TanuloElorehaladasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TanuloElorehaladasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TanuloElorehaladasPayload>
          }
          update: {
            args: Prisma.TanuloElorehaladasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TanuloElorehaladasPayload>
          }
          deleteMany: {
            args: Prisma.TanuloElorehaladasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TanuloElorehaladasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TanuloElorehaladasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TanuloElorehaladasPayload>
          }
          aggregate: {
            args: Prisma.TanuloElorehaladasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTanuloElorehaladas>
          }
          groupBy: {
            args: Prisma.TanuloElorehaladasGroupByArgs<ExtArgs>
            result: $Utils.Optional<TanuloElorehaladasGroupByOutputType>[]
          }
          count: {
            args: Prisma.TanuloElorehaladasCountArgs<ExtArgs>
            result: $Utils.Optional<TanuloElorehaladasCountAggregateOutputType> | number
          }
        }
      }
      Vizsgajelentkezes: {
        payload: Prisma.$VizsgajelentkezesPayload<ExtArgs>
        fields: Prisma.VizsgajelentkezesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VizsgajelentkezesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgajelentkezesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VizsgajelentkezesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgajelentkezesPayload>
          }
          findFirst: {
            args: Prisma.VizsgajelentkezesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgajelentkezesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VizsgajelentkezesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgajelentkezesPayload>
          }
          findMany: {
            args: Prisma.VizsgajelentkezesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgajelentkezesPayload>[]
          }
          create: {
            args: Prisma.VizsgajelentkezesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgajelentkezesPayload>
          }
          createMany: {
            args: Prisma.VizsgajelentkezesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VizsgajelentkezesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgajelentkezesPayload>
          }
          update: {
            args: Prisma.VizsgajelentkezesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgajelentkezesPayload>
          }
          deleteMany: {
            args: Prisma.VizsgajelentkezesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VizsgajelentkezesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VizsgajelentkezesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgajelentkezesPayload>
          }
          aggregate: {
            args: Prisma.VizsgajelentkezesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVizsgajelentkezes>
          }
          groupBy: {
            args: Prisma.VizsgajelentkezesGroupByArgs<ExtArgs>
            result: $Utils.Optional<VizsgajelentkezesGroupByOutputType>[]
          }
          count: {
            args: Prisma.VizsgajelentkezesCountArgs<ExtArgs>
            result: $Utils.Optional<VizsgajelentkezesCountAggregateOutputType> | number
          }
        }
      }
      Vizsgak: {
        payload: Prisma.$VizsgakPayload<ExtArgs>
        fields: Prisma.VizsgakFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VizsgakFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgakPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VizsgakFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgakPayload>
          }
          findFirst: {
            args: Prisma.VizsgakFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgakPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VizsgakFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgakPayload>
          }
          findMany: {
            args: Prisma.VizsgakFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgakPayload>[]
          }
          create: {
            args: Prisma.VizsgakCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgakPayload>
          }
          createMany: {
            args: Prisma.VizsgakCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VizsgakDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgakPayload>
          }
          update: {
            args: Prisma.VizsgakUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgakPayload>
          }
          deleteMany: {
            args: Prisma.VizsgakDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VizsgakUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VizsgakUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgakPayload>
          }
          aggregate: {
            args: Prisma.VizsgakAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVizsgak>
          }
          groupBy: {
            args: Prisma.VizsgakGroupByArgs<ExtArgs>
            result: $Utils.Optional<VizsgakGroupByOutputType>[]
          }
          count: {
            args: Prisma.VizsgakCountArgs<ExtArgs>
            result: $Utils.Optional<VizsgakCountAggregateOutputType> | number
          }
        }
      }
      VizsgaTipus: {
        payload: Prisma.$VizsgaTipusPayload<ExtArgs>
        fields: Prisma.VizsgaTipusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VizsgaTipusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgaTipusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VizsgaTipusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgaTipusPayload>
          }
          findFirst: {
            args: Prisma.VizsgaTipusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgaTipusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VizsgaTipusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgaTipusPayload>
          }
          findMany: {
            args: Prisma.VizsgaTipusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgaTipusPayload>[]
          }
          create: {
            args: Prisma.VizsgaTipusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgaTipusPayload>
          }
          createMany: {
            args: Prisma.VizsgaTipusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VizsgaTipusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgaTipusPayload>
          }
          update: {
            args: Prisma.VizsgaTipusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgaTipusPayload>
          }
          deleteMany: {
            args: Prisma.VizsgaTipusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VizsgaTipusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VizsgaTipusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VizsgaTipusPayload>
          }
          aggregate: {
            args: Prisma.VizsgaTipusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVizsgaTipus>
          }
          groupBy: {
            args: Prisma.VizsgaTipusGroupByArgs<ExtArgs>
            result: $Utils.Optional<VizsgaTipusGroupByOutputType>[]
          }
          count: {
            args: Prisma.VizsgaTipusCountArgs<ExtArgs>
            result: $Utils.Optional<VizsgaTipusCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FelhasznalokCountOutputType
   */

  export type FelhasznalokCountOutputType = {
    Orarend: number
    Vizsgak: number
    TanuloElorehaladas: number
    TanuloElorehaladasV: number
  }

  export type FelhasznalokCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Orarend?: boolean | FelhasznalokCountOutputTypeCountOrarendArgs
    Vizsgak?: boolean | FelhasznalokCountOutputTypeCountVizsgakArgs
    TanuloElorehaladas?: boolean | FelhasznalokCountOutputTypeCountTanuloElorehaladasArgs
    TanuloElorehaladasV?: boolean | FelhasznalokCountOutputTypeCountTanuloElorehaladasVArgs
  }

  // Custom InputTypes
  /**
   * FelhasznalokCountOutputType without action
   */
  export type FelhasznalokCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FelhasznalokCountOutputType
     */
    select?: FelhasznalokCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FelhasznalokCountOutputType without action
   */
  export type FelhasznalokCountOutputTypeCountOrarendArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrarendWhereInput
  }

  /**
   * FelhasznalokCountOutputType without action
   */
  export type FelhasznalokCountOutputTypeCountVizsgakArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VizsgakWhereInput
  }

  /**
   * FelhasznalokCountOutputType without action
   */
  export type FelhasznalokCountOutputTypeCountTanuloElorehaladasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TanuloElorehaladasWhereInput
  }

  /**
   * FelhasznalokCountOutputType without action
   */
  export type FelhasznalokCountOutputTypeCountTanuloElorehaladasVArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TanuloElorehaladasWhereInput
  }


  /**
   * Count Type JogkorokCountOutputType
   */

  export type JogkorokCountOutputType = {
    Felhasznalok: number
  }

  export type JogkorokCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Felhasznalok?: boolean | JogkorokCountOutputTypeCountFelhasznalokArgs
  }

  // Custom InputTypes
  /**
   * JogkorokCountOutputType without action
   */
  export type JogkorokCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JogkorokCountOutputType
     */
    select?: JogkorokCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JogkorokCountOutputType without action
   */
  export type JogkorokCountOutputTypeCountFelhasznalokArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FelhasznalokWhereInput
  }


  /**
   * Count Type OrakCountOutputType
   */

  export type OrakCountOutputType = {
    Orarend: number
  }

  export type OrakCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Orarend?: boolean | OrakCountOutputTypeCountOrarendArgs
  }

  // Custom InputTypes
  /**
   * OrakCountOutputType without action
   */
  export type OrakCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrakCountOutputType
     */
    select?: OrakCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrakCountOutputType without action
   */
  export type OrakCountOutputTypeCountOrarendArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrarendWhereInput
  }


  /**
   * Count Type TanuloElorehaladasCountOutputType
   */

  export type TanuloElorehaladasCountOutputType = {
    Kifizetesek: number
    Vizsgajelentkezes: number
  }

  export type TanuloElorehaladasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Kifizetesek?: boolean | TanuloElorehaladasCountOutputTypeCountKifizetesekArgs
    Vizsgajelentkezes?: boolean | TanuloElorehaladasCountOutputTypeCountVizsgajelentkezesArgs
  }

  // Custom InputTypes
  /**
   * TanuloElorehaladasCountOutputType without action
   */
  export type TanuloElorehaladasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TanuloElorehaladasCountOutputType
     */
    select?: TanuloElorehaladasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TanuloElorehaladasCountOutputType without action
   */
  export type TanuloElorehaladasCountOutputTypeCountKifizetesekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KifizetesekWhereInput
  }

  /**
   * TanuloElorehaladasCountOutputType without action
   */
  export type TanuloElorehaladasCountOutputTypeCountVizsgajelentkezesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VizsgajelentkezesWhereInput
  }


  /**
   * Count Type VizsgakCountOutputType
   */

  export type VizsgakCountOutputType = {
    Vizsgajelentkezes: number
  }

  export type VizsgakCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Vizsgajelentkezes?: boolean | VizsgakCountOutputTypeCountVizsgajelentkezesArgs
  }

  // Custom InputTypes
  /**
   * VizsgakCountOutputType without action
   */
  export type VizsgakCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VizsgakCountOutputType
     */
    select?: VizsgakCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VizsgakCountOutputType without action
   */
  export type VizsgakCountOutputTypeCountVizsgajelentkezesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VizsgajelentkezesWhereInput
  }


  /**
   * Count Type VizsgaTipusCountOutputType
   */

  export type VizsgaTipusCountOutputType = {
    Vizsgak: number
  }

  export type VizsgaTipusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Vizsgak?: boolean | VizsgaTipusCountOutputTypeCountVizsgakArgs
  }

  // Custom InputTypes
  /**
   * VizsgaTipusCountOutputType without action
   */
  export type VizsgaTipusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VizsgaTipusCountOutputType
     */
    select?: VizsgaTipusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VizsgaTipusCountOutputType without action
   */
  export type VizsgaTipusCountOutputTypeCountVizsgakArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VizsgakWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Felhasznalok
   */

  export type AggregateFelhasznalok = {
    _count: FelhasznalokCountAggregateOutputType | null
    _avg: FelhasznalokAvgAggregateOutputType | null
    _sum: FelhasznalokSumAggregateOutputType | null
    _min: FelhasznalokMinAggregateOutputType | null
    _max: FelhasznalokMaxAggregateOutputType | null
  }

  export type FelhasznalokAvgAggregateOutputType = {
    felhasznalo_id: number | null
    jogkor_id: number | null
  }

  export type FelhasznalokSumAggregateOutputType = {
    felhasznalo_id: number | null
    jogkor_id: number | null
  }

  export type FelhasznalokMinAggregateOutputType = {
    felhasznalo_id: number | null
    vezeteknev: string | null
    keresztnev: string | null
    email: string | null
    jelszo: string | null
    bankszamla: string | null
    jogkor_id: number | null
  }

  export type FelhasznalokMaxAggregateOutputType = {
    felhasznalo_id: number | null
    vezeteknev: string | null
    keresztnev: string | null
    email: string | null
    jelszo: string | null
    bankszamla: string | null
    jogkor_id: number | null
  }

  export type FelhasznalokCountAggregateOutputType = {
    felhasznalo_id: number
    vezeteknev: number
    keresztnev: number
    email: number
    jelszo: number
    bankszamla: number
    jogkor_id: number
    _all: number
  }


  export type FelhasznalokAvgAggregateInputType = {
    felhasznalo_id?: true
    jogkor_id?: true
  }

  export type FelhasznalokSumAggregateInputType = {
    felhasznalo_id?: true
    jogkor_id?: true
  }

  export type FelhasznalokMinAggregateInputType = {
    felhasznalo_id?: true
    vezeteknev?: true
    keresztnev?: true
    email?: true
    jelszo?: true
    bankszamla?: true
    jogkor_id?: true
  }

  export type FelhasznalokMaxAggregateInputType = {
    felhasznalo_id?: true
    vezeteknev?: true
    keresztnev?: true
    email?: true
    jelszo?: true
    bankszamla?: true
    jogkor_id?: true
  }

  export type FelhasznalokCountAggregateInputType = {
    felhasznalo_id?: true
    vezeteknev?: true
    keresztnev?: true
    email?: true
    jelszo?: true
    bankszamla?: true
    jogkor_id?: true
    _all?: true
  }

  export type FelhasznalokAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Felhasznalok to aggregate.
     */
    where?: FelhasznalokWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Felhasznaloks to fetch.
     */
    orderBy?: FelhasznalokOrderByWithRelationInput | FelhasznalokOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FelhasznalokWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Felhasznaloks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Felhasznaloks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Felhasznaloks
    **/
    _count?: true | FelhasznalokCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FelhasznalokAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FelhasznalokSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FelhasznalokMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FelhasznalokMaxAggregateInputType
  }

  export type GetFelhasznalokAggregateType<T extends FelhasznalokAggregateArgs> = {
        [P in keyof T & keyof AggregateFelhasznalok]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFelhasznalok[P]>
      : GetScalarType<T[P], AggregateFelhasznalok[P]>
  }




  export type FelhasznalokGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FelhasznalokWhereInput
    orderBy?: FelhasznalokOrderByWithAggregationInput | FelhasznalokOrderByWithAggregationInput[]
    by: FelhasznalokScalarFieldEnum[] | FelhasznalokScalarFieldEnum
    having?: FelhasznalokScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FelhasznalokCountAggregateInputType | true
    _avg?: FelhasznalokAvgAggregateInputType
    _sum?: FelhasznalokSumAggregateInputType
    _min?: FelhasznalokMinAggregateInputType
    _max?: FelhasznalokMaxAggregateInputType
  }

  export type FelhasznalokGroupByOutputType = {
    felhasznalo_id: number
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    jogkor_id: number
    _count: FelhasznalokCountAggregateOutputType | null
    _avg: FelhasznalokAvgAggregateOutputType | null
    _sum: FelhasznalokSumAggregateOutputType | null
    _min: FelhasznalokMinAggregateOutputType | null
    _max: FelhasznalokMaxAggregateOutputType | null
  }

  type GetFelhasznalokGroupByPayload<T extends FelhasznalokGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FelhasznalokGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FelhasznalokGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FelhasznalokGroupByOutputType[P]>
            : GetScalarType<T[P], FelhasznalokGroupByOutputType[P]>
        }
      >
    >


  export type FelhasznalokSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    felhasznalo_id?: boolean
    vezeteknev?: boolean
    keresztnev?: boolean
    email?: boolean
    jelszo?: boolean
    bankszamla?: boolean
    jogkor_id?: boolean
    Jogkorok?: boolean | JogkorokDefaultArgs<ExtArgs>
    Orarend?: boolean | Felhasznalok$OrarendArgs<ExtArgs>
    Vizsgak?: boolean | Felhasznalok$VizsgakArgs<ExtArgs>
    TanuloElorehaladas?: boolean | Felhasznalok$TanuloElorehaladasArgs<ExtArgs>
    TanuloElorehaladasV?: boolean | Felhasznalok$TanuloElorehaladasVArgs<ExtArgs>
    _count?: boolean | FelhasznalokCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["felhasznalok"]>


  export type FelhasznalokSelectScalar = {
    felhasznalo_id?: boolean
    vezeteknev?: boolean
    keresztnev?: boolean
    email?: boolean
    jelszo?: boolean
    bankszamla?: boolean
    jogkor_id?: boolean
  }

  export type FelhasznalokInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Jogkorok?: boolean | JogkorokDefaultArgs<ExtArgs>
    Orarend?: boolean | Felhasznalok$OrarendArgs<ExtArgs>
    Vizsgak?: boolean | Felhasznalok$VizsgakArgs<ExtArgs>
    TanuloElorehaladas?: boolean | Felhasznalok$TanuloElorehaladasArgs<ExtArgs>
    TanuloElorehaladasV?: boolean | Felhasznalok$TanuloElorehaladasVArgs<ExtArgs>
    _count?: boolean | FelhasznalokCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $FelhasznalokPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Felhasznalok"
    objects: {
      Jogkorok: Prisma.$JogkorokPayload<ExtArgs>
      Orarend: Prisma.$OrarendPayload<ExtArgs>[]
      Vizsgak: Prisma.$VizsgakPayload<ExtArgs>[]
      TanuloElorehaladas: Prisma.$TanuloElorehaladasPayload<ExtArgs>[]
      TanuloElorehaladasV: Prisma.$TanuloElorehaladasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      felhasznalo_id: number
      vezeteknev: string
      keresztnev: string
      email: string
      jelszo: string
      bankszamla: string
      jogkor_id: number
    }, ExtArgs["result"]["felhasznalok"]>
    composites: {}
  }

  type FelhasznalokGetPayload<S extends boolean | null | undefined | FelhasznalokDefaultArgs> = $Result.GetResult<Prisma.$FelhasznalokPayload, S>

  type FelhasznalokCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FelhasznalokFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FelhasznalokCountAggregateInputType | true
    }

  export interface FelhasznalokDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Felhasznalok'], meta: { name: 'Felhasznalok' } }
    /**
     * Find zero or one Felhasznalok that matches the filter.
     * @param {FelhasznalokFindUniqueArgs} args - Arguments to find a Felhasznalok
     * @example
     * // Get one Felhasznalok
     * const felhasznalok = await prisma.felhasznalok.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FelhasznalokFindUniqueArgs>(args: SelectSubset<T, FelhasznalokFindUniqueArgs<ExtArgs>>): Prisma__FelhasznalokClient<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Felhasznalok that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FelhasznalokFindUniqueOrThrowArgs} args - Arguments to find a Felhasznalok
     * @example
     * // Get one Felhasznalok
     * const felhasznalok = await prisma.felhasznalok.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FelhasznalokFindUniqueOrThrowArgs>(args: SelectSubset<T, FelhasznalokFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FelhasznalokClient<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Felhasznalok that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FelhasznalokFindFirstArgs} args - Arguments to find a Felhasznalok
     * @example
     * // Get one Felhasznalok
     * const felhasznalok = await prisma.felhasznalok.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FelhasznalokFindFirstArgs>(args?: SelectSubset<T, FelhasznalokFindFirstArgs<ExtArgs>>): Prisma__FelhasznalokClient<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Felhasznalok that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FelhasznalokFindFirstOrThrowArgs} args - Arguments to find a Felhasznalok
     * @example
     * // Get one Felhasznalok
     * const felhasznalok = await prisma.felhasznalok.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FelhasznalokFindFirstOrThrowArgs>(args?: SelectSubset<T, FelhasznalokFindFirstOrThrowArgs<ExtArgs>>): Prisma__FelhasznalokClient<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Felhasznaloks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FelhasznalokFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Felhasznaloks
     * const felhasznaloks = await prisma.felhasznalok.findMany()
     * 
     * // Get first 10 Felhasznaloks
     * const felhasznaloks = await prisma.felhasznalok.findMany({ take: 10 })
     * 
     * // Only select the `felhasznalo_id`
     * const felhasznalokWithFelhasznalo_idOnly = await prisma.felhasznalok.findMany({ select: { felhasznalo_id: true } })
     * 
     */
    findMany<T extends FelhasznalokFindManyArgs>(args?: SelectSubset<T, FelhasznalokFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Felhasznalok.
     * @param {FelhasznalokCreateArgs} args - Arguments to create a Felhasznalok.
     * @example
     * // Create one Felhasznalok
     * const Felhasznalok = await prisma.felhasznalok.create({
     *   data: {
     *     // ... data to create a Felhasznalok
     *   }
     * })
     * 
     */
    create<T extends FelhasznalokCreateArgs>(args: SelectSubset<T, FelhasznalokCreateArgs<ExtArgs>>): Prisma__FelhasznalokClient<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Felhasznaloks.
     * @param {FelhasznalokCreateManyArgs} args - Arguments to create many Felhasznaloks.
     * @example
     * // Create many Felhasznaloks
     * const felhasznalok = await prisma.felhasznalok.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FelhasznalokCreateManyArgs>(args?: SelectSubset<T, FelhasznalokCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Felhasznalok.
     * @param {FelhasznalokDeleteArgs} args - Arguments to delete one Felhasznalok.
     * @example
     * // Delete one Felhasznalok
     * const Felhasznalok = await prisma.felhasznalok.delete({
     *   where: {
     *     // ... filter to delete one Felhasznalok
     *   }
     * })
     * 
     */
    delete<T extends FelhasznalokDeleteArgs>(args: SelectSubset<T, FelhasznalokDeleteArgs<ExtArgs>>): Prisma__FelhasznalokClient<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Felhasznalok.
     * @param {FelhasznalokUpdateArgs} args - Arguments to update one Felhasznalok.
     * @example
     * // Update one Felhasznalok
     * const felhasznalok = await prisma.felhasznalok.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FelhasznalokUpdateArgs>(args: SelectSubset<T, FelhasznalokUpdateArgs<ExtArgs>>): Prisma__FelhasznalokClient<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Felhasznaloks.
     * @param {FelhasznalokDeleteManyArgs} args - Arguments to filter Felhasznaloks to delete.
     * @example
     * // Delete a few Felhasznaloks
     * const { count } = await prisma.felhasznalok.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FelhasznalokDeleteManyArgs>(args?: SelectSubset<T, FelhasznalokDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Felhasznaloks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FelhasznalokUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Felhasznaloks
     * const felhasznalok = await prisma.felhasznalok.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FelhasznalokUpdateManyArgs>(args: SelectSubset<T, FelhasznalokUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Felhasznalok.
     * @param {FelhasznalokUpsertArgs} args - Arguments to update or create a Felhasznalok.
     * @example
     * // Update or create a Felhasznalok
     * const felhasznalok = await prisma.felhasznalok.upsert({
     *   create: {
     *     // ... data to create a Felhasznalok
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Felhasznalok we want to update
     *   }
     * })
     */
    upsert<T extends FelhasznalokUpsertArgs>(args: SelectSubset<T, FelhasznalokUpsertArgs<ExtArgs>>): Prisma__FelhasznalokClient<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Felhasznaloks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FelhasznalokCountArgs} args - Arguments to filter Felhasznaloks to count.
     * @example
     * // Count the number of Felhasznaloks
     * const count = await prisma.felhasznalok.count({
     *   where: {
     *     // ... the filter for the Felhasznaloks we want to count
     *   }
     * })
    **/
    count<T extends FelhasznalokCountArgs>(
      args?: Subset<T, FelhasznalokCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FelhasznalokCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Felhasznalok.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FelhasznalokAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FelhasznalokAggregateArgs>(args: Subset<T, FelhasznalokAggregateArgs>): Prisma.PrismaPromise<GetFelhasznalokAggregateType<T>>

    /**
     * Group by Felhasznalok.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FelhasznalokGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FelhasznalokGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FelhasznalokGroupByArgs['orderBy'] }
        : { orderBy?: FelhasznalokGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FelhasznalokGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFelhasznalokGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Felhasznalok model
   */
  readonly fields: FelhasznalokFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Felhasznalok.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FelhasznalokClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Jogkorok<T extends JogkorokDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JogkorokDefaultArgs<ExtArgs>>): Prisma__JogkorokClient<$Result.GetResult<Prisma.$JogkorokPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Orarend<T extends Felhasznalok$OrarendArgs<ExtArgs> = {}>(args?: Subset<T, Felhasznalok$OrarendArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrarendPayload<ExtArgs>, T, "findMany"> | Null>
    Vizsgak<T extends Felhasznalok$VizsgakArgs<ExtArgs> = {}>(args?: Subset<T, Felhasznalok$VizsgakArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VizsgakPayload<ExtArgs>, T, "findMany"> | Null>
    TanuloElorehaladas<T extends Felhasznalok$TanuloElorehaladasArgs<ExtArgs> = {}>(args?: Subset<T, Felhasznalok$TanuloElorehaladasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TanuloElorehaladasPayload<ExtArgs>, T, "findMany"> | Null>
    TanuloElorehaladasV<T extends Felhasznalok$TanuloElorehaladasVArgs<ExtArgs> = {}>(args?: Subset<T, Felhasznalok$TanuloElorehaladasVArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TanuloElorehaladasPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Felhasznalok model
   */ 
  interface FelhasznalokFieldRefs {
    readonly felhasznalo_id: FieldRef<"Felhasznalok", 'Int'>
    readonly vezeteknev: FieldRef<"Felhasznalok", 'String'>
    readonly keresztnev: FieldRef<"Felhasznalok", 'String'>
    readonly email: FieldRef<"Felhasznalok", 'String'>
    readonly jelszo: FieldRef<"Felhasznalok", 'String'>
    readonly bankszamla: FieldRef<"Felhasznalok", 'String'>
    readonly jogkor_id: FieldRef<"Felhasznalok", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Felhasznalok findUnique
   */
  export type FelhasznalokFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Felhasznalok
     */
    select?: FelhasznalokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FelhasznalokInclude<ExtArgs> | null
    /**
     * Filter, which Felhasznalok to fetch.
     */
    where: FelhasznalokWhereUniqueInput
  }

  /**
   * Felhasznalok findUniqueOrThrow
   */
  export type FelhasznalokFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Felhasznalok
     */
    select?: FelhasznalokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FelhasznalokInclude<ExtArgs> | null
    /**
     * Filter, which Felhasznalok to fetch.
     */
    where: FelhasznalokWhereUniqueInput
  }

  /**
   * Felhasznalok findFirst
   */
  export type FelhasznalokFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Felhasznalok
     */
    select?: FelhasznalokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FelhasznalokInclude<ExtArgs> | null
    /**
     * Filter, which Felhasznalok to fetch.
     */
    where?: FelhasznalokWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Felhasznaloks to fetch.
     */
    orderBy?: FelhasznalokOrderByWithRelationInput | FelhasznalokOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Felhasznaloks.
     */
    cursor?: FelhasznalokWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Felhasznaloks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Felhasznaloks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Felhasznaloks.
     */
    distinct?: FelhasznalokScalarFieldEnum | FelhasznalokScalarFieldEnum[]
  }

  /**
   * Felhasznalok findFirstOrThrow
   */
  export type FelhasznalokFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Felhasznalok
     */
    select?: FelhasznalokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FelhasznalokInclude<ExtArgs> | null
    /**
     * Filter, which Felhasznalok to fetch.
     */
    where?: FelhasznalokWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Felhasznaloks to fetch.
     */
    orderBy?: FelhasznalokOrderByWithRelationInput | FelhasznalokOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Felhasznaloks.
     */
    cursor?: FelhasznalokWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Felhasznaloks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Felhasznaloks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Felhasznaloks.
     */
    distinct?: FelhasznalokScalarFieldEnum | FelhasznalokScalarFieldEnum[]
  }

  /**
   * Felhasznalok findMany
   */
  export type FelhasznalokFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Felhasznalok
     */
    select?: FelhasznalokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FelhasznalokInclude<ExtArgs> | null
    /**
     * Filter, which Felhasznaloks to fetch.
     */
    where?: FelhasznalokWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Felhasznaloks to fetch.
     */
    orderBy?: FelhasznalokOrderByWithRelationInput | FelhasznalokOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Felhasznaloks.
     */
    cursor?: FelhasznalokWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Felhasznaloks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Felhasznaloks.
     */
    skip?: number
    distinct?: FelhasznalokScalarFieldEnum | FelhasznalokScalarFieldEnum[]
  }

  /**
   * Felhasznalok create
   */
  export type FelhasznalokCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Felhasznalok
     */
    select?: FelhasznalokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FelhasznalokInclude<ExtArgs> | null
    /**
     * The data needed to create a Felhasznalok.
     */
    data: XOR<FelhasznalokCreateInput, FelhasznalokUncheckedCreateInput>
  }

  /**
   * Felhasznalok createMany
   */
  export type FelhasznalokCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Felhasznaloks.
     */
    data: FelhasznalokCreateManyInput | FelhasznalokCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Felhasznalok update
   */
  export type FelhasznalokUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Felhasznalok
     */
    select?: FelhasznalokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FelhasznalokInclude<ExtArgs> | null
    /**
     * The data needed to update a Felhasznalok.
     */
    data: XOR<FelhasznalokUpdateInput, FelhasznalokUncheckedUpdateInput>
    /**
     * Choose, which Felhasznalok to update.
     */
    where: FelhasznalokWhereUniqueInput
  }

  /**
   * Felhasznalok updateMany
   */
  export type FelhasznalokUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Felhasznaloks.
     */
    data: XOR<FelhasznalokUpdateManyMutationInput, FelhasznalokUncheckedUpdateManyInput>
    /**
     * Filter which Felhasznaloks to update
     */
    where?: FelhasznalokWhereInput
  }

  /**
   * Felhasznalok upsert
   */
  export type FelhasznalokUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Felhasznalok
     */
    select?: FelhasznalokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FelhasznalokInclude<ExtArgs> | null
    /**
     * The filter to search for the Felhasznalok to update in case it exists.
     */
    where: FelhasznalokWhereUniqueInput
    /**
     * In case the Felhasznalok found by the `where` argument doesn't exist, create a new Felhasznalok with this data.
     */
    create: XOR<FelhasznalokCreateInput, FelhasznalokUncheckedCreateInput>
    /**
     * In case the Felhasznalok was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FelhasznalokUpdateInput, FelhasznalokUncheckedUpdateInput>
  }

  /**
   * Felhasznalok delete
   */
  export type FelhasznalokDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Felhasznalok
     */
    select?: FelhasznalokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FelhasznalokInclude<ExtArgs> | null
    /**
     * Filter which Felhasznalok to delete.
     */
    where: FelhasznalokWhereUniqueInput
  }

  /**
   * Felhasznalok deleteMany
   */
  export type FelhasznalokDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Felhasznaloks to delete
     */
    where?: FelhasznalokWhereInput
  }

  /**
   * Felhasznalok.Orarend
   */
  export type Felhasznalok$OrarendArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orarend
     */
    select?: OrarendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrarendInclude<ExtArgs> | null
    where?: OrarendWhereInput
    orderBy?: OrarendOrderByWithRelationInput | OrarendOrderByWithRelationInput[]
    cursor?: OrarendWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrarendScalarFieldEnum | OrarendScalarFieldEnum[]
  }

  /**
   * Felhasznalok.Vizsgak
   */
  export type Felhasznalok$VizsgakArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgak
     */
    select?: VizsgakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgakInclude<ExtArgs> | null
    where?: VizsgakWhereInput
    orderBy?: VizsgakOrderByWithRelationInput | VizsgakOrderByWithRelationInput[]
    cursor?: VizsgakWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VizsgakScalarFieldEnum | VizsgakScalarFieldEnum[]
  }

  /**
   * Felhasznalok.TanuloElorehaladas
   */
  export type Felhasznalok$TanuloElorehaladasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TanuloElorehaladas
     */
    select?: TanuloElorehaladasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TanuloElorehaladasInclude<ExtArgs> | null
    where?: TanuloElorehaladasWhereInput
    orderBy?: TanuloElorehaladasOrderByWithRelationInput | TanuloElorehaladasOrderByWithRelationInput[]
    cursor?: TanuloElorehaladasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TanuloElorehaladasScalarFieldEnum | TanuloElorehaladasScalarFieldEnum[]
  }

  /**
   * Felhasznalok.TanuloElorehaladasV
   */
  export type Felhasznalok$TanuloElorehaladasVArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TanuloElorehaladas
     */
    select?: TanuloElorehaladasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TanuloElorehaladasInclude<ExtArgs> | null
    where?: TanuloElorehaladasWhereInput
    orderBy?: TanuloElorehaladasOrderByWithRelationInput | TanuloElorehaladasOrderByWithRelationInput[]
    cursor?: TanuloElorehaladasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TanuloElorehaladasScalarFieldEnum | TanuloElorehaladasScalarFieldEnum[]
  }

  /**
   * Felhasznalok without action
   */
  export type FelhasznalokDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Felhasznalok
     */
    select?: FelhasznalokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FelhasznalokInclude<ExtArgs> | null
  }


  /**
   * Model Jogkorok
   */

  export type AggregateJogkorok = {
    _count: JogkorokCountAggregateOutputType | null
    _avg: JogkorokAvgAggregateOutputType | null
    _sum: JogkorokSumAggregateOutputType | null
    _min: JogkorokMinAggregateOutputType | null
    _max: JogkorokMaxAggregateOutputType | null
  }

  export type JogkorokAvgAggregateOutputType = {
    jogkor_id: number | null
    jogkor: number | null
  }

  export type JogkorokSumAggregateOutputType = {
    jogkor_id: number | null
    jogkor: number | null
  }

  export type JogkorokMinAggregateOutputType = {
    jogkor_id: number | null
    jogkor: number | null
  }

  export type JogkorokMaxAggregateOutputType = {
    jogkor_id: number | null
    jogkor: number | null
  }

  export type JogkorokCountAggregateOutputType = {
    jogkor_id: number
    jogkor: number
    _all: number
  }


  export type JogkorokAvgAggregateInputType = {
    jogkor_id?: true
    jogkor?: true
  }

  export type JogkorokSumAggregateInputType = {
    jogkor_id?: true
    jogkor?: true
  }

  export type JogkorokMinAggregateInputType = {
    jogkor_id?: true
    jogkor?: true
  }

  export type JogkorokMaxAggregateInputType = {
    jogkor_id?: true
    jogkor?: true
  }

  export type JogkorokCountAggregateInputType = {
    jogkor_id?: true
    jogkor?: true
    _all?: true
  }

  export type JogkorokAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jogkorok to aggregate.
     */
    where?: JogkorokWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogkoroks to fetch.
     */
    orderBy?: JogkorokOrderByWithRelationInput | JogkorokOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JogkorokWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogkoroks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogkoroks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jogkoroks
    **/
    _count?: true | JogkorokCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JogkorokAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JogkorokSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JogkorokMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JogkorokMaxAggregateInputType
  }

  export type GetJogkorokAggregateType<T extends JogkorokAggregateArgs> = {
        [P in keyof T & keyof AggregateJogkorok]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJogkorok[P]>
      : GetScalarType<T[P], AggregateJogkorok[P]>
  }




  export type JogkorokGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JogkorokWhereInput
    orderBy?: JogkorokOrderByWithAggregationInput | JogkorokOrderByWithAggregationInput[]
    by: JogkorokScalarFieldEnum[] | JogkorokScalarFieldEnum
    having?: JogkorokScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JogkorokCountAggregateInputType | true
    _avg?: JogkorokAvgAggregateInputType
    _sum?: JogkorokSumAggregateInputType
    _min?: JogkorokMinAggregateInputType
    _max?: JogkorokMaxAggregateInputType
  }

  export type JogkorokGroupByOutputType = {
    jogkor_id: number
    jogkor: number
    _count: JogkorokCountAggregateOutputType | null
    _avg: JogkorokAvgAggregateOutputType | null
    _sum: JogkorokSumAggregateOutputType | null
    _min: JogkorokMinAggregateOutputType | null
    _max: JogkorokMaxAggregateOutputType | null
  }

  type GetJogkorokGroupByPayload<T extends JogkorokGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JogkorokGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JogkorokGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JogkorokGroupByOutputType[P]>
            : GetScalarType<T[P], JogkorokGroupByOutputType[P]>
        }
      >
    >


  export type JogkorokSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    jogkor_id?: boolean
    jogkor?: boolean
    Felhasznalok?: boolean | Jogkorok$FelhasznalokArgs<ExtArgs>
    _count?: boolean | JogkorokCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jogkorok"]>


  export type JogkorokSelectScalar = {
    jogkor_id?: boolean
    jogkor?: boolean
  }

  export type JogkorokInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Felhasznalok?: boolean | Jogkorok$FelhasznalokArgs<ExtArgs>
    _count?: boolean | JogkorokCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $JogkorokPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Jogkorok"
    objects: {
      Felhasznalok: Prisma.$FelhasznalokPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      jogkor_id: number
      jogkor: number
    }, ExtArgs["result"]["jogkorok"]>
    composites: {}
  }

  type JogkorokGetPayload<S extends boolean | null | undefined | JogkorokDefaultArgs> = $Result.GetResult<Prisma.$JogkorokPayload, S>

  type JogkorokCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JogkorokFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JogkorokCountAggregateInputType | true
    }

  export interface JogkorokDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Jogkorok'], meta: { name: 'Jogkorok' } }
    /**
     * Find zero or one Jogkorok that matches the filter.
     * @param {JogkorokFindUniqueArgs} args - Arguments to find a Jogkorok
     * @example
     * // Get one Jogkorok
     * const jogkorok = await prisma.jogkorok.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JogkorokFindUniqueArgs>(args: SelectSubset<T, JogkorokFindUniqueArgs<ExtArgs>>): Prisma__JogkorokClient<$Result.GetResult<Prisma.$JogkorokPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Jogkorok that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JogkorokFindUniqueOrThrowArgs} args - Arguments to find a Jogkorok
     * @example
     * // Get one Jogkorok
     * const jogkorok = await prisma.jogkorok.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JogkorokFindUniqueOrThrowArgs>(args: SelectSubset<T, JogkorokFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JogkorokClient<$Result.GetResult<Prisma.$JogkorokPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Jogkorok that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogkorokFindFirstArgs} args - Arguments to find a Jogkorok
     * @example
     * // Get one Jogkorok
     * const jogkorok = await prisma.jogkorok.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JogkorokFindFirstArgs>(args?: SelectSubset<T, JogkorokFindFirstArgs<ExtArgs>>): Prisma__JogkorokClient<$Result.GetResult<Prisma.$JogkorokPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Jogkorok that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogkorokFindFirstOrThrowArgs} args - Arguments to find a Jogkorok
     * @example
     * // Get one Jogkorok
     * const jogkorok = await prisma.jogkorok.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JogkorokFindFirstOrThrowArgs>(args?: SelectSubset<T, JogkorokFindFirstOrThrowArgs<ExtArgs>>): Prisma__JogkorokClient<$Result.GetResult<Prisma.$JogkorokPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Jogkoroks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogkorokFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jogkoroks
     * const jogkoroks = await prisma.jogkorok.findMany()
     * 
     * // Get first 10 Jogkoroks
     * const jogkoroks = await prisma.jogkorok.findMany({ take: 10 })
     * 
     * // Only select the `jogkor_id`
     * const jogkorokWithJogkor_idOnly = await prisma.jogkorok.findMany({ select: { jogkor_id: true } })
     * 
     */
    findMany<T extends JogkorokFindManyArgs>(args?: SelectSubset<T, JogkorokFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JogkorokPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Jogkorok.
     * @param {JogkorokCreateArgs} args - Arguments to create a Jogkorok.
     * @example
     * // Create one Jogkorok
     * const Jogkorok = await prisma.jogkorok.create({
     *   data: {
     *     // ... data to create a Jogkorok
     *   }
     * })
     * 
     */
    create<T extends JogkorokCreateArgs>(args: SelectSubset<T, JogkorokCreateArgs<ExtArgs>>): Prisma__JogkorokClient<$Result.GetResult<Prisma.$JogkorokPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Jogkoroks.
     * @param {JogkorokCreateManyArgs} args - Arguments to create many Jogkoroks.
     * @example
     * // Create many Jogkoroks
     * const jogkorok = await prisma.jogkorok.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JogkorokCreateManyArgs>(args?: SelectSubset<T, JogkorokCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Jogkorok.
     * @param {JogkorokDeleteArgs} args - Arguments to delete one Jogkorok.
     * @example
     * // Delete one Jogkorok
     * const Jogkorok = await prisma.jogkorok.delete({
     *   where: {
     *     // ... filter to delete one Jogkorok
     *   }
     * })
     * 
     */
    delete<T extends JogkorokDeleteArgs>(args: SelectSubset<T, JogkorokDeleteArgs<ExtArgs>>): Prisma__JogkorokClient<$Result.GetResult<Prisma.$JogkorokPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Jogkorok.
     * @param {JogkorokUpdateArgs} args - Arguments to update one Jogkorok.
     * @example
     * // Update one Jogkorok
     * const jogkorok = await prisma.jogkorok.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JogkorokUpdateArgs>(args: SelectSubset<T, JogkorokUpdateArgs<ExtArgs>>): Prisma__JogkorokClient<$Result.GetResult<Prisma.$JogkorokPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Jogkoroks.
     * @param {JogkorokDeleteManyArgs} args - Arguments to filter Jogkoroks to delete.
     * @example
     * // Delete a few Jogkoroks
     * const { count } = await prisma.jogkorok.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JogkorokDeleteManyArgs>(args?: SelectSubset<T, JogkorokDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jogkoroks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogkorokUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jogkoroks
     * const jogkorok = await prisma.jogkorok.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JogkorokUpdateManyArgs>(args: SelectSubset<T, JogkorokUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jogkorok.
     * @param {JogkorokUpsertArgs} args - Arguments to update or create a Jogkorok.
     * @example
     * // Update or create a Jogkorok
     * const jogkorok = await prisma.jogkorok.upsert({
     *   create: {
     *     // ... data to create a Jogkorok
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jogkorok we want to update
     *   }
     * })
     */
    upsert<T extends JogkorokUpsertArgs>(args: SelectSubset<T, JogkorokUpsertArgs<ExtArgs>>): Prisma__JogkorokClient<$Result.GetResult<Prisma.$JogkorokPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Jogkoroks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogkorokCountArgs} args - Arguments to filter Jogkoroks to count.
     * @example
     * // Count the number of Jogkoroks
     * const count = await prisma.jogkorok.count({
     *   where: {
     *     // ... the filter for the Jogkoroks we want to count
     *   }
     * })
    **/
    count<T extends JogkorokCountArgs>(
      args?: Subset<T, JogkorokCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JogkorokCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jogkorok.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogkorokAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JogkorokAggregateArgs>(args: Subset<T, JogkorokAggregateArgs>): Prisma.PrismaPromise<GetJogkorokAggregateType<T>>

    /**
     * Group by Jogkorok.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JogkorokGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JogkorokGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JogkorokGroupByArgs['orderBy'] }
        : { orderBy?: JogkorokGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JogkorokGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJogkorokGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Jogkorok model
   */
  readonly fields: JogkorokFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Jogkorok.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JogkorokClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Felhasznalok<T extends Jogkorok$FelhasznalokArgs<ExtArgs> = {}>(args?: Subset<T, Jogkorok$FelhasznalokArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Jogkorok model
   */ 
  interface JogkorokFieldRefs {
    readonly jogkor_id: FieldRef<"Jogkorok", 'Int'>
    readonly jogkor: FieldRef<"Jogkorok", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Jogkorok findUnique
   */
  export type JogkorokFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogkorok
     */
    select?: JogkorokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogkorokInclude<ExtArgs> | null
    /**
     * Filter, which Jogkorok to fetch.
     */
    where: JogkorokWhereUniqueInput
  }

  /**
   * Jogkorok findUniqueOrThrow
   */
  export type JogkorokFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogkorok
     */
    select?: JogkorokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogkorokInclude<ExtArgs> | null
    /**
     * Filter, which Jogkorok to fetch.
     */
    where: JogkorokWhereUniqueInput
  }

  /**
   * Jogkorok findFirst
   */
  export type JogkorokFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogkorok
     */
    select?: JogkorokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogkorokInclude<ExtArgs> | null
    /**
     * Filter, which Jogkorok to fetch.
     */
    where?: JogkorokWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogkoroks to fetch.
     */
    orderBy?: JogkorokOrderByWithRelationInput | JogkorokOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jogkoroks.
     */
    cursor?: JogkorokWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogkoroks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogkoroks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jogkoroks.
     */
    distinct?: JogkorokScalarFieldEnum | JogkorokScalarFieldEnum[]
  }

  /**
   * Jogkorok findFirstOrThrow
   */
  export type JogkorokFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogkorok
     */
    select?: JogkorokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogkorokInclude<ExtArgs> | null
    /**
     * Filter, which Jogkorok to fetch.
     */
    where?: JogkorokWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogkoroks to fetch.
     */
    orderBy?: JogkorokOrderByWithRelationInput | JogkorokOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jogkoroks.
     */
    cursor?: JogkorokWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogkoroks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogkoroks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jogkoroks.
     */
    distinct?: JogkorokScalarFieldEnum | JogkorokScalarFieldEnum[]
  }

  /**
   * Jogkorok findMany
   */
  export type JogkorokFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogkorok
     */
    select?: JogkorokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogkorokInclude<ExtArgs> | null
    /**
     * Filter, which Jogkoroks to fetch.
     */
    where?: JogkorokWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jogkoroks to fetch.
     */
    orderBy?: JogkorokOrderByWithRelationInput | JogkorokOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jogkoroks.
     */
    cursor?: JogkorokWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jogkoroks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jogkoroks.
     */
    skip?: number
    distinct?: JogkorokScalarFieldEnum | JogkorokScalarFieldEnum[]
  }

  /**
   * Jogkorok create
   */
  export type JogkorokCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogkorok
     */
    select?: JogkorokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogkorokInclude<ExtArgs> | null
    /**
     * The data needed to create a Jogkorok.
     */
    data: XOR<JogkorokCreateInput, JogkorokUncheckedCreateInput>
  }

  /**
   * Jogkorok createMany
   */
  export type JogkorokCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jogkoroks.
     */
    data: JogkorokCreateManyInput | JogkorokCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Jogkorok update
   */
  export type JogkorokUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogkorok
     */
    select?: JogkorokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogkorokInclude<ExtArgs> | null
    /**
     * The data needed to update a Jogkorok.
     */
    data: XOR<JogkorokUpdateInput, JogkorokUncheckedUpdateInput>
    /**
     * Choose, which Jogkorok to update.
     */
    where: JogkorokWhereUniqueInput
  }

  /**
   * Jogkorok updateMany
   */
  export type JogkorokUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jogkoroks.
     */
    data: XOR<JogkorokUpdateManyMutationInput, JogkorokUncheckedUpdateManyInput>
    /**
     * Filter which Jogkoroks to update
     */
    where?: JogkorokWhereInput
  }

  /**
   * Jogkorok upsert
   */
  export type JogkorokUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogkorok
     */
    select?: JogkorokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogkorokInclude<ExtArgs> | null
    /**
     * The filter to search for the Jogkorok to update in case it exists.
     */
    where: JogkorokWhereUniqueInput
    /**
     * In case the Jogkorok found by the `where` argument doesn't exist, create a new Jogkorok with this data.
     */
    create: XOR<JogkorokCreateInput, JogkorokUncheckedCreateInput>
    /**
     * In case the Jogkorok was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JogkorokUpdateInput, JogkorokUncheckedUpdateInput>
  }

  /**
   * Jogkorok delete
   */
  export type JogkorokDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogkorok
     */
    select?: JogkorokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogkorokInclude<ExtArgs> | null
    /**
     * Filter which Jogkorok to delete.
     */
    where: JogkorokWhereUniqueInput
  }

  /**
   * Jogkorok deleteMany
   */
  export type JogkorokDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jogkoroks to delete
     */
    where?: JogkorokWhereInput
  }

  /**
   * Jogkorok.Felhasznalok
   */
  export type Jogkorok$FelhasznalokArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Felhasznalok
     */
    select?: FelhasznalokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FelhasznalokInclude<ExtArgs> | null
    where?: FelhasznalokWhereInput
    orderBy?: FelhasznalokOrderByWithRelationInput | FelhasznalokOrderByWithRelationInput[]
    cursor?: FelhasznalokWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FelhasznalokScalarFieldEnum | FelhasznalokScalarFieldEnum[]
  }

  /**
   * Jogkorok without action
   */
  export type JogkorokDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jogkorok
     */
    select?: JogkorokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JogkorokInclude<ExtArgs> | null
  }


  /**
   * Model Kifizetesek
   */

  export type AggregateKifizetesek = {
    _count: KifizetesekCountAggregateOutputType | null
    _avg: KifizetesekAvgAggregateOutputType | null
    _sum: KifizetesekSumAggregateOutputType | null
    _min: KifizetesekMinAggregateOutputType | null
    _max: KifizetesekMaxAggregateOutputType | null
  }

  export type KifizetesekAvgAggregateOutputType = {
    kifizetes_id: number | null
    elorehaladas_id: number | null
    osszeg: number | null
  }

  export type KifizetesekSumAggregateOutputType = {
    kifizetes_id: number | null
    elorehaladas_id: number | null
    osszeg: number | null
  }

  export type KifizetesekMinAggregateOutputType = {
    kifizetes_id: number | null
    elorehaladas_id: number | null
    targy: string | null
    osszeg: number | null
    kifizetve: boolean | null
  }

  export type KifizetesekMaxAggregateOutputType = {
    kifizetes_id: number | null
    elorehaladas_id: number | null
    targy: string | null
    osszeg: number | null
    kifizetve: boolean | null
  }

  export type KifizetesekCountAggregateOutputType = {
    kifizetes_id: number
    elorehaladas_id: number
    targy: number
    osszeg: number
    kifizetve: number
    _all: number
  }


  export type KifizetesekAvgAggregateInputType = {
    kifizetes_id?: true
    elorehaladas_id?: true
    osszeg?: true
  }

  export type KifizetesekSumAggregateInputType = {
    kifizetes_id?: true
    elorehaladas_id?: true
    osszeg?: true
  }

  export type KifizetesekMinAggregateInputType = {
    kifizetes_id?: true
    elorehaladas_id?: true
    targy?: true
    osszeg?: true
    kifizetve?: true
  }

  export type KifizetesekMaxAggregateInputType = {
    kifizetes_id?: true
    elorehaladas_id?: true
    targy?: true
    osszeg?: true
    kifizetve?: true
  }

  export type KifizetesekCountAggregateInputType = {
    kifizetes_id?: true
    elorehaladas_id?: true
    targy?: true
    osszeg?: true
    kifizetve?: true
    _all?: true
  }

  export type KifizetesekAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kifizetesek to aggregate.
     */
    where?: KifizetesekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kifizeteseks to fetch.
     */
    orderBy?: KifizetesekOrderByWithRelationInput | KifizetesekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KifizetesekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kifizeteseks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kifizeteseks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kifizeteseks
    **/
    _count?: true | KifizetesekCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KifizetesekAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KifizetesekSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KifizetesekMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KifizetesekMaxAggregateInputType
  }

  export type GetKifizetesekAggregateType<T extends KifizetesekAggregateArgs> = {
        [P in keyof T & keyof AggregateKifizetesek]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKifizetesek[P]>
      : GetScalarType<T[P], AggregateKifizetesek[P]>
  }




  export type KifizetesekGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KifizetesekWhereInput
    orderBy?: KifizetesekOrderByWithAggregationInput | KifizetesekOrderByWithAggregationInput[]
    by: KifizetesekScalarFieldEnum[] | KifizetesekScalarFieldEnum
    having?: KifizetesekScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KifizetesekCountAggregateInputType | true
    _avg?: KifizetesekAvgAggregateInputType
    _sum?: KifizetesekSumAggregateInputType
    _min?: KifizetesekMinAggregateInputType
    _max?: KifizetesekMaxAggregateInputType
  }

  export type KifizetesekGroupByOutputType = {
    kifizetes_id: number
    elorehaladas_id: number
    targy: string
    osszeg: number
    kifizetve: boolean
    _count: KifizetesekCountAggregateOutputType | null
    _avg: KifizetesekAvgAggregateOutputType | null
    _sum: KifizetesekSumAggregateOutputType | null
    _min: KifizetesekMinAggregateOutputType | null
    _max: KifizetesekMaxAggregateOutputType | null
  }

  type GetKifizetesekGroupByPayload<T extends KifizetesekGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KifizetesekGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KifizetesekGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KifizetesekGroupByOutputType[P]>
            : GetScalarType<T[P], KifizetesekGroupByOutputType[P]>
        }
      >
    >


  export type KifizetesekSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    kifizetes_id?: boolean
    elorehaladas_id?: boolean
    targy?: boolean
    osszeg?: boolean
    kifizetve?: boolean
    TanuloElorehaladas?: boolean | TanuloElorehaladasDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kifizetesek"]>


  export type KifizetesekSelectScalar = {
    kifizetes_id?: boolean
    elorehaladas_id?: boolean
    targy?: boolean
    osszeg?: boolean
    kifizetve?: boolean
  }

  export type KifizetesekInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TanuloElorehaladas?: boolean | TanuloElorehaladasDefaultArgs<ExtArgs>
  }

  export type $KifizetesekPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kifizetesek"
    objects: {
      TanuloElorehaladas: Prisma.$TanuloElorehaladasPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      kifizetes_id: number
      elorehaladas_id: number
      targy: string
      osszeg: number
      kifizetve: boolean
    }, ExtArgs["result"]["kifizetesek"]>
    composites: {}
  }

  type KifizetesekGetPayload<S extends boolean | null | undefined | KifizetesekDefaultArgs> = $Result.GetResult<Prisma.$KifizetesekPayload, S>

  type KifizetesekCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KifizetesekFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KifizetesekCountAggregateInputType | true
    }

  export interface KifizetesekDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kifizetesek'], meta: { name: 'Kifizetesek' } }
    /**
     * Find zero or one Kifizetesek that matches the filter.
     * @param {KifizetesekFindUniqueArgs} args - Arguments to find a Kifizetesek
     * @example
     * // Get one Kifizetesek
     * const kifizetesek = await prisma.kifizetesek.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KifizetesekFindUniqueArgs>(args: SelectSubset<T, KifizetesekFindUniqueArgs<ExtArgs>>): Prisma__KifizetesekClient<$Result.GetResult<Prisma.$KifizetesekPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Kifizetesek that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KifizetesekFindUniqueOrThrowArgs} args - Arguments to find a Kifizetesek
     * @example
     * // Get one Kifizetesek
     * const kifizetesek = await prisma.kifizetesek.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KifizetesekFindUniqueOrThrowArgs>(args: SelectSubset<T, KifizetesekFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KifizetesekClient<$Result.GetResult<Prisma.$KifizetesekPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Kifizetesek that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KifizetesekFindFirstArgs} args - Arguments to find a Kifizetesek
     * @example
     * // Get one Kifizetesek
     * const kifizetesek = await prisma.kifizetesek.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KifizetesekFindFirstArgs>(args?: SelectSubset<T, KifizetesekFindFirstArgs<ExtArgs>>): Prisma__KifizetesekClient<$Result.GetResult<Prisma.$KifizetesekPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Kifizetesek that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KifizetesekFindFirstOrThrowArgs} args - Arguments to find a Kifizetesek
     * @example
     * // Get one Kifizetesek
     * const kifizetesek = await prisma.kifizetesek.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KifizetesekFindFirstOrThrowArgs>(args?: SelectSubset<T, KifizetesekFindFirstOrThrowArgs<ExtArgs>>): Prisma__KifizetesekClient<$Result.GetResult<Prisma.$KifizetesekPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Kifizeteseks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KifizetesekFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kifizeteseks
     * const kifizeteseks = await prisma.kifizetesek.findMany()
     * 
     * // Get first 10 Kifizeteseks
     * const kifizeteseks = await prisma.kifizetesek.findMany({ take: 10 })
     * 
     * // Only select the `kifizetes_id`
     * const kifizetesekWithKifizetes_idOnly = await prisma.kifizetesek.findMany({ select: { kifizetes_id: true } })
     * 
     */
    findMany<T extends KifizetesekFindManyArgs>(args?: SelectSubset<T, KifizetesekFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KifizetesekPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Kifizetesek.
     * @param {KifizetesekCreateArgs} args - Arguments to create a Kifizetesek.
     * @example
     * // Create one Kifizetesek
     * const Kifizetesek = await prisma.kifizetesek.create({
     *   data: {
     *     // ... data to create a Kifizetesek
     *   }
     * })
     * 
     */
    create<T extends KifizetesekCreateArgs>(args: SelectSubset<T, KifizetesekCreateArgs<ExtArgs>>): Prisma__KifizetesekClient<$Result.GetResult<Prisma.$KifizetesekPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Kifizeteseks.
     * @param {KifizetesekCreateManyArgs} args - Arguments to create many Kifizeteseks.
     * @example
     * // Create many Kifizeteseks
     * const kifizetesek = await prisma.kifizetesek.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KifizetesekCreateManyArgs>(args?: SelectSubset<T, KifizetesekCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Kifizetesek.
     * @param {KifizetesekDeleteArgs} args - Arguments to delete one Kifizetesek.
     * @example
     * // Delete one Kifizetesek
     * const Kifizetesek = await prisma.kifizetesek.delete({
     *   where: {
     *     // ... filter to delete one Kifizetesek
     *   }
     * })
     * 
     */
    delete<T extends KifizetesekDeleteArgs>(args: SelectSubset<T, KifizetesekDeleteArgs<ExtArgs>>): Prisma__KifizetesekClient<$Result.GetResult<Prisma.$KifizetesekPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Kifizetesek.
     * @param {KifizetesekUpdateArgs} args - Arguments to update one Kifizetesek.
     * @example
     * // Update one Kifizetesek
     * const kifizetesek = await prisma.kifizetesek.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KifizetesekUpdateArgs>(args: SelectSubset<T, KifizetesekUpdateArgs<ExtArgs>>): Prisma__KifizetesekClient<$Result.GetResult<Prisma.$KifizetesekPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Kifizeteseks.
     * @param {KifizetesekDeleteManyArgs} args - Arguments to filter Kifizeteseks to delete.
     * @example
     * // Delete a few Kifizeteseks
     * const { count } = await prisma.kifizetesek.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KifizetesekDeleteManyArgs>(args?: SelectSubset<T, KifizetesekDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kifizeteseks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KifizetesekUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kifizeteseks
     * const kifizetesek = await prisma.kifizetesek.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KifizetesekUpdateManyArgs>(args: SelectSubset<T, KifizetesekUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kifizetesek.
     * @param {KifizetesekUpsertArgs} args - Arguments to update or create a Kifizetesek.
     * @example
     * // Update or create a Kifizetesek
     * const kifizetesek = await prisma.kifizetesek.upsert({
     *   create: {
     *     // ... data to create a Kifizetesek
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kifizetesek we want to update
     *   }
     * })
     */
    upsert<T extends KifizetesekUpsertArgs>(args: SelectSubset<T, KifizetesekUpsertArgs<ExtArgs>>): Prisma__KifizetesekClient<$Result.GetResult<Prisma.$KifizetesekPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Kifizeteseks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KifizetesekCountArgs} args - Arguments to filter Kifizeteseks to count.
     * @example
     * // Count the number of Kifizeteseks
     * const count = await prisma.kifizetesek.count({
     *   where: {
     *     // ... the filter for the Kifizeteseks we want to count
     *   }
     * })
    **/
    count<T extends KifizetesekCountArgs>(
      args?: Subset<T, KifizetesekCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KifizetesekCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kifizetesek.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KifizetesekAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KifizetesekAggregateArgs>(args: Subset<T, KifizetesekAggregateArgs>): Prisma.PrismaPromise<GetKifizetesekAggregateType<T>>

    /**
     * Group by Kifizetesek.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KifizetesekGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KifizetesekGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KifizetesekGroupByArgs['orderBy'] }
        : { orderBy?: KifizetesekGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KifizetesekGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKifizetesekGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kifizetesek model
   */
  readonly fields: KifizetesekFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kifizetesek.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KifizetesekClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    TanuloElorehaladas<T extends TanuloElorehaladasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TanuloElorehaladasDefaultArgs<ExtArgs>>): Prisma__TanuloElorehaladasClient<$Result.GetResult<Prisma.$TanuloElorehaladasPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Kifizetesek model
   */ 
  interface KifizetesekFieldRefs {
    readonly kifizetes_id: FieldRef<"Kifizetesek", 'Int'>
    readonly elorehaladas_id: FieldRef<"Kifizetesek", 'Int'>
    readonly targy: FieldRef<"Kifizetesek", 'String'>
    readonly osszeg: FieldRef<"Kifizetesek", 'Int'>
    readonly kifizetve: FieldRef<"Kifizetesek", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Kifizetesek findUnique
   */
  export type KifizetesekFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kifizetesek
     */
    select?: KifizetesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KifizetesekInclude<ExtArgs> | null
    /**
     * Filter, which Kifizetesek to fetch.
     */
    where: KifizetesekWhereUniqueInput
  }

  /**
   * Kifizetesek findUniqueOrThrow
   */
  export type KifizetesekFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kifizetesek
     */
    select?: KifizetesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KifizetesekInclude<ExtArgs> | null
    /**
     * Filter, which Kifizetesek to fetch.
     */
    where: KifizetesekWhereUniqueInput
  }

  /**
   * Kifizetesek findFirst
   */
  export type KifizetesekFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kifizetesek
     */
    select?: KifizetesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KifizetesekInclude<ExtArgs> | null
    /**
     * Filter, which Kifizetesek to fetch.
     */
    where?: KifizetesekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kifizeteseks to fetch.
     */
    orderBy?: KifizetesekOrderByWithRelationInput | KifizetesekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kifizeteseks.
     */
    cursor?: KifizetesekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kifizeteseks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kifizeteseks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kifizeteseks.
     */
    distinct?: KifizetesekScalarFieldEnum | KifizetesekScalarFieldEnum[]
  }

  /**
   * Kifizetesek findFirstOrThrow
   */
  export type KifizetesekFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kifizetesek
     */
    select?: KifizetesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KifizetesekInclude<ExtArgs> | null
    /**
     * Filter, which Kifizetesek to fetch.
     */
    where?: KifizetesekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kifizeteseks to fetch.
     */
    orderBy?: KifizetesekOrderByWithRelationInput | KifizetesekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kifizeteseks.
     */
    cursor?: KifizetesekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kifizeteseks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kifizeteseks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kifizeteseks.
     */
    distinct?: KifizetesekScalarFieldEnum | KifizetesekScalarFieldEnum[]
  }

  /**
   * Kifizetesek findMany
   */
  export type KifizetesekFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kifizetesek
     */
    select?: KifizetesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KifizetesekInclude<ExtArgs> | null
    /**
     * Filter, which Kifizeteseks to fetch.
     */
    where?: KifizetesekWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kifizeteseks to fetch.
     */
    orderBy?: KifizetesekOrderByWithRelationInput | KifizetesekOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kifizeteseks.
     */
    cursor?: KifizetesekWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kifizeteseks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kifizeteseks.
     */
    skip?: number
    distinct?: KifizetesekScalarFieldEnum | KifizetesekScalarFieldEnum[]
  }

  /**
   * Kifizetesek create
   */
  export type KifizetesekCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kifizetesek
     */
    select?: KifizetesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KifizetesekInclude<ExtArgs> | null
    /**
     * The data needed to create a Kifizetesek.
     */
    data: XOR<KifizetesekCreateInput, KifizetesekUncheckedCreateInput>
  }

  /**
   * Kifizetesek createMany
   */
  export type KifizetesekCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kifizeteseks.
     */
    data: KifizetesekCreateManyInput | KifizetesekCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Kifizetesek update
   */
  export type KifizetesekUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kifizetesek
     */
    select?: KifizetesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KifizetesekInclude<ExtArgs> | null
    /**
     * The data needed to update a Kifizetesek.
     */
    data: XOR<KifizetesekUpdateInput, KifizetesekUncheckedUpdateInput>
    /**
     * Choose, which Kifizetesek to update.
     */
    where: KifizetesekWhereUniqueInput
  }

  /**
   * Kifizetesek updateMany
   */
  export type KifizetesekUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kifizeteseks.
     */
    data: XOR<KifizetesekUpdateManyMutationInput, KifizetesekUncheckedUpdateManyInput>
    /**
     * Filter which Kifizeteseks to update
     */
    where?: KifizetesekWhereInput
  }

  /**
   * Kifizetesek upsert
   */
  export type KifizetesekUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kifizetesek
     */
    select?: KifizetesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KifizetesekInclude<ExtArgs> | null
    /**
     * The filter to search for the Kifizetesek to update in case it exists.
     */
    where: KifizetesekWhereUniqueInput
    /**
     * In case the Kifizetesek found by the `where` argument doesn't exist, create a new Kifizetesek with this data.
     */
    create: XOR<KifizetesekCreateInput, KifizetesekUncheckedCreateInput>
    /**
     * In case the Kifizetesek was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KifizetesekUpdateInput, KifizetesekUncheckedUpdateInput>
  }

  /**
   * Kifizetesek delete
   */
  export type KifizetesekDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kifizetesek
     */
    select?: KifizetesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KifizetesekInclude<ExtArgs> | null
    /**
     * Filter which Kifizetesek to delete.
     */
    where: KifizetesekWhereUniqueInput
  }

  /**
   * Kifizetesek deleteMany
   */
  export type KifizetesekDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kifizeteseks to delete
     */
    where?: KifizetesekWhereInput
  }

  /**
   * Kifizetesek without action
   */
  export type KifizetesekDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kifizetesek
     */
    select?: KifizetesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KifizetesekInclude<ExtArgs> | null
  }


  /**
   * Model Orak
   */

  export type AggregateOrak = {
    _count: OrakCountAggregateOutputType | null
    _avg: OrakAvgAggregateOutputType | null
    _sum: OrakSumAggregateOutputType | null
    _min: OrakMinAggregateOutputType | null
    _max: OrakMaxAggregateOutputType | null
  }

  export type OrakAvgAggregateOutputType = {
    ora_id: number | null
  }

  export type OrakSumAggregateOutputType = {
    ora_id: number | null
  }

  export type OrakMinAggregateOutputType = {
    ora_id: number | null
    idopont_eleje: Date | null
    idopont_vege: Date | null
    cim: string | null
    helyszin: string | null
  }

  export type OrakMaxAggregateOutputType = {
    ora_id: number | null
    idopont_eleje: Date | null
    idopont_vege: Date | null
    cim: string | null
    helyszin: string | null
  }

  export type OrakCountAggregateOutputType = {
    ora_id: number
    idopont_eleje: number
    idopont_vege: number
    cim: number
    helyszin: number
    _all: number
  }


  export type OrakAvgAggregateInputType = {
    ora_id?: true
  }

  export type OrakSumAggregateInputType = {
    ora_id?: true
  }

  export type OrakMinAggregateInputType = {
    ora_id?: true
    idopont_eleje?: true
    idopont_vege?: true
    cim?: true
    helyszin?: true
  }

  export type OrakMaxAggregateInputType = {
    ora_id?: true
    idopont_eleje?: true
    idopont_vege?: true
    cim?: true
    helyszin?: true
  }

  export type OrakCountAggregateInputType = {
    ora_id?: true
    idopont_eleje?: true
    idopont_vege?: true
    cim?: true
    helyszin?: true
    _all?: true
  }

  export type OrakAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orak to aggregate.
     */
    where?: OrakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Oraks to fetch.
     */
    orderBy?: OrakOrderByWithRelationInput | OrakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Oraks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Oraks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Oraks
    **/
    _count?: true | OrakCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrakAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrakSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrakMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrakMaxAggregateInputType
  }

  export type GetOrakAggregateType<T extends OrakAggregateArgs> = {
        [P in keyof T & keyof AggregateOrak]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrak[P]>
      : GetScalarType<T[P], AggregateOrak[P]>
  }




  export type OrakGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrakWhereInput
    orderBy?: OrakOrderByWithAggregationInput | OrakOrderByWithAggregationInput[]
    by: OrakScalarFieldEnum[] | OrakScalarFieldEnum
    having?: OrakScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrakCountAggregateInputType | true
    _avg?: OrakAvgAggregateInputType
    _sum?: OrakSumAggregateInputType
    _min?: OrakMinAggregateInputType
    _max?: OrakMaxAggregateInputType
  }

  export type OrakGroupByOutputType = {
    ora_id: number
    idopont_eleje: Date
    idopont_vege: Date
    cim: string | null
    helyszin: string | null
    _count: OrakCountAggregateOutputType | null
    _avg: OrakAvgAggregateOutputType | null
    _sum: OrakSumAggregateOutputType | null
    _min: OrakMinAggregateOutputType | null
    _max: OrakMaxAggregateOutputType | null
  }

  type GetOrakGroupByPayload<T extends OrakGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrakGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrakGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrakGroupByOutputType[P]>
            : GetScalarType<T[P], OrakGroupByOutputType[P]>
        }
      >
    >


  export type OrakSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ora_id?: boolean
    idopont_eleje?: boolean
    idopont_vege?: boolean
    cim?: boolean
    helyszin?: boolean
    Orarend?: boolean | Orak$OrarendArgs<ExtArgs>
    _count?: boolean | OrakCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orak"]>


  export type OrakSelectScalar = {
    ora_id?: boolean
    idopont_eleje?: boolean
    idopont_vege?: boolean
    cim?: boolean
    helyszin?: boolean
  }

  export type OrakInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Orarend?: boolean | Orak$OrarendArgs<ExtArgs>
    _count?: boolean | OrakCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OrakPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Orak"
    objects: {
      Orarend: Prisma.$OrarendPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ora_id: number
      idopont_eleje: Date
      idopont_vege: Date
      cim: string | null
      helyszin: string | null
    }, ExtArgs["result"]["orak"]>
    composites: {}
  }

  type OrakGetPayload<S extends boolean | null | undefined | OrakDefaultArgs> = $Result.GetResult<Prisma.$OrakPayload, S>

  type OrakCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrakFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrakCountAggregateInputType | true
    }

  export interface OrakDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Orak'], meta: { name: 'Orak' } }
    /**
     * Find zero or one Orak that matches the filter.
     * @param {OrakFindUniqueArgs} args - Arguments to find a Orak
     * @example
     * // Get one Orak
     * const orak = await prisma.orak.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrakFindUniqueArgs>(args: SelectSubset<T, OrakFindUniqueArgs<ExtArgs>>): Prisma__OrakClient<$Result.GetResult<Prisma.$OrakPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Orak that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrakFindUniqueOrThrowArgs} args - Arguments to find a Orak
     * @example
     * // Get one Orak
     * const orak = await prisma.orak.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrakFindUniqueOrThrowArgs>(args: SelectSubset<T, OrakFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrakClient<$Result.GetResult<Prisma.$OrakPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Orak that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrakFindFirstArgs} args - Arguments to find a Orak
     * @example
     * // Get one Orak
     * const orak = await prisma.orak.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrakFindFirstArgs>(args?: SelectSubset<T, OrakFindFirstArgs<ExtArgs>>): Prisma__OrakClient<$Result.GetResult<Prisma.$OrakPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Orak that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrakFindFirstOrThrowArgs} args - Arguments to find a Orak
     * @example
     * // Get one Orak
     * const orak = await prisma.orak.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrakFindFirstOrThrowArgs>(args?: SelectSubset<T, OrakFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrakClient<$Result.GetResult<Prisma.$OrakPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Oraks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrakFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Oraks
     * const oraks = await prisma.orak.findMany()
     * 
     * // Get first 10 Oraks
     * const oraks = await prisma.orak.findMany({ take: 10 })
     * 
     * // Only select the `ora_id`
     * const orakWithOra_idOnly = await prisma.orak.findMany({ select: { ora_id: true } })
     * 
     */
    findMany<T extends OrakFindManyArgs>(args?: SelectSubset<T, OrakFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrakPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Orak.
     * @param {OrakCreateArgs} args - Arguments to create a Orak.
     * @example
     * // Create one Orak
     * const Orak = await prisma.orak.create({
     *   data: {
     *     // ... data to create a Orak
     *   }
     * })
     * 
     */
    create<T extends OrakCreateArgs>(args: SelectSubset<T, OrakCreateArgs<ExtArgs>>): Prisma__OrakClient<$Result.GetResult<Prisma.$OrakPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Oraks.
     * @param {OrakCreateManyArgs} args - Arguments to create many Oraks.
     * @example
     * // Create many Oraks
     * const orak = await prisma.orak.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrakCreateManyArgs>(args?: SelectSubset<T, OrakCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orak.
     * @param {OrakDeleteArgs} args - Arguments to delete one Orak.
     * @example
     * // Delete one Orak
     * const Orak = await prisma.orak.delete({
     *   where: {
     *     // ... filter to delete one Orak
     *   }
     * })
     * 
     */
    delete<T extends OrakDeleteArgs>(args: SelectSubset<T, OrakDeleteArgs<ExtArgs>>): Prisma__OrakClient<$Result.GetResult<Prisma.$OrakPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Orak.
     * @param {OrakUpdateArgs} args - Arguments to update one Orak.
     * @example
     * // Update one Orak
     * const orak = await prisma.orak.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrakUpdateArgs>(args: SelectSubset<T, OrakUpdateArgs<ExtArgs>>): Prisma__OrakClient<$Result.GetResult<Prisma.$OrakPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Oraks.
     * @param {OrakDeleteManyArgs} args - Arguments to filter Oraks to delete.
     * @example
     * // Delete a few Oraks
     * const { count } = await prisma.orak.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrakDeleteManyArgs>(args?: SelectSubset<T, OrakDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Oraks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrakUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Oraks
     * const orak = await prisma.orak.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrakUpdateManyArgs>(args: SelectSubset<T, OrakUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orak.
     * @param {OrakUpsertArgs} args - Arguments to update or create a Orak.
     * @example
     * // Update or create a Orak
     * const orak = await prisma.orak.upsert({
     *   create: {
     *     // ... data to create a Orak
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orak we want to update
     *   }
     * })
     */
    upsert<T extends OrakUpsertArgs>(args: SelectSubset<T, OrakUpsertArgs<ExtArgs>>): Prisma__OrakClient<$Result.GetResult<Prisma.$OrakPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Oraks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrakCountArgs} args - Arguments to filter Oraks to count.
     * @example
     * // Count the number of Oraks
     * const count = await prisma.orak.count({
     *   where: {
     *     // ... the filter for the Oraks we want to count
     *   }
     * })
    **/
    count<T extends OrakCountArgs>(
      args?: Subset<T, OrakCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrakCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orak.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrakAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrakAggregateArgs>(args: Subset<T, OrakAggregateArgs>): Prisma.PrismaPromise<GetOrakAggregateType<T>>

    /**
     * Group by Orak.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrakGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrakGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrakGroupByArgs['orderBy'] }
        : { orderBy?: OrakGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrakGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrakGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Orak model
   */
  readonly fields: OrakFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Orak.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrakClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Orarend<T extends Orak$OrarendArgs<ExtArgs> = {}>(args?: Subset<T, Orak$OrarendArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrarendPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Orak model
   */ 
  interface OrakFieldRefs {
    readonly ora_id: FieldRef<"Orak", 'Int'>
    readonly idopont_eleje: FieldRef<"Orak", 'DateTime'>
    readonly idopont_vege: FieldRef<"Orak", 'DateTime'>
    readonly cim: FieldRef<"Orak", 'String'>
    readonly helyszin: FieldRef<"Orak", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Orak findUnique
   */
  export type OrakFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orak
     */
    select?: OrakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrakInclude<ExtArgs> | null
    /**
     * Filter, which Orak to fetch.
     */
    where: OrakWhereUniqueInput
  }

  /**
   * Orak findUniqueOrThrow
   */
  export type OrakFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orak
     */
    select?: OrakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrakInclude<ExtArgs> | null
    /**
     * Filter, which Orak to fetch.
     */
    where: OrakWhereUniqueInput
  }

  /**
   * Orak findFirst
   */
  export type OrakFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orak
     */
    select?: OrakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrakInclude<ExtArgs> | null
    /**
     * Filter, which Orak to fetch.
     */
    where?: OrakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Oraks to fetch.
     */
    orderBy?: OrakOrderByWithRelationInput | OrakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Oraks.
     */
    cursor?: OrakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Oraks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Oraks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Oraks.
     */
    distinct?: OrakScalarFieldEnum | OrakScalarFieldEnum[]
  }

  /**
   * Orak findFirstOrThrow
   */
  export type OrakFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orak
     */
    select?: OrakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrakInclude<ExtArgs> | null
    /**
     * Filter, which Orak to fetch.
     */
    where?: OrakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Oraks to fetch.
     */
    orderBy?: OrakOrderByWithRelationInput | OrakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Oraks.
     */
    cursor?: OrakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Oraks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Oraks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Oraks.
     */
    distinct?: OrakScalarFieldEnum | OrakScalarFieldEnum[]
  }

  /**
   * Orak findMany
   */
  export type OrakFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orak
     */
    select?: OrakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrakInclude<ExtArgs> | null
    /**
     * Filter, which Oraks to fetch.
     */
    where?: OrakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Oraks to fetch.
     */
    orderBy?: OrakOrderByWithRelationInput | OrakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Oraks.
     */
    cursor?: OrakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Oraks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Oraks.
     */
    skip?: number
    distinct?: OrakScalarFieldEnum | OrakScalarFieldEnum[]
  }

  /**
   * Orak create
   */
  export type OrakCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orak
     */
    select?: OrakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrakInclude<ExtArgs> | null
    /**
     * The data needed to create a Orak.
     */
    data: XOR<OrakCreateInput, OrakUncheckedCreateInput>
  }

  /**
   * Orak createMany
   */
  export type OrakCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Oraks.
     */
    data: OrakCreateManyInput | OrakCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Orak update
   */
  export type OrakUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orak
     */
    select?: OrakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrakInclude<ExtArgs> | null
    /**
     * The data needed to update a Orak.
     */
    data: XOR<OrakUpdateInput, OrakUncheckedUpdateInput>
    /**
     * Choose, which Orak to update.
     */
    where: OrakWhereUniqueInput
  }

  /**
   * Orak updateMany
   */
  export type OrakUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Oraks.
     */
    data: XOR<OrakUpdateManyMutationInput, OrakUncheckedUpdateManyInput>
    /**
     * Filter which Oraks to update
     */
    where?: OrakWhereInput
  }

  /**
   * Orak upsert
   */
  export type OrakUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orak
     */
    select?: OrakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrakInclude<ExtArgs> | null
    /**
     * The filter to search for the Orak to update in case it exists.
     */
    where: OrakWhereUniqueInput
    /**
     * In case the Orak found by the `where` argument doesn't exist, create a new Orak with this data.
     */
    create: XOR<OrakCreateInput, OrakUncheckedCreateInput>
    /**
     * In case the Orak was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrakUpdateInput, OrakUncheckedUpdateInput>
  }

  /**
   * Orak delete
   */
  export type OrakDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orak
     */
    select?: OrakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrakInclude<ExtArgs> | null
    /**
     * Filter which Orak to delete.
     */
    where: OrakWhereUniqueInput
  }

  /**
   * Orak deleteMany
   */
  export type OrakDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Oraks to delete
     */
    where?: OrakWhereInput
  }

  /**
   * Orak.Orarend
   */
  export type Orak$OrarendArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orarend
     */
    select?: OrarendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrarendInclude<ExtArgs> | null
    where?: OrarendWhereInput
    orderBy?: OrarendOrderByWithRelationInput | OrarendOrderByWithRelationInput[]
    cursor?: OrarendWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrarendScalarFieldEnum | OrarendScalarFieldEnum[]
  }

  /**
   * Orak without action
   */
  export type OrakDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orak
     */
    select?: OrakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrakInclude<ExtArgs> | null
  }


  /**
   * Model Orarend
   */

  export type AggregateOrarend = {
    _count: OrarendCountAggregateOutputType | null
    _avg: OrarendAvgAggregateOutputType | null
    _sum: OrarendSumAggregateOutputType | null
    _min: OrarendMinAggregateOutputType | null
    _max: OrarendMaxAggregateOutputType | null
  }

  export type OrarendAvgAggregateOutputType = {
    orarend_id: number | null
    ora_id: number | null
    felhasznalo_id: number | null
  }

  export type OrarendSumAggregateOutputType = {
    orarend_id: number | null
    ora_id: number | null
    felhasznalo_id: number | null
  }

  export type OrarendMinAggregateOutputType = {
    orarend_id: number | null
    ora_id: number | null
    felhasznalo_id: number | null
  }

  export type OrarendMaxAggregateOutputType = {
    orarend_id: number | null
    ora_id: number | null
    felhasznalo_id: number | null
  }

  export type OrarendCountAggregateOutputType = {
    orarend_id: number
    ora_id: number
    felhasznalo_id: number
    _all: number
  }


  export type OrarendAvgAggregateInputType = {
    orarend_id?: true
    ora_id?: true
    felhasznalo_id?: true
  }

  export type OrarendSumAggregateInputType = {
    orarend_id?: true
    ora_id?: true
    felhasznalo_id?: true
  }

  export type OrarendMinAggregateInputType = {
    orarend_id?: true
    ora_id?: true
    felhasznalo_id?: true
  }

  export type OrarendMaxAggregateInputType = {
    orarend_id?: true
    ora_id?: true
    felhasznalo_id?: true
  }

  export type OrarendCountAggregateInputType = {
    orarend_id?: true
    ora_id?: true
    felhasznalo_id?: true
    _all?: true
  }

  export type OrarendAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orarend to aggregate.
     */
    where?: OrarendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orarends to fetch.
     */
    orderBy?: OrarendOrderByWithRelationInput | OrarendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrarendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orarends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orarends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orarends
    **/
    _count?: true | OrarendCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrarendAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrarendSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrarendMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrarendMaxAggregateInputType
  }

  export type GetOrarendAggregateType<T extends OrarendAggregateArgs> = {
        [P in keyof T & keyof AggregateOrarend]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrarend[P]>
      : GetScalarType<T[P], AggregateOrarend[P]>
  }




  export type OrarendGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrarendWhereInput
    orderBy?: OrarendOrderByWithAggregationInput | OrarendOrderByWithAggregationInput[]
    by: OrarendScalarFieldEnum[] | OrarendScalarFieldEnum
    having?: OrarendScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrarendCountAggregateInputType | true
    _avg?: OrarendAvgAggregateInputType
    _sum?: OrarendSumAggregateInputType
    _min?: OrarendMinAggregateInputType
    _max?: OrarendMaxAggregateInputType
  }

  export type OrarendGroupByOutputType = {
    orarend_id: number
    ora_id: number
    felhasznalo_id: number
    _count: OrarendCountAggregateOutputType | null
    _avg: OrarendAvgAggregateOutputType | null
    _sum: OrarendSumAggregateOutputType | null
    _min: OrarendMinAggregateOutputType | null
    _max: OrarendMaxAggregateOutputType | null
  }

  type GetOrarendGroupByPayload<T extends OrarendGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrarendGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrarendGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrarendGroupByOutputType[P]>
            : GetScalarType<T[P], OrarendGroupByOutputType[P]>
        }
      >
    >


  export type OrarendSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    orarend_id?: boolean
    ora_id?: boolean
    felhasznalo_id?: boolean
    Felhasznalok?: boolean | FelhasznalokDefaultArgs<ExtArgs>
    Orak?: boolean | OrakDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orarend"]>


  export type OrarendSelectScalar = {
    orarend_id?: boolean
    ora_id?: boolean
    felhasznalo_id?: boolean
  }

  export type OrarendInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Felhasznalok?: boolean | FelhasznalokDefaultArgs<ExtArgs>
    Orak?: boolean | OrakDefaultArgs<ExtArgs>
  }

  export type $OrarendPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Orarend"
    objects: {
      Felhasznalok: Prisma.$FelhasznalokPayload<ExtArgs>
      Orak: Prisma.$OrakPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      orarend_id: number
      ora_id: number
      felhasznalo_id: number
    }, ExtArgs["result"]["orarend"]>
    composites: {}
  }

  type OrarendGetPayload<S extends boolean | null | undefined | OrarendDefaultArgs> = $Result.GetResult<Prisma.$OrarendPayload, S>

  type OrarendCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrarendFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrarendCountAggregateInputType | true
    }

  export interface OrarendDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Orarend'], meta: { name: 'Orarend' } }
    /**
     * Find zero or one Orarend that matches the filter.
     * @param {OrarendFindUniqueArgs} args - Arguments to find a Orarend
     * @example
     * // Get one Orarend
     * const orarend = await prisma.orarend.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrarendFindUniqueArgs>(args: SelectSubset<T, OrarendFindUniqueArgs<ExtArgs>>): Prisma__OrarendClient<$Result.GetResult<Prisma.$OrarendPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Orarend that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrarendFindUniqueOrThrowArgs} args - Arguments to find a Orarend
     * @example
     * // Get one Orarend
     * const orarend = await prisma.orarend.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrarendFindUniqueOrThrowArgs>(args: SelectSubset<T, OrarendFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrarendClient<$Result.GetResult<Prisma.$OrarendPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Orarend that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrarendFindFirstArgs} args - Arguments to find a Orarend
     * @example
     * // Get one Orarend
     * const orarend = await prisma.orarend.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrarendFindFirstArgs>(args?: SelectSubset<T, OrarendFindFirstArgs<ExtArgs>>): Prisma__OrarendClient<$Result.GetResult<Prisma.$OrarendPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Orarend that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrarendFindFirstOrThrowArgs} args - Arguments to find a Orarend
     * @example
     * // Get one Orarend
     * const orarend = await prisma.orarend.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrarendFindFirstOrThrowArgs>(args?: SelectSubset<T, OrarendFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrarendClient<$Result.GetResult<Prisma.$OrarendPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orarends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrarendFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orarends
     * const orarends = await prisma.orarend.findMany()
     * 
     * // Get first 10 Orarends
     * const orarends = await prisma.orarend.findMany({ take: 10 })
     * 
     * // Only select the `orarend_id`
     * const orarendWithOrarend_idOnly = await prisma.orarend.findMany({ select: { orarend_id: true } })
     * 
     */
    findMany<T extends OrarendFindManyArgs>(args?: SelectSubset<T, OrarendFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrarendPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Orarend.
     * @param {OrarendCreateArgs} args - Arguments to create a Orarend.
     * @example
     * // Create one Orarend
     * const Orarend = await prisma.orarend.create({
     *   data: {
     *     // ... data to create a Orarend
     *   }
     * })
     * 
     */
    create<T extends OrarendCreateArgs>(args: SelectSubset<T, OrarendCreateArgs<ExtArgs>>): Prisma__OrarendClient<$Result.GetResult<Prisma.$OrarendPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orarends.
     * @param {OrarendCreateManyArgs} args - Arguments to create many Orarends.
     * @example
     * // Create many Orarends
     * const orarend = await prisma.orarend.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrarendCreateManyArgs>(args?: SelectSubset<T, OrarendCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orarend.
     * @param {OrarendDeleteArgs} args - Arguments to delete one Orarend.
     * @example
     * // Delete one Orarend
     * const Orarend = await prisma.orarend.delete({
     *   where: {
     *     // ... filter to delete one Orarend
     *   }
     * })
     * 
     */
    delete<T extends OrarendDeleteArgs>(args: SelectSubset<T, OrarendDeleteArgs<ExtArgs>>): Prisma__OrarendClient<$Result.GetResult<Prisma.$OrarendPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Orarend.
     * @param {OrarendUpdateArgs} args - Arguments to update one Orarend.
     * @example
     * // Update one Orarend
     * const orarend = await prisma.orarend.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrarendUpdateArgs>(args: SelectSubset<T, OrarendUpdateArgs<ExtArgs>>): Prisma__OrarendClient<$Result.GetResult<Prisma.$OrarendPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orarends.
     * @param {OrarendDeleteManyArgs} args - Arguments to filter Orarends to delete.
     * @example
     * // Delete a few Orarends
     * const { count } = await prisma.orarend.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrarendDeleteManyArgs>(args?: SelectSubset<T, OrarendDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orarends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrarendUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orarends
     * const orarend = await prisma.orarend.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrarendUpdateManyArgs>(args: SelectSubset<T, OrarendUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orarend.
     * @param {OrarendUpsertArgs} args - Arguments to update or create a Orarend.
     * @example
     * // Update or create a Orarend
     * const orarend = await prisma.orarend.upsert({
     *   create: {
     *     // ... data to create a Orarend
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orarend we want to update
     *   }
     * })
     */
    upsert<T extends OrarendUpsertArgs>(args: SelectSubset<T, OrarendUpsertArgs<ExtArgs>>): Prisma__OrarendClient<$Result.GetResult<Prisma.$OrarendPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orarends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrarendCountArgs} args - Arguments to filter Orarends to count.
     * @example
     * // Count the number of Orarends
     * const count = await prisma.orarend.count({
     *   where: {
     *     // ... the filter for the Orarends we want to count
     *   }
     * })
    **/
    count<T extends OrarendCountArgs>(
      args?: Subset<T, OrarendCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrarendCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orarend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrarendAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrarendAggregateArgs>(args: Subset<T, OrarendAggregateArgs>): Prisma.PrismaPromise<GetOrarendAggregateType<T>>

    /**
     * Group by Orarend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrarendGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrarendGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrarendGroupByArgs['orderBy'] }
        : { orderBy?: OrarendGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrarendGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrarendGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Orarend model
   */
  readonly fields: OrarendFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Orarend.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrarendClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Felhasznalok<T extends FelhasznalokDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FelhasznalokDefaultArgs<ExtArgs>>): Prisma__FelhasznalokClient<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Orak<T extends OrakDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrakDefaultArgs<ExtArgs>>): Prisma__OrakClient<$Result.GetResult<Prisma.$OrakPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Orarend model
   */ 
  interface OrarendFieldRefs {
    readonly orarend_id: FieldRef<"Orarend", 'Int'>
    readonly ora_id: FieldRef<"Orarend", 'Int'>
    readonly felhasznalo_id: FieldRef<"Orarend", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Orarend findUnique
   */
  export type OrarendFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orarend
     */
    select?: OrarendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrarendInclude<ExtArgs> | null
    /**
     * Filter, which Orarend to fetch.
     */
    where: OrarendWhereUniqueInput
  }

  /**
   * Orarend findUniqueOrThrow
   */
  export type OrarendFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orarend
     */
    select?: OrarendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrarendInclude<ExtArgs> | null
    /**
     * Filter, which Orarend to fetch.
     */
    where: OrarendWhereUniqueInput
  }

  /**
   * Orarend findFirst
   */
  export type OrarendFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orarend
     */
    select?: OrarendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrarendInclude<ExtArgs> | null
    /**
     * Filter, which Orarend to fetch.
     */
    where?: OrarendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orarends to fetch.
     */
    orderBy?: OrarendOrderByWithRelationInput | OrarendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orarends.
     */
    cursor?: OrarendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orarends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orarends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orarends.
     */
    distinct?: OrarendScalarFieldEnum | OrarendScalarFieldEnum[]
  }

  /**
   * Orarend findFirstOrThrow
   */
  export type OrarendFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orarend
     */
    select?: OrarendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrarendInclude<ExtArgs> | null
    /**
     * Filter, which Orarend to fetch.
     */
    where?: OrarendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orarends to fetch.
     */
    orderBy?: OrarendOrderByWithRelationInput | OrarendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orarends.
     */
    cursor?: OrarendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orarends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orarends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orarends.
     */
    distinct?: OrarendScalarFieldEnum | OrarendScalarFieldEnum[]
  }

  /**
   * Orarend findMany
   */
  export type OrarendFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orarend
     */
    select?: OrarendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrarendInclude<ExtArgs> | null
    /**
     * Filter, which Orarends to fetch.
     */
    where?: OrarendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orarends to fetch.
     */
    orderBy?: OrarendOrderByWithRelationInput | OrarendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orarends.
     */
    cursor?: OrarendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orarends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orarends.
     */
    skip?: number
    distinct?: OrarendScalarFieldEnum | OrarendScalarFieldEnum[]
  }

  /**
   * Orarend create
   */
  export type OrarendCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orarend
     */
    select?: OrarendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrarendInclude<ExtArgs> | null
    /**
     * The data needed to create a Orarend.
     */
    data: XOR<OrarendCreateInput, OrarendUncheckedCreateInput>
  }

  /**
   * Orarend createMany
   */
  export type OrarendCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orarends.
     */
    data: OrarendCreateManyInput | OrarendCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Orarend update
   */
  export type OrarendUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orarend
     */
    select?: OrarendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrarendInclude<ExtArgs> | null
    /**
     * The data needed to update a Orarend.
     */
    data: XOR<OrarendUpdateInput, OrarendUncheckedUpdateInput>
    /**
     * Choose, which Orarend to update.
     */
    where: OrarendWhereUniqueInput
  }

  /**
   * Orarend updateMany
   */
  export type OrarendUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orarends.
     */
    data: XOR<OrarendUpdateManyMutationInput, OrarendUncheckedUpdateManyInput>
    /**
     * Filter which Orarends to update
     */
    where?: OrarendWhereInput
  }

  /**
   * Orarend upsert
   */
  export type OrarendUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orarend
     */
    select?: OrarendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrarendInclude<ExtArgs> | null
    /**
     * The filter to search for the Orarend to update in case it exists.
     */
    where: OrarendWhereUniqueInput
    /**
     * In case the Orarend found by the `where` argument doesn't exist, create a new Orarend with this data.
     */
    create: XOR<OrarendCreateInput, OrarendUncheckedCreateInput>
    /**
     * In case the Orarend was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrarendUpdateInput, OrarendUncheckedUpdateInput>
  }

  /**
   * Orarend delete
   */
  export type OrarendDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orarend
     */
    select?: OrarendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrarendInclude<ExtArgs> | null
    /**
     * Filter which Orarend to delete.
     */
    where: OrarendWhereUniqueInput
  }

  /**
   * Orarend deleteMany
   */
  export type OrarendDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orarends to delete
     */
    where?: OrarendWhereInput
  }

  /**
   * Orarend without action
   */
  export type OrarendDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Orarend
     */
    select?: OrarendSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrarendInclude<ExtArgs> | null
  }


  /**
   * Model TanuloElorehaladas
   */

  export type AggregateTanuloElorehaladas = {
    _count: TanuloElorehaladasCountAggregateOutputType | null
    _avg: TanuloElorehaladasAvgAggregateOutputType | null
    _sum: TanuloElorehaladasSumAggregateOutputType | null
    _min: TanuloElorehaladasMinAggregateOutputType | null
    _max: TanuloElorehaladasMaxAggregateOutputType | null
  }

  export type TanuloElorehaladasAvgAggregateOutputType = {
    elorehaladas_id: number | null
    tanulo_id: number | null
    oktato_id: number | null
    levezetett_orak: number | null
  }

  export type TanuloElorehaladasSumAggregateOutputType = {
    elorehaladas_id: number | null
    tanulo_id: number | null
    oktato_id: number | null
    levezetett_orak: number | null
  }

  export type TanuloElorehaladasMinAggregateOutputType = {
    elorehaladas_id: number | null
    tanulo_id: number | null
    oktato_id: number | null
    levezetett_orak: number | null
  }

  export type TanuloElorehaladasMaxAggregateOutputType = {
    elorehaladas_id: number | null
    tanulo_id: number | null
    oktato_id: number | null
    levezetett_orak: number | null
  }

  export type TanuloElorehaladasCountAggregateOutputType = {
    elorehaladas_id: number
    tanulo_id: number
    oktato_id: number
    levezetett_orak: number
    _all: number
  }


  export type TanuloElorehaladasAvgAggregateInputType = {
    elorehaladas_id?: true
    tanulo_id?: true
    oktato_id?: true
    levezetett_orak?: true
  }

  export type TanuloElorehaladasSumAggregateInputType = {
    elorehaladas_id?: true
    tanulo_id?: true
    oktato_id?: true
    levezetett_orak?: true
  }

  export type TanuloElorehaladasMinAggregateInputType = {
    elorehaladas_id?: true
    tanulo_id?: true
    oktato_id?: true
    levezetett_orak?: true
  }

  export type TanuloElorehaladasMaxAggregateInputType = {
    elorehaladas_id?: true
    tanulo_id?: true
    oktato_id?: true
    levezetett_orak?: true
  }

  export type TanuloElorehaladasCountAggregateInputType = {
    elorehaladas_id?: true
    tanulo_id?: true
    oktato_id?: true
    levezetett_orak?: true
    _all?: true
  }

  export type TanuloElorehaladasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TanuloElorehaladas to aggregate.
     */
    where?: TanuloElorehaladasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TanuloElorehaladas to fetch.
     */
    orderBy?: TanuloElorehaladasOrderByWithRelationInput | TanuloElorehaladasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TanuloElorehaladasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TanuloElorehaladas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TanuloElorehaladas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TanuloElorehaladas
    **/
    _count?: true | TanuloElorehaladasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TanuloElorehaladasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TanuloElorehaladasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TanuloElorehaladasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TanuloElorehaladasMaxAggregateInputType
  }

  export type GetTanuloElorehaladasAggregateType<T extends TanuloElorehaladasAggregateArgs> = {
        [P in keyof T & keyof AggregateTanuloElorehaladas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTanuloElorehaladas[P]>
      : GetScalarType<T[P], AggregateTanuloElorehaladas[P]>
  }




  export type TanuloElorehaladasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TanuloElorehaladasWhereInput
    orderBy?: TanuloElorehaladasOrderByWithAggregationInput | TanuloElorehaladasOrderByWithAggregationInput[]
    by: TanuloElorehaladasScalarFieldEnum[] | TanuloElorehaladasScalarFieldEnum
    having?: TanuloElorehaladasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TanuloElorehaladasCountAggregateInputType | true
    _avg?: TanuloElorehaladasAvgAggregateInputType
    _sum?: TanuloElorehaladasSumAggregateInputType
    _min?: TanuloElorehaladasMinAggregateInputType
    _max?: TanuloElorehaladasMaxAggregateInputType
  }

  export type TanuloElorehaladasGroupByOutputType = {
    elorehaladas_id: number
    tanulo_id: number
    oktato_id: number
    levezetett_orak: number
    _count: TanuloElorehaladasCountAggregateOutputType | null
    _avg: TanuloElorehaladasAvgAggregateOutputType | null
    _sum: TanuloElorehaladasSumAggregateOutputType | null
    _min: TanuloElorehaladasMinAggregateOutputType | null
    _max: TanuloElorehaladasMaxAggregateOutputType | null
  }

  type GetTanuloElorehaladasGroupByPayload<T extends TanuloElorehaladasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TanuloElorehaladasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TanuloElorehaladasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TanuloElorehaladasGroupByOutputType[P]>
            : GetScalarType<T[P], TanuloElorehaladasGroupByOutputType[P]>
        }
      >
    >


  export type TanuloElorehaladasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    elorehaladas_id?: boolean
    tanulo_id?: boolean
    oktato_id?: boolean
    levezetett_orak?: boolean
    Kifizetesek?: boolean | TanuloElorehaladas$KifizetesekArgs<ExtArgs>
    FelhasznalokTanulo?: boolean | FelhasznalokDefaultArgs<ExtArgs>
    FelhasznalokOktato?: boolean | FelhasznalokDefaultArgs<ExtArgs>
    Vizsgajelentkezes?: boolean | TanuloElorehaladas$VizsgajelentkezesArgs<ExtArgs>
    _count?: boolean | TanuloElorehaladasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tanuloElorehaladas"]>


  export type TanuloElorehaladasSelectScalar = {
    elorehaladas_id?: boolean
    tanulo_id?: boolean
    oktato_id?: boolean
    levezetett_orak?: boolean
  }

  export type TanuloElorehaladasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Kifizetesek?: boolean | TanuloElorehaladas$KifizetesekArgs<ExtArgs>
    FelhasznalokTanulo?: boolean | FelhasznalokDefaultArgs<ExtArgs>
    FelhasznalokOktato?: boolean | FelhasznalokDefaultArgs<ExtArgs>
    Vizsgajelentkezes?: boolean | TanuloElorehaladas$VizsgajelentkezesArgs<ExtArgs>
    _count?: boolean | TanuloElorehaladasCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TanuloElorehaladasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TanuloElorehaladas"
    objects: {
      Kifizetesek: Prisma.$KifizetesekPayload<ExtArgs>[]
      FelhasznalokTanulo: Prisma.$FelhasznalokPayload<ExtArgs>
      FelhasznalokOktato: Prisma.$FelhasznalokPayload<ExtArgs>
      Vizsgajelentkezes: Prisma.$VizsgajelentkezesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      elorehaladas_id: number
      tanulo_id: number
      oktato_id: number
      levezetett_orak: number
    }, ExtArgs["result"]["tanuloElorehaladas"]>
    composites: {}
  }

  type TanuloElorehaladasGetPayload<S extends boolean | null | undefined | TanuloElorehaladasDefaultArgs> = $Result.GetResult<Prisma.$TanuloElorehaladasPayload, S>

  type TanuloElorehaladasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TanuloElorehaladasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TanuloElorehaladasCountAggregateInputType | true
    }

  export interface TanuloElorehaladasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TanuloElorehaladas'], meta: { name: 'TanuloElorehaladas' } }
    /**
     * Find zero or one TanuloElorehaladas that matches the filter.
     * @param {TanuloElorehaladasFindUniqueArgs} args - Arguments to find a TanuloElorehaladas
     * @example
     * // Get one TanuloElorehaladas
     * const tanuloElorehaladas = await prisma.tanuloElorehaladas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TanuloElorehaladasFindUniqueArgs>(args: SelectSubset<T, TanuloElorehaladasFindUniqueArgs<ExtArgs>>): Prisma__TanuloElorehaladasClient<$Result.GetResult<Prisma.$TanuloElorehaladasPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TanuloElorehaladas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TanuloElorehaladasFindUniqueOrThrowArgs} args - Arguments to find a TanuloElorehaladas
     * @example
     * // Get one TanuloElorehaladas
     * const tanuloElorehaladas = await prisma.tanuloElorehaladas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TanuloElorehaladasFindUniqueOrThrowArgs>(args: SelectSubset<T, TanuloElorehaladasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TanuloElorehaladasClient<$Result.GetResult<Prisma.$TanuloElorehaladasPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TanuloElorehaladas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TanuloElorehaladasFindFirstArgs} args - Arguments to find a TanuloElorehaladas
     * @example
     * // Get one TanuloElorehaladas
     * const tanuloElorehaladas = await prisma.tanuloElorehaladas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TanuloElorehaladasFindFirstArgs>(args?: SelectSubset<T, TanuloElorehaladasFindFirstArgs<ExtArgs>>): Prisma__TanuloElorehaladasClient<$Result.GetResult<Prisma.$TanuloElorehaladasPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TanuloElorehaladas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TanuloElorehaladasFindFirstOrThrowArgs} args - Arguments to find a TanuloElorehaladas
     * @example
     * // Get one TanuloElorehaladas
     * const tanuloElorehaladas = await prisma.tanuloElorehaladas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TanuloElorehaladasFindFirstOrThrowArgs>(args?: SelectSubset<T, TanuloElorehaladasFindFirstOrThrowArgs<ExtArgs>>): Prisma__TanuloElorehaladasClient<$Result.GetResult<Prisma.$TanuloElorehaladasPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TanuloElorehaladas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TanuloElorehaladasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TanuloElorehaladas
     * const tanuloElorehaladas = await prisma.tanuloElorehaladas.findMany()
     * 
     * // Get first 10 TanuloElorehaladas
     * const tanuloElorehaladas = await prisma.tanuloElorehaladas.findMany({ take: 10 })
     * 
     * // Only select the `elorehaladas_id`
     * const tanuloElorehaladasWithElorehaladas_idOnly = await prisma.tanuloElorehaladas.findMany({ select: { elorehaladas_id: true } })
     * 
     */
    findMany<T extends TanuloElorehaladasFindManyArgs>(args?: SelectSubset<T, TanuloElorehaladasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TanuloElorehaladasPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TanuloElorehaladas.
     * @param {TanuloElorehaladasCreateArgs} args - Arguments to create a TanuloElorehaladas.
     * @example
     * // Create one TanuloElorehaladas
     * const TanuloElorehaladas = await prisma.tanuloElorehaladas.create({
     *   data: {
     *     // ... data to create a TanuloElorehaladas
     *   }
     * })
     * 
     */
    create<T extends TanuloElorehaladasCreateArgs>(args: SelectSubset<T, TanuloElorehaladasCreateArgs<ExtArgs>>): Prisma__TanuloElorehaladasClient<$Result.GetResult<Prisma.$TanuloElorehaladasPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TanuloElorehaladas.
     * @param {TanuloElorehaladasCreateManyArgs} args - Arguments to create many TanuloElorehaladas.
     * @example
     * // Create many TanuloElorehaladas
     * const tanuloElorehaladas = await prisma.tanuloElorehaladas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TanuloElorehaladasCreateManyArgs>(args?: SelectSubset<T, TanuloElorehaladasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TanuloElorehaladas.
     * @param {TanuloElorehaladasDeleteArgs} args - Arguments to delete one TanuloElorehaladas.
     * @example
     * // Delete one TanuloElorehaladas
     * const TanuloElorehaladas = await prisma.tanuloElorehaladas.delete({
     *   where: {
     *     // ... filter to delete one TanuloElorehaladas
     *   }
     * })
     * 
     */
    delete<T extends TanuloElorehaladasDeleteArgs>(args: SelectSubset<T, TanuloElorehaladasDeleteArgs<ExtArgs>>): Prisma__TanuloElorehaladasClient<$Result.GetResult<Prisma.$TanuloElorehaladasPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TanuloElorehaladas.
     * @param {TanuloElorehaladasUpdateArgs} args - Arguments to update one TanuloElorehaladas.
     * @example
     * // Update one TanuloElorehaladas
     * const tanuloElorehaladas = await prisma.tanuloElorehaladas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TanuloElorehaladasUpdateArgs>(args: SelectSubset<T, TanuloElorehaladasUpdateArgs<ExtArgs>>): Prisma__TanuloElorehaladasClient<$Result.GetResult<Prisma.$TanuloElorehaladasPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TanuloElorehaladas.
     * @param {TanuloElorehaladasDeleteManyArgs} args - Arguments to filter TanuloElorehaladas to delete.
     * @example
     * // Delete a few TanuloElorehaladas
     * const { count } = await prisma.tanuloElorehaladas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TanuloElorehaladasDeleteManyArgs>(args?: SelectSubset<T, TanuloElorehaladasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TanuloElorehaladas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TanuloElorehaladasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TanuloElorehaladas
     * const tanuloElorehaladas = await prisma.tanuloElorehaladas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TanuloElorehaladasUpdateManyArgs>(args: SelectSubset<T, TanuloElorehaladasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TanuloElorehaladas.
     * @param {TanuloElorehaladasUpsertArgs} args - Arguments to update or create a TanuloElorehaladas.
     * @example
     * // Update or create a TanuloElorehaladas
     * const tanuloElorehaladas = await prisma.tanuloElorehaladas.upsert({
     *   create: {
     *     // ... data to create a TanuloElorehaladas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TanuloElorehaladas we want to update
     *   }
     * })
     */
    upsert<T extends TanuloElorehaladasUpsertArgs>(args: SelectSubset<T, TanuloElorehaladasUpsertArgs<ExtArgs>>): Prisma__TanuloElorehaladasClient<$Result.GetResult<Prisma.$TanuloElorehaladasPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TanuloElorehaladas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TanuloElorehaladasCountArgs} args - Arguments to filter TanuloElorehaladas to count.
     * @example
     * // Count the number of TanuloElorehaladas
     * const count = await prisma.tanuloElorehaladas.count({
     *   where: {
     *     // ... the filter for the TanuloElorehaladas we want to count
     *   }
     * })
    **/
    count<T extends TanuloElorehaladasCountArgs>(
      args?: Subset<T, TanuloElorehaladasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TanuloElorehaladasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TanuloElorehaladas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TanuloElorehaladasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TanuloElorehaladasAggregateArgs>(args: Subset<T, TanuloElorehaladasAggregateArgs>): Prisma.PrismaPromise<GetTanuloElorehaladasAggregateType<T>>

    /**
     * Group by TanuloElorehaladas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TanuloElorehaladasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TanuloElorehaladasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TanuloElorehaladasGroupByArgs['orderBy'] }
        : { orderBy?: TanuloElorehaladasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TanuloElorehaladasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTanuloElorehaladasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TanuloElorehaladas model
   */
  readonly fields: TanuloElorehaladasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TanuloElorehaladas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TanuloElorehaladasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Kifizetesek<T extends TanuloElorehaladas$KifizetesekArgs<ExtArgs> = {}>(args?: Subset<T, TanuloElorehaladas$KifizetesekArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KifizetesekPayload<ExtArgs>, T, "findMany"> | Null>
    FelhasznalokTanulo<T extends FelhasznalokDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FelhasznalokDefaultArgs<ExtArgs>>): Prisma__FelhasznalokClient<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    FelhasznalokOktato<T extends FelhasznalokDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FelhasznalokDefaultArgs<ExtArgs>>): Prisma__FelhasznalokClient<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Vizsgajelentkezes<T extends TanuloElorehaladas$VizsgajelentkezesArgs<ExtArgs> = {}>(args?: Subset<T, TanuloElorehaladas$VizsgajelentkezesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VizsgajelentkezesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TanuloElorehaladas model
   */ 
  interface TanuloElorehaladasFieldRefs {
    readonly elorehaladas_id: FieldRef<"TanuloElorehaladas", 'Int'>
    readonly tanulo_id: FieldRef<"TanuloElorehaladas", 'Int'>
    readonly oktato_id: FieldRef<"TanuloElorehaladas", 'Int'>
    readonly levezetett_orak: FieldRef<"TanuloElorehaladas", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TanuloElorehaladas findUnique
   */
  export type TanuloElorehaladasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TanuloElorehaladas
     */
    select?: TanuloElorehaladasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TanuloElorehaladasInclude<ExtArgs> | null
    /**
     * Filter, which TanuloElorehaladas to fetch.
     */
    where: TanuloElorehaladasWhereUniqueInput
  }

  /**
   * TanuloElorehaladas findUniqueOrThrow
   */
  export type TanuloElorehaladasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TanuloElorehaladas
     */
    select?: TanuloElorehaladasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TanuloElorehaladasInclude<ExtArgs> | null
    /**
     * Filter, which TanuloElorehaladas to fetch.
     */
    where: TanuloElorehaladasWhereUniqueInput
  }

  /**
   * TanuloElorehaladas findFirst
   */
  export type TanuloElorehaladasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TanuloElorehaladas
     */
    select?: TanuloElorehaladasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TanuloElorehaladasInclude<ExtArgs> | null
    /**
     * Filter, which TanuloElorehaladas to fetch.
     */
    where?: TanuloElorehaladasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TanuloElorehaladas to fetch.
     */
    orderBy?: TanuloElorehaladasOrderByWithRelationInput | TanuloElorehaladasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TanuloElorehaladas.
     */
    cursor?: TanuloElorehaladasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TanuloElorehaladas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TanuloElorehaladas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TanuloElorehaladas.
     */
    distinct?: TanuloElorehaladasScalarFieldEnum | TanuloElorehaladasScalarFieldEnum[]
  }

  /**
   * TanuloElorehaladas findFirstOrThrow
   */
  export type TanuloElorehaladasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TanuloElorehaladas
     */
    select?: TanuloElorehaladasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TanuloElorehaladasInclude<ExtArgs> | null
    /**
     * Filter, which TanuloElorehaladas to fetch.
     */
    where?: TanuloElorehaladasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TanuloElorehaladas to fetch.
     */
    orderBy?: TanuloElorehaladasOrderByWithRelationInput | TanuloElorehaladasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TanuloElorehaladas.
     */
    cursor?: TanuloElorehaladasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TanuloElorehaladas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TanuloElorehaladas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TanuloElorehaladas.
     */
    distinct?: TanuloElorehaladasScalarFieldEnum | TanuloElorehaladasScalarFieldEnum[]
  }

  /**
   * TanuloElorehaladas findMany
   */
  export type TanuloElorehaladasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TanuloElorehaladas
     */
    select?: TanuloElorehaladasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TanuloElorehaladasInclude<ExtArgs> | null
    /**
     * Filter, which TanuloElorehaladas to fetch.
     */
    where?: TanuloElorehaladasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TanuloElorehaladas to fetch.
     */
    orderBy?: TanuloElorehaladasOrderByWithRelationInput | TanuloElorehaladasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TanuloElorehaladas.
     */
    cursor?: TanuloElorehaladasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TanuloElorehaladas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TanuloElorehaladas.
     */
    skip?: number
    distinct?: TanuloElorehaladasScalarFieldEnum | TanuloElorehaladasScalarFieldEnum[]
  }

  /**
   * TanuloElorehaladas create
   */
  export type TanuloElorehaladasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TanuloElorehaladas
     */
    select?: TanuloElorehaladasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TanuloElorehaladasInclude<ExtArgs> | null
    /**
     * The data needed to create a TanuloElorehaladas.
     */
    data: XOR<TanuloElorehaladasCreateInput, TanuloElorehaladasUncheckedCreateInput>
  }

  /**
   * TanuloElorehaladas createMany
   */
  export type TanuloElorehaladasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TanuloElorehaladas.
     */
    data: TanuloElorehaladasCreateManyInput | TanuloElorehaladasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TanuloElorehaladas update
   */
  export type TanuloElorehaladasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TanuloElorehaladas
     */
    select?: TanuloElorehaladasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TanuloElorehaladasInclude<ExtArgs> | null
    /**
     * The data needed to update a TanuloElorehaladas.
     */
    data: XOR<TanuloElorehaladasUpdateInput, TanuloElorehaladasUncheckedUpdateInput>
    /**
     * Choose, which TanuloElorehaladas to update.
     */
    where: TanuloElorehaladasWhereUniqueInput
  }

  /**
   * TanuloElorehaladas updateMany
   */
  export type TanuloElorehaladasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TanuloElorehaladas.
     */
    data: XOR<TanuloElorehaladasUpdateManyMutationInput, TanuloElorehaladasUncheckedUpdateManyInput>
    /**
     * Filter which TanuloElorehaladas to update
     */
    where?: TanuloElorehaladasWhereInput
  }

  /**
   * TanuloElorehaladas upsert
   */
  export type TanuloElorehaladasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TanuloElorehaladas
     */
    select?: TanuloElorehaladasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TanuloElorehaladasInclude<ExtArgs> | null
    /**
     * The filter to search for the TanuloElorehaladas to update in case it exists.
     */
    where: TanuloElorehaladasWhereUniqueInput
    /**
     * In case the TanuloElorehaladas found by the `where` argument doesn't exist, create a new TanuloElorehaladas with this data.
     */
    create: XOR<TanuloElorehaladasCreateInput, TanuloElorehaladasUncheckedCreateInput>
    /**
     * In case the TanuloElorehaladas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TanuloElorehaladasUpdateInput, TanuloElorehaladasUncheckedUpdateInput>
  }

  /**
   * TanuloElorehaladas delete
   */
  export type TanuloElorehaladasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TanuloElorehaladas
     */
    select?: TanuloElorehaladasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TanuloElorehaladasInclude<ExtArgs> | null
    /**
     * Filter which TanuloElorehaladas to delete.
     */
    where: TanuloElorehaladasWhereUniqueInput
  }

  /**
   * TanuloElorehaladas deleteMany
   */
  export type TanuloElorehaladasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TanuloElorehaladas to delete
     */
    where?: TanuloElorehaladasWhereInput
  }

  /**
   * TanuloElorehaladas.Kifizetesek
   */
  export type TanuloElorehaladas$KifizetesekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kifizetesek
     */
    select?: KifizetesekSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KifizetesekInclude<ExtArgs> | null
    where?: KifizetesekWhereInput
    orderBy?: KifizetesekOrderByWithRelationInput | KifizetesekOrderByWithRelationInput[]
    cursor?: KifizetesekWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KifizetesekScalarFieldEnum | KifizetesekScalarFieldEnum[]
  }

  /**
   * TanuloElorehaladas.Vizsgajelentkezes
   */
  export type TanuloElorehaladas$VizsgajelentkezesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgajelentkezes
     */
    select?: VizsgajelentkezesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgajelentkezesInclude<ExtArgs> | null
    where?: VizsgajelentkezesWhereInput
    orderBy?: VizsgajelentkezesOrderByWithRelationInput | VizsgajelentkezesOrderByWithRelationInput[]
    cursor?: VizsgajelentkezesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VizsgajelentkezesScalarFieldEnum | VizsgajelentkezesScalarFieldEnum[]
  }

  /**
   * TanuloElorehaladas without action
   */
  export type TanuloElorehaladasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TanuloElorehaladas
     */
    select?: TanuloElorehaladasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TanuloElorehaladasInclude<ExtArgs> | null
  }


  /**
   * Model Vizsgajelentkezes
   */

  export type AggregateVizsgajelentkezes = {
    _count: VizsgajelentkezesCountAggregateOutputType | null
    _avg: VizsgajelentkezesAvgAggregateOutputType | null
    _sum: VizsgajelentkezesSumAggregateOutputType | null
    _min: VizsgajelentkezesMinAggregateOutputType | null
    _max: VizsgajelentkezesMaxAggregateOutputType | null
  }

  export type VizsgajelentkezesAvgAggregateOutputType = {
    vizsgajelentkezes_id: number | null
    tanulo_elorehaladas_id: number | null
    vizsga_id: number | null
  }

  export type VizsgajelentkezesSumAggregateOutputType = {
    vizsgajelentkezes_id: number | null
    tanulo_elorehaladas_id: number | null
    vizsga_id: number | null
  }

  export type VizsgajelentkezesMinAggregateOutputType = {
    vizsgajelentkezes_id: number | null
    tanulo_elorehaladas_id: number | null
    vizsga_id: number | null
    oktato_jovahagyas: boolean | null
  }

  export type VizsgajelentkezesMaxAggregateOutputType = {
    vizsgajelentkezes_id: number | null
    tanulo_elorehaladas_id: number | null
    vizsga_id: number | null
    oktato_jovahagyas: boolean | null
  }

  export type VizsgajelentkezesCountAggregateOutputType = {
    vizsgajelentkezes_id: number
    tanulo_elorehaladas_id: number
    vizsga_id: number
    oktato_jovahagyas: number
    _all: number
  }


  export type VizsgajelentkezesAvgAggregateInputType = {
    vizsgajelentkezes_id?: true
    tanulo_elorehaladas_id?: true
    vizsga_id?: true
  }

  export type VizsgajelentkezesSumAggregateInputType = {
    vizsgajelentkezes_id?: true
    tanulo_elorehaladas_id?: true
    vizsga_id?: true
  }

  export type VizsgajelentkezesMinAggregateInputType = {
    vizsgajelentkezes_id?: true
    tanulo_elorehaladas_id?: true
    vizsga_id?: true
    oktato_jovahagyas?: true
  }

  export type VizsgajelentkezesMaxAggregateInputType = {
    vizsgajelentkezes_id?: true
    tanulo_elorehaladas_id?: true
    vizsga_id?: true
    oktato_jovahagyas?: true
  }

  export type VizsgajelentkezesCountAggregateInputType = {
    vizsgajelentkezes_id?: true
    tanulo_elorehaladas_id?: true
    vizsga_id?: true
    oktato_jovahagyas?: true
    _all?: true
  }

  export type VizsgajelentkezesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vizsgajelentkezes to aggregate.
     */
    where?: VizsgajelentkezesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vizsgajelentkezes to fetch.
     */
    orderBy?: VizsgajelentkezesOrderByWithRelationInput | VizsgajelentkezesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VizsgajelentkezesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vizsgajelentkezes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vizsgajelentkezes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vizsgajelentkezes
    **/
    _count?: true | VizsgajelentkezesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VizsgajelentkezesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VizsgajelentkezesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VizsgajelentkezesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VizsgajelentkezesMaxAggregateInputType
  }

  export type GetVizsgajelentkezesAggregateType<T extends VizsgajelentkezesAggregateArgs> = {
        [P in keyof T & keyof AggregateVizsgajelentkezes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVizsgajelentkezes[P]>
      : GetScalarType<T[P], AggregateVizsgajelentkezes[P]>
  }




  export type VizsgajelentkezesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VizsgajelentkezesWhereInput
    orderBy?: VizsgajelentkezesOrderByWithAggregationInput | VizsgajelentkezesOrderByWithAggregationInput[]
    by: VizsgajelentkezesScalarFieldEnum[] | VizsgajelentkezesScalarFieldEnum
    having?: VizsgajelentkezesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VizsgajelentkezesCountAggregateInputType | true
    _avg?: VizsgajelentkezesAvgAggregateInputType
    _sum?: VizsgajelentkezesSumAggregateInputType
    _min?: VizsgajelentkezesMinAggregateInputType
    _max?: VizsgajelentkezesMaxAggregateInputType
  }

  export type VizsgajelentkezesGroupByOutputType = {
    vizsgajelentkezes_id: number
    tanulo_elorehaladas_id: number
    vizsga_id: number
    oktato_jovahagyas: boolean
    _count: VizsgajelentkezesCountAggregateOutputType | null
    _avg: VizsgajelentkezesAvgAggregateOutputType | null
    _sum: VizsgajelentkezesSumAggregateOutputType | null
    _min: VizsgajelentkezesMinAggregateOutputType | null
    _max: VizsgajelentkezesMaxAggregateOutputType | null
  }

  type GetVizsgajelentkezesGroupByPayload<T extends VizsgajelentkezesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VizsgajelentkezesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VizsgajelentkezesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VizsgajelentkezesGroupByOutputType[P]>
            : GetScalarType<T[P], VizsgajelentkezesGroupByOutputType[P]>
        }
      >
    >


  export type VizsgajelentkezesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    vizsgajelentkezes_id?: boolean
    tanulo_elorehaladas_id?: boolean
    vizsga_id?: boolean
    oktato_jovahagyas?: boolean
    TanuloElorehaladasV?: boolean | TanuloElorehaladasDefaultArgs<ExtArgs>
    Vizsgak?: boolean | VizsgakDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vizsgajelentkezes"]>


  export type VizsgajelentkezesSelectScalar = {
    vizsgajelentkezes_id?: boolean
    tanulo_elorehaladas_id?: boolean
    vizsga_id?: boolean
    oktato_jovahagyas?: boolean
  }

  export type VizsgajelentkezesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    TanuloElorehaladasV?: boolean | TanuloElorehaladasDefaultArgs<ExtArgs>
    Vizsgak?: boolean | VizsgakDefaultArgs<ExtArgs>
  }

  export type $VizsgajelentkezesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vizsgajelentkezes"
    objects: {
      TanuloElorehaladasV: Prisma.$TanuloElorehaladasPayload<ExtArgs>
      Vizsgak: Prisma.$VizsgakPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      vizsgajelentkezes_id: number
      tanulo_elorehaladas_id: number
      vizsga_id: number
      oktato_jovahagyas: boolean
    }, ExtArgs["result"]["vizsgajelentkezes"]>
    composites: {}
  }

  type VizsgajelentkezesGetPayload<S extends boolean | null | undefined | VizsgajelentkezesDefaultArgs> = $Result.GetResult<Prisma.$VizsgajelentkezesPayload, S>

  type VizsgajelentkezesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VizsgajelentkezesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VizsgajelentkezesCountAggregateInputType | true
    }

  export interface VizsgajelentkezesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vizsgajelentkezes'], meta: { name: 'Vizsgajelentkezes' } }
    /**
     * Find zero or one Vizsgajelentkezes that matches the filter.
     * @param {VizsgajelentkezesFindUniqueArgs} args - Arguments to find a Vizsgajelentkezes
     * @example
     * // Get one Vizsgajelentkezes
     * const vizsgajelentkezes = await prisma.vizsgajelentkezes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VizsgajelentkezesFindUniqueArgs>(args: SelectSubset<T, VizsgajelentkezesFindUniqueArgs<ExtArgs>>): Prisma__VizsgajelentkezesClient<$Result.GetResult<Prisma.$VizsgajelentkezesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vizsgajelentkezes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VizsgajelentkezesFindUniqueOrThrowArgs} args - Arguments to find a Vizsgajelentkezes
     * @example
     * // Get one Vizsgajelentkezes
     * const vizsgajelentkezes = await prisma.vizsgajelentkezes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VizsgajelentkezesFindUniqueOrThrowArgs>(args: SelectSubset<T, VizsgajelentkezesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VizsgajelentkezesClient<$Result.GetResult<Prisma.$VizsgajelentkezesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vizsgajelentkezes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgajelentkezesFindFirstArgs} args - Arguments to find a Vizsgajelentkezes
     * @example
     * // Get one Vizsgajelentkezes
     * const vizsgajelentkezes = await prisma.vizsgajelentkezes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VizsgajelentkezesFindFirstArgs>(args?: SelectSubset<T, VizsgajelentkezesFindFirstArgs<ExtArgs>>): Prisma__VizsgajelentkezesClient<$Result.GetResult<Prisma.$VizsgajelentkezesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vizsgajelentkezes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgajelentkezesFindFirstOrThrowArgs} args - Arguments to find a Vizsgajelentkezes
     * @example
     * // Get one Vizsgajelentkezes
     * const vizsgajelentkezes = await prisma.vizsgajelentkezes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VizsgajelentkezesFindFirstOrThrowArgs>(args?: SelectSubset<T, VizsgajelentkezesFindFirstOrThrowArgs<ExtArgs>>): Prisma__VizsgajelentkezesClient<$Result.GetResult<Prisma.$VizsgajelentkezesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Vizsgajelentkezes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgajelentkezesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vizsgajelentkezes
     * const vizsgajelentkezes = await prisma.vizsgajelentkezes.findMany()
     * 
     * // Get first 10 Vizsgajelentkezes
     * const vizsgajelentkezes = await prisma.vizsgajelentkezes.findMany({ take: 10 })
     * 
     * // Only select the `vizsgajelentkezes_id`
     * const vizsgajelentkezesWithVizsgajelentkezes_idOnly = await prisma.vizsgajelentkezes.findMany({ select: { vizsgajelentkezes_id: true } })
     * 
     */
    findMany<T extends VizsgajelentkezesFindManyArgs>(args?: SelectSubset<T, VizsgajelentkezesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VizsgajelentkezesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vizsgajelentkezes.
     * @param {VizsgajelentkezesCreateArgs} args - Arguments to create a Vizsgajelentkezes.
     * @example
     * // Create one Vizsgajelentkezes
     * const Vizsgajelentkezes = await prisma.vizsgajelentkezes.create({
     *   data: {
     *     // ... data to create a Vizsgajelentkezes
     *   }
     * })
     * 
     */
    create<T extends VizsgajelentkezesCreateArgs>(args: SelectSubset<T, VizsgajelentkezesCreateArgs<ExtArgs>>): Prisma__VizsgajelentkezesClient<$Result.GetResult<Prisma.$VizsgajelentkezesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Vizsgajelentkezes.
     * @param {VizsgajelentkezesCreateManyArgs} args - Arguments to create many Vizsgajelentkezes.
     * @example
     * // Create many Vizsgajelentkezes
     * const vizsgajelentkezes = await prisma.vizsgajelentkezes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VizsgajelentkezesCreateManyArgs>(args?: SelectSubset<T, VizsgajelentkezesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vizsgajelentkezes.
     * @param {VizsgajelentkezesDeleteArgs} args - Arguments to delete one Vizsgajelentkezes.
     * @example
     * // Delete one Vizsgajelentkezes
     * const Vizsgajelentkezes = await prisma.vizsgajelentkezes.delete({
     *   where: {
     *     // ... filter to delete one Vizsgajelentkezes
     *   }
     * })
     * 
     */
    delete<T extends VizsgajelentkezesDeleteArgs>(args: SelectSubset<T, VizsgajelentkezesDeleteArgs<ExtArgs>>): Prisma__VizsgajelentkezesClient<$Result.GetResult<Prisma.$VizsgajelentkezesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vizsgajelentkezes.
     * @param {VizsgajelentkezesUpdateArgs} args - Arguments to update one Vizsgajelentkezes.
     * @example
     * // Update one Vizsgajelentkezes
     * const vizsgajelentkezes = await prisma.vizsgajelentkezes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VizsgajelentkezesUpdateArgs>(args: SelectSubset<T, VizsgajelentkezesUpdateArgs<ExtArgs>>): Prisma__VizsgajelentkezesClient<$Result.GetResult<Prisma.$VizsgajelentkezesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Vizsgajelentkezes.
     * @param {VizsgajelentkezesDeleteManyArgs} args - Arguments to filter Vizsgajelentkezes to delete.
     * @example
     * // Delete a few Vizsgajelentkezes
     * const { count } = await prisma.vizsgajelentkezes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VizsgajelentkezesDeleteManyArgs>(args?: SelectSubset<T, VizsgajelentkezesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vizsgajelentkezes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgajelentkezesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vizsgajelentkezes
     * const vizsgajelentkezes = await prisma.vizsgajelentkezes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VizsgajelentkezesUpdateManyArgs>(args: SelectSubset<T, VizsgajelentkezesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vizsgajelentkezes.
     * @param {VizsgajelentkezesUpsertArgs} args - Arguments to update or create a Vizsgajelentkezes.
     * @example
     * // Update or create a Vizsgajelentkezes
     * const vizsgajelentkezes = await prisma.vizsgajelentkezes.upsert({
     *   create: {
     *     // ... data to create a Vizsgajelentkezes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vizsgajelentkezes we want to update
     *   }
     * })
     */
    upsert<T extends VizsgajelentkezesUpsertArgs>(args: SelectSubset<T, VizsgajelentkezesUpsertArgs<ExtArgs>>): Prisma__VizsgajelentkezesClient<$Result.GetResult<Prisma.$VizsgajelentkezesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Vizsgajelentkezes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgajelentkezesCountArgs} args - Arguments to filter Vizsgajelentkezes to count.
     * @example
     * // Count the number of Vizsgajelentkezes
     * const count = await prisma.vizsgajelentkezes.count({
     *   where: {
     *     // ... the filter for the Vizsgajelentkezes we want to count
     *   }
     * })
    **/
    count<T extends VizsgajelentkezesCountArgs>(
      args?: Subset<T, VizsgajelentkezesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VizsgajelentkezesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vizsgajelentkezes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgajelentkezesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VizsgajelentkezesAggregateArgs>(args: Subset<T, VizsgajelentkezesAggregateArgs>): Prisma.PrismaPromise<GetVizsgajelentkezesAggregateType<T>>

    /**
     * Group by Vizsgajelentkezes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgajelentkezesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VizsgajelentkezesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VizsgajelentkezesGroupByArgs['orderBy'] }
        : { orderBy?: VizsgajelentkezesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VizsgajelentkezesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVizsgajelentkezesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vizsgajelentkezes model
   */
  readonly fields: VizsgajelentkezesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vizsgajelentkezes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VizsgajelentkezesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    TanuloElorehaladasV<T extends TanuloElorehaladasDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TanuloElorehaladasDefaultArgs<ExtArgs>>): Prisma__TanuloElorehaladasClient<$Result.GetResult<Prisma.$TanuloElorehaladasPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Vizsgak<T extends VizsgakDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VizsgakDefaultArgs<ExtArgs>>): Prisma__VizsgakClient<$Result.GetResult<Prisma.$VizsgakPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vizsgajelentkezes model
   */ 
  interface VizsgajelentkezesFieldRefs {
    readonly vizsgajelentkezes_id: FieldRef<"Vizsgajelentkezes", 'Int'>
    readonly tanulo_elorehaladas_id: FieldRef<"Vizsgajelentkezes", 'Int'>
    readonly vizsga_id: FieldRef<"Vizsgajelentkezes", 'Int'>
    readonly oktato_jovahagyas: FieldRef<"Vizsgajelentkezes", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Vizsgajelentkezes findUnique
   */
  export type VizsgajelentkezesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgajelentkezes
     */
    select?: VizsgajelentkezesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgajelentkezesInclude<ExtArgs> | null
    /**
     * Filter, which Vizsgajelentkezes to fetch.
     */
    where: VizsgajelentkezesWhereUniqueInput
  }

  /**
   * Vizsgajelentkezes findUniqueOrThrow
   */
  export type VizsgajelentkezesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgajelentkezes
     */
    select?: VizsgajelentkezesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgajelentkezesInclude<ExtArgs> | null
    /**
     * Filter, which Vizsgajelentkezes to fetch.
     */
    where: VizsgajelentkezesWhereUniqueInput
  }

  /**
   * Vizsgajelentkezes findFirst
   */
  export type VizsgajelentkezesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgajelentkezes
     */
    select?: VizsgajelentkezesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgajelentkezesInclude<ExtArgs> | null
    /**
     * Filter, which Vizsgajelentkezes to fetch.
     */
    where?: VizsgajelentkezesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vizsgajelentkezes to fetch.
     */
    orderBy?: VizsgajelentkezesOrderByWithRelationInput | VizsgajelentkezesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vizsgajelentkezes.
     */
    cursor?: VizsgajelentkezesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vizsgajelentkezes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vizsgajelentkezes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vizsgajelentkezes.
     */
    distinct?: VizsgajelentkezesScalarFieldEnum | VizsgajelentkezesScalarFieldEnum[]
  }

  /**
   * Vizsgajelentkezes findFirstOrThrow
   */
  export type VizsgajelentkezesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgajelentkezes
     */
    select?: VizsgajelentkezesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgajelentkezesInclude<ExtArgs> | null
    /**
     * Filter, which Vizsgajelentkezes to fetch.
     */
    where?: VizsgajelentkezesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vizsgajelentkezes to fetch.
     */
    orderBy?: VizsgajelentkezesOrderByWithRelationInput | VizsgajelentkezesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vizsgajelentkezes.
     */
    cursor?: VizsgajelentkezesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vizsgajelentkezes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vizsgajelentkezes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vizsgajelentkezes.
     */
    distinct?: VizsgajelentkezesScalarFieldEnum | VizsgajelentkezesScalarFieldEnum[]
  }

  /**
   * Vizsgajelentkezes findMany
   */
  export type VizsgajelentkezesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgajelentkezes
     */
    select?: VizsgajelentkezesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgajelentkezesInclude<ExtArgs> | null
    /**
     * Filter, which Vizsgajelentkezes to fetch.
     */
    where?: VizsgajelentkezesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vizsgajelentkezes to fetch.
     */
    orderBy?: VizsgajelentkezesOrderByWithRelationInput | VizsgajelentkezesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vizsgajelentkezes.
     */
    cursor?: VizsgajelentkezesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vizsgajelentkezes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vizsgajelentkezes.
     */
    skip?: number
    distinct?: VizsgajelentkezesScalarFieldEnum | VizsgajelentkezesScalarFieldEnum[]
  }

  /**
   * Vizsgajelentkezes create
   */
  export type VizsgajelentkezesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgajelentkezes
     */
    select?: VizsgajelentkezesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgajelentkezesInclude<ExtArgs> | null
    /**
     * The data needed to create a Vizsgajelentkezes.
     */
    data: XOR<VizsgajelentkezesCreateInput, VizsgajelentkezesUncheckedCreateInput>
  }

  /**
   * Vizsgajelentkezes createMany
   */
  export type VizsgajelentkezesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vizsgajelentkezes.
     */
    data: VizsgajelentkezesCreateManyInput | VizsgajelentkezesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vizsgajelentkezes update
   */
  export type VizsgajelentkezesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgajelentkezes
     */
    select?: VizsgajelentkezesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgajelentkezesInclude<ExtArgs> | null
    /**
     * The data needed to update a Vizsgajelentkezes.
     */
    data: XOR<VizsgajelentkezesUpdateInput, VizsgajelentkezesUncheckedUpdateInput>
    /**
     * Choose, which Vizsgajelentkezes to update.
     */
    where: VizsgajelentkezesWhereUniqueInput
  }

  /**
   * Vizsgajelentkezes updateMany
   */
  export type VizsgajelentkezesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vizsgajelentkezes.
     */
    data: XOR<VizsgajelentkezesUpdateManyMutationInput, VizsgajelentkezesUncheckedUpdateManyInput>
    /**
     * Filter which Vizsgajelentkezes to update
     */
    where?: VizsgajelentkezesWhereInput
  }

  /**
   * Vizsgajelentkezes upsert
   */
  export type VizsgajelentkezesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgajelentkezes
     */
    select?: VizsgajelentkezesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgajelentkezesInclude<ExtArgs> | null
    /**
     * The filter to search for the Vizsgajelentkezes to update in case it exists.
     */
    where: VizsgajelentkezesWhereUniqueInput
    /**
     * In case the Vizsgajelentkezes found by the `where` argument doesn't exist, create a new Vizsgajelentkezes with this data.
     */
    create: XOR<VizsgajelentkezesCreateInput, VizsgajelentkezesUncheckedCreateInput>
    /**
     * In case the Vizsgajelentkezes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VizsgajelentkezesUpdateInput, VizsgajelentkezesUncheckedUpdateInput>
  }

  /**
   * Vizsgajelentkezes delete
   */
  export type VizsgajelentkezesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgajelentkezes
     */
    select?: VizsgajelentkezesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgajelentkezesInclude<ExtArgs> | null
    /**
     * Filter which Vizsgajelentkezes to delete.
     */
    where: VizsgajelentkezesWhereUniqueInput
  }

  /**
   * Vizsgajelentkezes deleteMany
   */
  export type VizsgajelentkezesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vizsgajelentkezes to delete
     */
    where?: VizsgajelentkezesWhereInput
  }

  /**
   * Vizsgajelentkezes without action
   */
  export type VizsgajelentkezesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgajelentkezes
     */
    select?: VizsgajelentkezesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgajelentkezesInclude<ExtArgs> | null
  }


  /**
   * Model Vizsgak
   */

  export type AggregateVizsgak = {
    _count: VizsgakCountAggregateOutputType | null
    _avg: VizsgakAvgAggregateOutputType | null
    _sum: VizsgakSumAggregateOutputType | null
    _min: VizsgakMinAggregateOutputType | null
    _max: VizsgakMaxAggregateOutputType | null
  }

  export type VizsgakAvgAggregateOutputType = {
    vizsga_id: number | null
    vizsgabiztos_id: number | null
    tipus_id: number | null
  }

  export type VizsgakSumAggregateOutputType = {
    vizsga_id: number | null
    vizsgabiztos_id: number | null
    tipus_id: number | null
  }

  export type VizsgakMinAggregateOutputType = {
    vizsga_id: number | null
    vizsgabiztos_id: number | null
    vizsga_datuma: Date | null
    tipus_id: number | null
    sikeres: boolean | null
  }

  export type VizsgakMaxAggregateOutputType = {
    vizsga_id: number | null
    vizsgabiztos_id: number | null
    vizsga_datuma: Date | null
    tipus_id: number | null
    sikeres: boolean | null
  }

  export type VizsgakCountAggregateOutputType = {
    vizsga_id: number
    vizsgabiztos_id: number
    vizsga_datuma: number
    tipus_id: number
    sikeres: number
    _all: number
  }


  export type VizsgakAvgAggregateInputType = {
    vizsga_id?: true
    vizsgabiztos_id?: true
    tipus_id?: true
  }

  export type VizsgakSumAggregateInputType = {
    vizsga_id?: true
    vizsgabiztos_id?: true
    tipus_id?: true
  }

  export type VizsgakMinAggregateInputType = {
    vizsga_id?: true
    vizsgabiztos_id?: true
    vizsga_datuma?: true
    tipus_id?: true
    sikeres?: true
  }

  export type VizsgakMaxAggregateInputType = {
    vizsga_id?: true
    vizsgabiztos_id?: true
    vizsga_datuma?: true
    tipus_id?: true
    sikeres?: true
  }

  export type VizsgakCountAggregateInputType = {
    vizsga_id?: true
    vizsgabiztos_id?: true
    vizsga_datuma?: true
    tipus_id?: true
    sikeres?: true
    _all?: true
  }

  export type VizsgakAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vizsgak to aggregate.
     */
    where?: VizsgakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vizsgaks to fetch.
     */
    orderBy?: VizsgakOrderByWithRelationInput | VizsgakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VizsgakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vizsgaks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vizsgaks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vizsgaks
    **/
    _count?: true | VizsgakCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VizsgakAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VizsgakSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VizsgakMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VizsgakMaxAggregateInputType
  }

  export type GetVizsgakAggregateType<T extends VizsgakAggregateArgs> = {
        [P in keyof T & keyof AggregateVizsgak]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVizsgak[P]>
      : GetScalarType<T[P], AggregateVizsgak[P]>
  }




  export type VizsgakGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VizsgakWhereInput
    orderBy?: VizsgakOrderByWithAggregationInput | VizsgakOrderByWithAggregationInput[]
    by: VizsgakScalarFieldEnum[] | VizsgakScalarFieldEnum
    having?: VizsgakScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VizsgakCountAggregateInputType | true
    _avg?: VizsgakAvgAggregateInputType
    _sum?: VizsgakSumAggregateInputType
    _min?: VizsgakMinAggregateInputType
    _max?: VizsgakMaxAggregateInputType
  }

  export type VizsgakGroupByOutputType = {
    vizsga_id: number
    vizsgabiztos_id: number | null
    vizsga_datuma: Date
    tipus_id: number
    sikeres: boolean
    _count: VizsgakCountAggregateOutputType | null
    _avg: VizsgakAvgAggregateOutputType | null
    _sum: VizsgakSumAggregateOutputType | null
    _min: VizsgakMinAggregateOutputType | null
    _max: VizsgakMaxAggregateOutputType | null
  }

  type GetVizsgakGroupByPayload<T extends VizsgakGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VizsgakGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VizsgakGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VizsgakGroupByOutputType[P]>
            : GetScalarType<T[P], VizsgakGroupByOutputType[P]>
        }
      >
    >


  export type VizsgakSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    vizsga_id?: boolean
    vizsgabiztos_id?: boolean
    vizsga_datuma?: boolean
    tipus_id?: boolean
    sikeres?: boolean
    Felhasznalok?: boolean | Vizsgak$FelhasznalokArgs<ExtArgs>
    VizsgaTipus?: boolean | VizsgaTipusDefaultArgs<ExtArgs>
    Vizsgajelentkezes?: boolean | Vizsgak$VizsgajelentkezesArgs<ExtArgs>
    _count?: boolean | VizsgakCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vizsgak"]>


  export type VizsgakSelectScalar = {
    vizsga_id?: boolean
    vizsgabiztos_id?: boolean
    vizsga_datuma?: boolean
    tipus_id?: boolean
    sikeres?: boolean
  }

  export type VizsgakInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Felhasznalok?: boolean | Vizsgak$FelhasznalokArgs<ExtArgs>
    VizsgaTipus?: boolean | VizsgaTipusDefaultArgs<ExtArgs>
    Vizsgajelentkezes?: boolean | Vizsgak$VizsgajelentkezesArgs<ExtArgs>
    _count?: boolean | VizsgakCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $VizsgakPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vizsgak"
    objects: {
      Felhasznalok: Prisma.$FelhasznalokPayload<ExtArgs> | null
      VizsgaTipus: Prisma.$VizsgaTipusPayload<ExtArgs>
      Vizsgajelentkezes: Prisma.$VizsgajelentkezesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      vizsga_id: number
      vizsgabiztos_id: number | null
      vizsga_datuma: Date
      tipus_id: number
      sikeres: boolean
    }, ExtArgs["result"]["vizsgak"]>
    composites: {}
  }

  type VizsgakGetPayload<S extends boolean | null | undefined | VizsgakDefaultArgs> = $Result.GetResult<Prisma.$VizsgakPayload, S>

  type VizsgakCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VizsgakFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VizsgakCountAggregateInputType | true
    }

  export interface VizsgakDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vizsgak'], meta: { name: 'Vizsgak' } }
    /**
     * Find zero or one Vizsgak that matches the filter.
     * @param {VizsgakFindUniqueArgs} args - Arguments to find a Vizsgak
     * @example
     * // Get one Vizsgak
     * const vizsgak = await prisma.vizsgak.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VizsgakFindUniqueArgs>(args: SelectSubset<T, VizsgakFindUniqueArgs<ExtArgs>>): Prisma__VizsgakClient<$Result.GetResult<Prisma.$VizsgakPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vizsgak that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VizsgakFindUniqueOrThrowArgs} args - Arguments to find a Vizsgak
     * @example
     * // Get one Vizsgak
     * const vizsgak = await prisma.vizsgak.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VizsgakFindUniqueOrThrowArgs>(args: SelectSubset<T, VizsgakFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VizsgakClient<$Result.GetResult<Prisma.$VizsgakPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vizsgak that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgakFindFirstArgs} args - Arguments to find a Vizsgak
     * @example
     * // Get one Vizsgak
     * const vizsgak = await prisma.vizsgak.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VizsgakFindFirstArgs>(args?: SelectSubset<T, VizsgakFindFirstArgs<ExtArgs>>): Prisma__VizsgakClient<$Result.GetResult<Prisma.$VizsgakPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vizsgak that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgakFindFirstOrThrowArgs} args - Arguments to find a Vizsgak
     * @example
     * // Get one Vizsgak
     * const vizsgak = await prisma.vizsgak.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VizsgakFindFirstOrThrowArgs>(args?: SelectSubset<T, VizsgakFindFirstOrThrowArgs<ExtArgs>>): Prisma__VizsgakClient<$Result.GetResult<Prisma.$VizsgakPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Vizsgaks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgakFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vizsgaks
     * const vizsgaks = await prisma.vizsgak.findMany()
     * 
     * // Get first 10 Vizsgaks
     * const vizsgaks = await prisma.vizsgak.findMany({ take: 10 })
     * 
     * // Only select the `vizsga_id`
     * const vizsgakWithVizsga_idOnly = await prisma.vizsgak.findMany({ select: { vizsga_id: true } })
     * 
     */
    findMany<T extends VizsgakFindManyArgs>(args?: SelectSubset<T, VizsgakFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VizsgakPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vizsgak.
     * @param {VizsgakCreateArgs} args - Arguments to create a Vizsgak.
     * @example
     * // Create one Vizsgak
     * const Vizsgak = await prisma.vizsgak.create({
     *   data: {
     *     // ... data to create a Vizsgak
     *   }
     * })
     * 
     */
    create<T extends VizsgakCreateArgs>(args: SelectSubset<T, VizsgakCreateArgs<ExtArgs>>): Prisma__VizsgakClient<$Result.GetResult<Prisma.$VizsgakPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Vizsgaks.
     * @param {VizsgakCreateManyArgs} args - Arguments to create many Vizsgaks.
     * @example
     * // Create many Vizsgaks
     * const vizsgak = await prisma.vizsgak.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VizsgakCreateManyArgs>(args?: SelectSubset<T, VizsgakCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vizsgak.
     * @param {VizsgakDeleteArgs} args - Arguments to delete one Vizsgak.
     * @example
     * // Delete one Vizsgak
     * const Vizsgak = await prisma.vizsgak.delete({
     *   where: {
     *     // ... filter to delete one Vizsgak
     *   }
     * })
     * 
     */
    delete<T extends VizsgakDeleteArgs>(args: SelectSubset<T, VizsgakDeleteArgs<ExtArgs>>): Prisma__VizsgakClient<$Result.GetResult<Prisma.$VizsgakPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vizsgak.
     * @param {VizsgakUpdateArgs} args - Arguments to update one Vizsgak.
     * @example
     * // Update one Vizsgak
     * const vizsgak = await prisma.vizsgak.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VizsgakUpdateArgs>(args: SelectSubset<T, VizsgakUpdateArgs<ExtArgs>>): Prisma__VizsgakClient<$Result.GetResult<Prisma.$VizsgakPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Vizsgaks.
     * @param {VizsgakDeleteManyArgs} args - Arguments to filter Vizsgaks to delete.
     * @example
     * // Delete a few Vizsgaks
     * const { count } = await prisma.vizsgak.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VizsgakDeleteManyArgs>(args?: SelectSubset<T, VizsgakDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vizsgaks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgakUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vizsgaks
     * const vizsgak = await prisma.vizsgak.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VizsgakUpdateManyArgs>(args: SelectSubset<T, VizsgakUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vizsgak.
     * @param {VizsgakUpsertArgs} args - Arguments to update or create a Vizsgak.
     * @example
     * // Update or create a Vizsgak
     * const vizsgak = await prisma.vizsgak.upsert({
     *   create: {
     *     // ... data to create a Vizsgak
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vizsgak we want to update
     *   }
     * })
     */
    upsert<T extends VizsgakUpsertArgs>(args: SelectSubset<T, VizsgakUpsertArgs<ExtArgs>>): Prisma__VizsgakClient<$Result.GetResult<Prisma.$VizsgakPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Vizsgaks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgakCountArgs} args - Arguments to filter Vizsgaks to count.
     * @example
     * // Count the number of Vizsgaks
     * const count = await prisma.vizsgak.count({
     *   where: {
     *     // ... the filter for the Vizsgaks we want to count
     *   }
     * })
    **/
    count<T extends VizsgakCountArgs>(
      args?: Subset<T, VizsgakCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VizsgakCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vizsgak.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgakAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VizsgakAggregateArgs>(args: Subset<T, VizsgakAggregateArgs>): Prisma.PrismaPromise<GetVizsgakAggregateType<T>>

    /**
     * Group by Vizsgak.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgakGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VizsgakGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VizsgakGroupByArgs['orderBy'] }
        : { orderBy?: VizsgakGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VizsgakGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVizsgakGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vizsgak model
   */
  readonly fields: VizsgakFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vizsgak.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VizsgakClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Felhasznalok<T extends Vizsgak$FelhasznalokArgs<ExtArgs> = {}>(args?: Subset<T, Vizsgak$FelhasznalokArgs<ExtArgs>>): Prisma__FelhasznalokClient<$Result.GetResult<Prisma.$FelhasznalokPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    VizsgaTipus<T extends VizsgaTipusDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VizsgaTipusDefaultArgs<ExtArgs>>): Prisma__VizsgaTipusClient<$Result.GetResult<Prisma.$VizsgaTipusPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Vizsgajelentkezes<T extends Vizsgak$VizsgajelentkezesArgs<ExtArgs> = {}>(args?: Subset<T, Vizsgak$VizsgajelentkezesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VizsgajelentkezesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vizsgak model
   */ 
  interface VizsgakFieldRefs {
    readonly vizsga_id: FieldRef<"Vizsgak", 'Int'>
    readonly vizsgabiztos_id: FieldRef<"Vizsgak", 'Int'>
    readonly vizsga_datuma: FieldRef<"Vizsgak", 'DateTime'>
    readonly tipus_id: FieldRef<"Vizsgak", 'Int'>
    readonly sikeres: FieldRef<"Vizsgak", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Vizsgak findUnique
   */
  export type VizsgakFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgak
     */
    select?: VizsgakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgakInclude<ExtArgs> | null
    /**
     * Filter, which Vizsgak to fetch.
     */
    where: VizsgakWhereUniqueInput
  }

  /**
   * Vizsgak findUniqueOrThrow
   */
  export type VizsgakFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgak
     */
    select?: VizsgakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgakInclude<ExtArgs> | null
    /**
     * Filter, which Vizsgak to fetch.
     */
    where: VizsgakWhereUniqueInput
  }

  /**
   * Vizsgak findFirst
   */
  export type VizsgakFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgak
     */
    select?: VizsgakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgakInclude<ExtArgs> | null
    /**
     * Filter, which Vizsgak to fetch.
     */
    where?: VizsgakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vizsgaks to fetch.
     */
    orderBy?: VizsgakOrderByWithRelationInput | VizsgakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vizsgaks.
     */
    cursor?: VizsgakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vizsgaks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vizsgaks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vizsgaks.
     */
    distinct?: VizsgakScalarFieldEnum | VizsgakScalarFieldEnum[]
  }

  /**
   * Vizsgak findFirstOrThrow
   */
  export type VizsgakFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgak
     */
    select?: VizsgakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgakInclude<ExtArgs> | null
    /**
     * Filter, which Vizsgak to fetch.
     */
    where?: VizsgakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vizsgaks to fetch.
     */
    orderBy?: VizsgakOrderByWithRelationInput | VizsgakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vizsgaks.
     */
    cursor?: VizsgakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vizsgaks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vizsgaks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vizsgaks.
     */
    distinct?: VizsgakScalarFieldEnum | VizsgakScalarFieldEnum[]
  }

  /**
   * Vizsgak findMany
   */
  export type VizsgakFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgak
     */
    select?: VizsgakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgakInclude<ExtArgs> | null
    /**
     * Filter, which Vizsgaks to fetch.
     */
    where?: VizsgakWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vizsgaks to fetch.
     */
    orderBy?: VizsgakOrderByWithRelationInput | VizsgakOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vizsgaks.
     */
    cursor?: VizsgakWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vizsgaks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vizsgaks.
     */
    skip?: number
    distinct?: VizsgakScalarFieldEnum | VizsgakScalarFieldEnum[]
  }

  /**
   * Vizsgak create
   */
  export type VizsgakCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgak
     */
    select?: VizsgakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgakInclude<ExtArgs> | null
    /**
     * The data needed to create a Vizsgak.
     */
    data: XOR<VizsgakCreateInput, VizsgakUncheckedCreateInput>
  }

  /**
   * Vizsgak createMany
   */
  export type VizsgakCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vizsgaks.
     */
    data: VizsgakCreateManyInput | VizsgakCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vizsgak update
   */
  export type VizsgakUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgak
     */
    select?: VizsgakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgakInclude<ExtArgs> | null
    /**
     * The data needed to update a Vizsgak.
     */
    data: XOR<VizsgakUpdateInput, VizsgakUncheckedUpdateInput>
    /**
     * Choose, which Vizsgak to update.
     */
    where: VizsgakWhereUniqueInput
  }

  /**
   * Vizsgak updateMany
   */
  export type VizsgakUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vizsgaks.
     */
    data: XOR<VizsgakUpdateManyMutationInput, VizsgakUncheckedUpdateManyInput>
    /**
     * Filter which Vizsgaks to update
     */
    where?: VizsgakWhereInput
  }

  /**
   * Vizsgak upsert
   */
  export type VizsgakUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgak
     */
    select?: VizsgakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgakInclude<ExtArgs> | null
    /**
     * The filter to search for the Vizsgak to update in case it exists.
     */
    where: VizsgakWhereUniqueInput
    /**
     * In case the Vizsgak found by the `where` argument doesn't exist, create a new Vizsgak with this data.
     */
    create: XOR<VizsgakCreateInput, VizsgakUncheckedCreateInput>
    /**
     * In case the Vizsgak was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VizsgakUpdateInput, VizsgakUncheckedUpdateInput>
  }

  /**
   * Vizsgak delete
   */
  export type VizsgakDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgak
     */
    select?: VizsgakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgakInclude<ExtArgs> | null
    /**
     * Filter which Vizsgak to delete.
     */
    where: VizsgakWhereUniqueInput
  }

  /**
   * Vizsgak deleteMany
   */
  export type VizsgakDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vizsgaks to delete
     */
    where?: VizsgakWhereInput
  }

  /**
   * Vizsgak.Felhasznalok
   */
  export type Vizsgak$FelhasznalokArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Felhasznalok
     */
    select?: FelhasznalokSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FelhasznalokInclude<ExtArgs> | null
    where?: FelhasznalokWhereInput
  }

  /**
   * Vizsgak.Vizsgajelentkezes
   */
  export type Vizsgak$VizsgajelentkezesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgajelentkezes
     */
    select?: VizsgajelentkezesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgajelentkezesInclude<ExtArgs> | null
    where?: VizsgajelentkezesWhereInput
    orderBy?: VizsgajelentkezesOrderByWithRelationInput | VizsgajelentkezesOrderByWithRelationInput[]
    cursor?: VizsgajelentkezesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VizsgajelentkezesScalarFieldEnum | VizsgajelentkezesScalarFieldEnum[]
  }

  /**
   * Vizsgak without action
   */
  export type VizsgakDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgak
     */
    select?: VizsgakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgakInclude<ExtArgs> | null
  }


  /**
   * Model VizsgaTipus
   */

  export type AggregateVizsgaTipus = {
    _count: VizsgaTipusCountAggregateOutputType | null
    _avg: VizsgaTipusAvgAggregateOutputType | null
    _sum: VizsgaTipusSumAggregateOutputType | null
    _min: VizsgaTipusMinAggregateOutputType | null
    _max: VizsgaTipusMaxAggregateOutputType | null
  }

  export type VizsgaTipusAvgAggregateOutputType = {
    vizsga_tipus_id: number | null
  }

  export type VizsgaTipusSumAggregateOutputType = {
    vizsga_tipus_id: number | null
  }

  export type VizsgaTipusMinAggregateOutputType = {
    vizsga_tipus_id: number | null
    tipus: string | null
  }

  export type VizsgaTipusMaxAggregateOutputType = {
    vizsga_tipus_id: number | null
    tipus: string | null
  }

  export type VizsgaTipusCountAggregateOutputType = {
    vizsga_tipus_id: number
    tipus: number
    _all: number
  }


  export type VizsgaTipusAvgAggregateInputType = {
    vizsga_tipus_id?: true
  }

  export type VizsgaTipusSumAggregateInputType = {
    vizsga_tipus_id?: true
  }

  export type VizsgaTipusMinAggregateInputType = {
    vizsga_tipus_id?: true
    tipus?: true
  }

  export type VizsgaTipusMaxAggregateInputType = {
    vizsga_tipus_id?: true
    tipus?: true
  }

  export type VizsgaTipusCountAggregateInputType = {
    vizsga_tipus_id?: true
    tipus?: true
    _all?: true
  }

  export type VizsgaTipusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VizsgaTipus to aggregate.
     */
    where?: VizsgaTipusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VizsgaTipuses to fetch.
     */
    orderBy?: VizsgaTipusOrderByWithRelationInput | VizsgaTipusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VizsgaTipusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VizsgaTipuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VizsgaTipuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VizsgaTipuses
    **/
    _count?: true | VizsgaTipusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VizsgaTipusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VizsgaTipusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VizsgaTipusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VizsgaTipusMaxAggregateInputType
  }

  export type GetVizsgaTipusAggregateType<T extends VizsgaTipusAggregateArgs> = {
        [P in keyof T & keyof AggregateVizsgaTipus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVizsgaTipus[P]>
      : GetScalarType<T[P], AggregateVizsgaTipus[P]>
  }




  export type VizsgaTipusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VizsgaTipusWhereInput
    orderBy?: VizsgaTipusOrderByWithAggregationInput | VizsgaTipusOrderByWithAggregationInput[]
    by: VizsgaTipusScalarFieldEnum[] | VizsgaTipusScalarFieldEnum
    having?: VizsgaTipusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VizsgaTipusCountAggregateInputType | true
    _avg?: VizsgaTipusAvgAggregateInputType
    _sum?: VizsgaTipusSumAggregateInputType
    _min?: VizsgaTipusMinAggregateInputType
    _max?: VizsgaTipusMaxAggregateInputType
  }

  export type VizsgaTipusGroupByOutputType = {
    vizsga_tipus_id: number
    tipus: string
    _count: VizsgaTipusCountAggregateOutputType | null
    _avg: VizsgaTipusAvgAggregateOutputType | null
    _sum: VizsgaTipusSumAggregateOutputType | null
    _min: VizsgaTipusMinAggregateOutputType | null
    _max: VizsgaTipusMaxAggregateOutputType | null
  }

  type GetVizsgaTipusGroupByPayload<T extends VizsgaTipusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VizsgaTipusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VizsgaTipusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VizsgaTipusGroupByOutputType[P]>
            : GetScalarType<T[P], VizsgaTipusGroupByOutputType[P]>
        }
      >
    >


  export type VizsgaTipusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    vizsga_tipus_id?: boolean
    tipus?: boolean
    Vizsgak?: boolean | VizsgaTipus$VizsgakArgs<ExtArgs>
    _count?: boolean | VizsgaTipusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vizsgaTipus"]>


  export type VizsgaTipusSelectScalar = {
    vizsga_tipus_id?: boolean
    tipus?: boolean
  }

  export type VizsgaTipusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Vizsgak?: boolean | VizsgaTipus$VizsgakArgs<ExtArgs>
    _count?: boolean | VizsgaTipusCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $VizsgaTipusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VizsgaTipus"
    objects: {
      Vizsgak: Prisma.$VizsgakPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      vizsga_tipus_id: number
      tipus: string
    }, ExtArgs["result"]["vizsgaTipus"]>
    composites: {}
  }

  type VizsgaTipusGetPayload<S extends boolean | null | undefined | VizsgaTipusDefaultArgs> = $Result.GetResult<Prisma.$VizsgaTipusPayload, S>

  type VizsgaTipusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VizsgaTipusFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VizsgaTipusCountAggregateInputType | true
    }

  export interface VizsgaTipusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VizsgaTipus'], meta: { name: 'VizsgaTipus' } }
    /**
     * Find zero or one VizsgaTipus that matches the filter.
     * @param {VizsgaTipusFindUniqueArgs} args - Arguments to find a VizsgaTipus
     * @example
     * // Get one VizsgaTipus
     * const vizsgaTipus = await prisma.vizsgaTipus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VizsgaTipusFindUniqueArgs>(args: SelectSubset<T, VizsgaTipusFindUniqueArgs<ExtArgs>>): Prisma__VizsgaTipusClient<$Result.GetResult<Prisma.$VizsgaTipusPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VizsgaTipus that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VizsgaTipusFindUniqueOrThrowArgs} args - Arguments to find a VizsgaTipus
     * @example
     * // Get one VizsgaTipus
     * const vizsgaTipus = await prisma.vizsgaTipus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VizsgaTipusFindUniqueOrThrowArgs>(args: SelectSubset<T, VizsgaTipusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VizsgaTipusClient<$Result.GetResult<Prisma.$VizsgaTipusPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VizsgaTipus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgaTipusFindFirstArgs} args - Arguments to find a VizsgaTipus
     * @example
     * // Get one VizsgaTipus
     * const vizsgaTipus = await prisma.vizsgaTipus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VizsgaTipusFindFirstArgs>(args?: SelectSubset<T, VizsgaTipusFindFirstArgs<ExtArgs>>): Prisma__VizsgaTipusClient<$Result.GetResult<Prisma.$VizsgaTipusPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VizsgaTipus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgaTipusFindFirstOrThrowArgs} args - Arguments to find a VizsgaTipus
     * @example
     * // Get one VizsgaTipus
     * const vizsgaTipus = await prisma.vizsgaTipus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VizsgaTipusFindFirstOrThrowArgs>(args?: SelectSubset<T, VizsgaTipusFindFirstOrThrowArgs<ExtArgs>>): Prisma__VizsgaTipusClient<$Result.GetResult<Prisma.$VizsgaTipusPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VizsgaTipuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgaTipusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VizsgaTipuses
     * const vizsgaTipuses = await prisma.vizsgaTipus.findMany()
     * 
     * // Get first 10 VizsgaTipuses
     * const vizsgaTipuses = await prisma.vizsgaTipus.findMany({ take: 10 })
     * 
     * // Only select the `vizsga_tipus_id`
     * const vizsgaTipusWithVizsga_tipus_idOnly = await prisma.vizsgaTipus.findMany({ select: { vizsga_tipus_id: true } })
     * 
     */
    findMany<T extends VizsgaTipusFindManyArgs>(args?: SelectSubset<T, VizsgaTipusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VizsgaTipusPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VizsgaTipus.
     * @param {VizsgaTipusCreateArgs} args - Arguments to create a VizsgaTipus.
     * @example
     * // Create one VizsgaTipus
     * const VizsgaTipus = await prisma.vizsgaTipus.create({
     *   data: {
     *     // ... data to create a VizsgaTipus
     *   }
     * })
     * 
     */
    create<T extends VizsgaTipusCreateArgs>(args: SelectSubset<T, VizsgaTipusCreateArgs<ExtArgs>>): Prisma__VizsgaTipusClient<$Result.GetResult<Prisma.$VizsgaTipusPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VizsgaTipuses.
     * @param {VizsgaTipusCreateManyArgs} args - Arguments to create many VizsgaTipuses.
     * @example
     * // Create many VizsgaTipuses
     * const vizsgaTipus = await prisma.vizsgaTipus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VizsgaTipusCreateManyArgs>(args?: SelectSubset<T, VizsgaTipusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VizsgaTipus.
     * @param {VizsgaTipusDeleteArgs} args - Arguments to delete one VizsgaTipus.
     * @example
     * // Delete one VizsgaTipus
     * const VizsgaTipus = await prisma.vizsgaTipus.delete({
     *   where: {
     *     // ... filter to delete one VizsgaTipus
     *   }
     * })
     * 
     */
    delete<T extends VizsgaTipusDeleteArgs>(args: SelectSubset<T, VizsgaTipusDeleteArgs<ExtArgs>>): Prisma__VizsgaTipusClient<$Result.GetResult<Prisma.$VizsgaTipusPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VizsgaTipus.
     * @param {VizsgaTipusUpdateArgs} args - Arguments to update one VizsgaTipus.
     * @example
     * // Update one VizsgaTipus
     * const vizsgaTipus = await prisma.vizsgaTipus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VizsgaTipusUpdateArgs>(args: SelectSubset<T, VizsgaTipusUpdateArgs<ExtArgs>>): Prisma__VizsgaTipusClient<$Result.GetResult<Prisma.$VizsgaTipusPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VizsgaTipuses.
     * @param {VizsgaTipusDeleteManyArgs} args - Arguments to filter VizsgaTipuses to delete.
     * @example
     * // Delete a few VizsgaTipuses
     * const { count } = await prisma.vizsgaTipus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VizsgaTipusDeleteManyArgs>(args?: SelectSubset<T, VizsgaTipusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VizsgaTipuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgaTipusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VizsgaTipuses
     * const vizsgaTipus = await prisma.vizsgaTipus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VizsgaTipusUpdateManyArgs>(args: SelectSubset<T, VizsgaTipusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VizsgaTipus.
     * @param {VizsgaTipusUpsertArgs} args - Arguments to update or create a VizsgaTipus.
     * @example
     * // Update or create a VizsgaTipus
     * const vizsgaTipus = await prisma.vizsgaTipus.upsert({
     *   create: {
     *     // ... data to create a VizsgaTipus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VizsgaTipus we want to update
     *   }
     * })
     */
    upsert<T extends VizsgaTipusUpsertArgs>(args: SelectSubset<T, VizsgaTipusUpsertArgs<ExtArgs>>): Prisma__VizsgaTipusClient<$Result.GetResult<Prisma.$VizsgaTipusPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VizsgaTipuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgaTipusCountArgs} args - Arguments to filter VizsgaTipuses to count.
     * @example
     * // Count the number of VizsgaTipuses
     * const count = await prisma.vizsgaTipus.count({
     *   where: {
     *     // ... the filter for the VizsgaTipuses we want to count
     *   }
     * })
    **/
    count<T extends VizsgaTipusCountArgs>(
      args?: Subset<T, VizsgaTipusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VizsgaTipusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VizsgaTipus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgaTipusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VizsgaTipusAggregateArgs>(args: Subset<T, VizsgaTipusAggregateArgs>): Prisma.PrismaPromise<GetVizsgaTipusAggregateType<T>>

    /**
     * Group by VizsgaTipus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VizsgaTipusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VizsgaTipusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VizsgaTipusGroupByArgs['orderBy'] }
        : { orderBy?: VizsgaTipusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VizsgaTipusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVizsgaTipusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VizsgaTipus model
   */
  readonly fields: VizsgaTipusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VizsgaTipus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VizsgaTipusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Vizsgak<T extends VizsgaTipus$VizsgakArgs<ExtArgs> = {}>(args?: Subset<T, VizsgaTipus$VizsgakArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VizsgakPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VizsgaTipus model
   */ 
  interface VizsgaTipusFieldRefs {
    readonly vizsga_tipus_id: FieldRef<"VizsgaTipus", 'Int'>
    readonly tipus: FieldRef<"VizsgaTipus", 'String'>
  }
    

  // Custom InputTypes
  /**
   * VizsgaTipus findUnique
   */
  export type VizsgaTipusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VizsgaTipus
     */
    select?: VizsgaTipusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgaTipusInclude<ExtArgs> | null
    /**
     * Filter, which VizsgaTipus to fetch.
     */
    where: VizsgaTipusWhereUniqueInput
  }

  /**
   * VizsgaTipus findUniqueOrThrow
   */
  export type VizsgaTipusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VizsgaTipus
     */
    select?: VizsgaTipusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgaTipusInclude<ExtArgs> | null
    /**
     * Filter, which VizsgaTipus to fetch.
     */
    where: VizsgaTipusWhereUniqueInput
  }

  /**
   * VizsgaTipus findFirst
   */
  export type VizsgaTipusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VizsgaTipus
     */
    select?: VizsgaTipusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgaTipusInclude<ExtArgs> | null
    /**
     * Filter, which VizsgaTipus to fetch.
     */
    where?: VizsgaTipusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VizsgaTipuses to fetch.
     */
    orderBy?: VizsgaTipusOrderByWithRelationInput | VizsgaTipusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VizsgaTipuses.
     */
    cursor?: VizsgaTipusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VizsgaTipuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VizsgaTipuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VizsgaTipuses.
     */
    distinct?: VizsgaTipusScalarFieldEnum | VizsgaTipusScalarFieldEnum[]
  }

  /**
   * VizsgaTipus findFirstOrThrow
   */
  export type VizsgaTipusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VizsgaTipus
     */
    select?: VizsgaTipusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgaTipusInclude<ExtArgs> | null
    /**
     * Filter, which VizsgaTipus to fetch.
     */
    where?: VizsgaTipusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VizsgaTipuses to fetch.
     */
    orderBy?: VizsgaTipusOrderByWithRelationInput | VizsgaTipusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VizsgaTipuses.
     */
    cursor?: VizsgaTipusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VizsgaTipuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VizsgaTipuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VizsgaTipuses.
     */
    distinct?: VizsgaTipusScalarFieldEnum | VizsgaTipusScalarFieldEnum[]
  }

  /**
   * VizsgaTipus findMany
   */
  export type VizsgaTipusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VizsgaTipus
     */
    select?: VizsgaTipusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgaTipusInclude<ExtArgs> | null
    /**
     * Filter, which VizsgaTipuses to fetch.
     */
    where?: VizsgaTipusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VizsgaTipuses to fetch.
     */
    orderBy?: VizsgaTipusOrderByWithRelationInput | VizsgaTipusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VizsgaTipuses.
     */
    cursor?: VizsgaTipusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VizsgaTipuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VizsgaTipuses.
     */
    skip?: number
    distinct?: VizsgaTipusScalarFieldEnum | VizsgaTipusScalarFieldEnum[]
  }

  /**
   * VizsgaTipus create
   */
  export type VizsgaTipusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VizsgaTipus
     */
    select?: VizsgaTipusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgaTipusInclude<ExtArgs> | null
    /**
     * The data needed to create a VizsgaTipus.
     */
    data: XOR<VizsgaTipusCreateInput, VizsgaTipusUncheckedCreateInput>
  }

  /**
   * VizsgaTipus createMany
   */
  export type VizsgaTipusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VizsgaTipuses.
     */
    data: VizsgaTipusCreateManyInput | VizsgaTipusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VizsgaTipus update
   */
  export type VizsgaTipusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VizsgaTipus
     */
    select?: VizsgaTipusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgaTipusInclude<ExtArgs> | null
    /**
     * The data needed to update a VizsgaTipus.
     */
    data: XOR<VizsgaTipusUpdateInput, VizsgaTipusUncheckedUpdateInput>
    /**
     * Choose, which VizsgaTipus to update.
     */
    where: VizsgaTipusWhereUniqueInput
  }

  /**
   * VizsgaTipus updateMany
   */
  export type VizsgaTipusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VizsgaTipuses.
     */
    data: XOR<VizsgaTipusUpdateManyMutationInput, VizsgaTipusUncheckedUpdateManyInput>
    /**
     * Filter which VizsgaTipuses to update
     */
    where?: VizsgaTipusWhereInput
  }

  /**
   * VizsgaTipus upsert
   */
  export type VizsgaTipusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VizsgaTipus
     */
    select?: VizsgaTipusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgaTipusInclude<ExtArgs> | null
    /**
     * The filter to search for the VizsgaTipus to update in case it exists.
     */
    where: VizsgaTipusWhereUniqueInput
    /**
     * In case the VizsgaTipus found by the `where` argument doesn't exist, create a new VizsgaTipus with this data.
     */
    create: XOR<VizsgaTipusCreateInput, VizsgaTipusUncheckedCreateInput>
    /**
     * In case the VizsgaTipus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VizsgaTipusUpdateInput, VizsgaTipusUncheckedUpdateInput>
  }

  /**
   * VizsgaTipus delete
   */
  export type VizsgaTipusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VizsgaTipus
     */
    select?: VizsgaTipusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgaTipusInclude<ExtArgs> | null
    /**
     * Filter which VizsgaTipus to delete.
     */
    where: VizsgaTipusWhereUniqueInput
  }

  /**
   * VizsgaTipus deleteMany
   */
  export type VizsgaTipusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VizsgaTipuses to delete
     */
    where?: VizsgaTipusWhereInput
  }

  /**
   * VizsgaTipus.Vizsgak
   */
  export type VizsgaTipus$VizsgakArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vizsgak
     */
    select?: VizsgakSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgakInclude<ExtArgs> | null
    where?: VizsgakWhereInput
    orderBy?: VizsgakOrderByWithRelationInput | VizsgakOrderByWithRelationInput[]
    cursor?: VizsgakWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VizsgakScalarFieldEnum | VizsgakScalarFieldEnum[]
  }

  /**
   * VizsgaTipus without action
   */
  export type VizsgaTipusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VizsgaTipus
     */
    select?: VizsgaTipusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VizsgaTipusInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FelhasznalokScalarFieldEnum: {
    felhasznalo_id: 'felhasznalo_id',
    vezeteknev: 'vezeteknev',
    keresztnev: 'keresztnev',
    email: 'email',
    jelszo: 'jelszo',
    bankszamla: 'bankszamla',
    jogkor_id: 'jogkor_id'
  };

  export type FelhasznalokScalarFieldEnum = (typeof FelhasznalokScalarFieldEnum)[keyof typeof FelhasznalokScalarFieldEnum]


  export const JogkorokScalarFieldEnum: {
    jogkor_id: 'jogkor_id',
    jogkor: 'jogkor'
  };

  export type JogkorokScalarFieldEnum = (typeof JogkorokScalarFieldEnum)[keyof typeof JogkorokScalarFieldEnum]


  export const KifizetesekScalarFieldEnum: {
    kifizetes_id: 'kifizetes_id',
    elorehaladas_id: 'elorehaladas_id',
    targy: 'targy',
    osszeg: 'osszeg',
    kifizetve: 'kifizetve'
  };

  export type KifizetesekScalarFieldEnum = (typeof KifizetesekScalarFieldEnum)[keyof typeof KifizetesekScalarFieldEnum]


  export const OrakScalarFieldEnum: {
    ora_id: 'ora_id',
    idopont_eleje: 'idopont_eleje',
    idopont_vege: 'idopont_vege',
    cim: 'cim',
    helyszin: 'helyszin'
  };

  export type OrakScalarFieldEnum = (typeof OrakScalarFieldEnum)[keyof typeof OrakScalarFieldEnum]


  export const OrarendScalarFieldEnum: {
    orarend_id: 'orarend_id',
    ora_id: 'ora_id',
    felhasznalo_id: 'felhasznalo_id'
  };

  export type OrarendScalarFieldEnum = (typeof OrarendScalarFieldEnum)[keyof typeof OrarendScalarFieldEnum]


  export const TanuloElorehaladasScalarFieldEnum: {
    elorehaladas_id: 'elorehaladas_id',
    tanulo_id: 'tanulo_id',
    oktato_id: 'oktato_id',
    levezetett_orak: 'levezetett_orak'
  };

  export type TanuloElorehaladasScalarFieldEnum = (typeof TanuloElorehaladasScalarFieldEnum)[keyof typeof TanuloElorehaladasScalarFieldEnum]


  export const VizsgajelentkezesScalarFieldEnum: {
    vizsgajelentkezes_id: 'vizsgajelentkezes_id',
    tanulo_elorehaladas_id: 'tanulo_elorehaladas_id',
    vizsga_id: 'vizsga_id',
    oktato_jovahagyas: 'oktato_jovahagyas'
  };

  export type VizsgajelentkezesScalarFieldEnum = (typeof VizsgajelentkezesScalarFieldEnum)[keyof typeof VizsgajelentkezesScalarFieldEnum]


  export const VizsgakScalarFieldEnum: {
    vizsga_id: 'vizsga_id',
    vizsgabiztos_id: 'vizsgabiztos_id',
    vizsga_datuma: 'vizsga_datuma',
    tipus_id: 'tipus_id',
    sikeres: 'sikeres'
  };

  export type VizsgakScalarFieldEnum = (typeof VizsgakScalarFieldEnum)[keyof typeof VizsgakScalarFieldEnum]


  export const VizsgaTipusScalarFieldEnum: {
    vizsga_tipus_id: 'vizsga_tipus_id',
    tipus: 'tipus'
  };

  export type VizsgaTipusScalarFieldEnum = (typeof VizsgaTipusScalarFieldEnum)[keyof typeof VizsgaTipusScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type FelhasznalokWhereInput = {
    AND?: FelhasznalokWhereInput | FelhasznalokWhereInput[]
    OR?: FelhasznalokWhereInput[]
    NOT?: FelhasznalokWhereInput | FelhasznalokWhereInput[]
    felhasznalo_id?: IntFilter<"Felhasznalok"> | number
    vezeteknev?: StringFilter<"Felhasznalok"> | string
    keresztnev?: StringFilter<"Felhasznalok"> | string
    email?: StringFilter<"Felhasznalok"> | string
    jelszo?: StringFilter<"Felhasznalok"> | string
    bankszamla?: StringFilter<"Felhasznalok"> | string
    jogkor_id?: IntFilter<"Felhasznalok"> | number
    Jogkorok?: XOR<JogkorokRelationFilter, JogkorokWhereInput>
    Orarend?: OrarendListRelationFilter
    Vizsgak?: VizsgakListRelationFilter
    TanuloElorehaladas?: TanuloElorehaladasListRelationFilter
    TanuloElorehaladasV?: TanuloElorehaladasListRelationFilter
  }

  export type FelhasznalokOrderByWithRelationInput = {
    felhasznalo_id?: SortOrder
    vezeteknev?: SortOrder
    keresztnev?: SortOrder
    email?: SortOrder
    jelszo?: SortOrder
    bankszamla?: SortOrder
    jogkor_id?: SortOrder
    Jogkorok?: JogkorokOrderByWithRelationInput
    Orarend?: OrarendOrderByRelationAggregateInput
    Vizsgak?: VizsgakOrderByRelationAggregateInput
    TanuloElorehaladas?: TanuloElorehaladasOrderByRelationAggregateInput
    TanuloElorehaladasV?: TanuloElorehaladasOrderByRelationAggregateInput
  }

  export type FelhasznalokWhereUniqueInput = Prisma.AtLeast<{
    felhasznalo_id?: number
    email?: string
    AND?: FelhasznalokWhereInput | FelhasznalokWhereInput[]
    OR?: FelhasznalokWhereInput[]
    NOT?: FelhasznalokWhereInput | FelhasznalokWhereInput[]
    vezeteknev?: StringFilter<"Felhasznalok"> | string
    keresztnev?: StringFilter<"Felhasznalok"> | string
    jelszo?: StringFilter<"Felhasznalok"> | string
    bankszamla?: StringFilter<"Felhasznalok"> | string
    jogkor_id?: IntFilter<"Felhasznalok"> | number
    Jogkorok?: XOR<JogkorokRelationFilter, JogkorokWhereInput>
    Orarend?: OrarendListRelationFilter
    Vizsgak?: VizsgakListRelationFilter
    TanuloElorehaladas?: TanuloElorehaladasListRelationFilter
    TanuloElorehaladasV?: TanuloElorehaladasListRelationFilter
  }, "felhasznalo_id" | "email">

  export type FelhasznalokOrderByWithAggregationInput = {
    felhasznalo_id?: SortOrder
    vezeteknev?: SortOrder
    keresztnev?: SortOrder
    email?: SortOrder
    jelszo?: SortOrder
    bankszamla?: SortOrder
    jogkor_id?: SortOrder
    _count?: FelhasznalokCountOrderByAggregateInput
    _avg?: FelhasznalokAvgOrderByAggregateInput
    _max?: FelhasznalokMaxOrderByAggregateInput
    _min?: FelhasznalokMinOrderByAggregateInput
    _sum?: FelhasznalokSumOrderByAggregateInput
  }

  export type FelhasznalokScalarWhereWithAggregatesInput = {
    AND?: FelhasznalokScalarWhereWithAggregatesInput | FelhasznalokScalarWhereWithAggregatesInput[]
    OR?: FelhasznalokScalarWhereWithAggregatesInput[]
    NOT?: FelhasznalokScalarWhereWithAggregatesInput | FelhasznalokScalarWhereWithAggregatesInput[]
    felhasznalo_id?: IntWithAggregatesFilter<"Felhasznalok"> | number
    vezeteknev?: StringWithAggregatesFilter<"Felhasznalok"> | string
    keresztnev?: StringWithAggregatesFilter<"Felhasznalok"> | string
    email?: StringWithAggregatesFilter<"Felhasznalok"> | string
    jelszo?: StringWithAggregatesFilter<"Felhasznalok"> | string
    bankszamla?: StringWithAggregatesFilter<"Felhasznalok"> | string
    jogkor_id?: IntWithAggregatesFilter<"Felhasznalok"> | number
  }

  export type JogkorokWhereInput = {
    AND?: JogkorokWhereInput | JogkorokWhereInput[]
    OR?: JogkorokWhereInput[]
    NOT?: JogkorokWhereInput | JogkorokWhereInput[]
    jogkor_id?: IntFilter<"Jogkorok"> | number
    jogkor?: IntFilter<"Jogkorok"> | number
    Felhasznalok?: FelhasznalokListRelationFilter
  }

  export type JogkorokOrderByWithRelationInput = {
    jogkor_id?: SortOrder
    jogkor?: SortOrder
    Felhasznalok?: FelhasznalokOrderByRelationAggregateInput
  }

  export type JogkorokWhereUniqueInput = Prisma.AtLeast<{
    jogkor_id?: number
    AND?: JogkorokWhereInput | JogkorokWhereInput[]
    OR?: JogkorokWhereInput[]
    NOT?: JogkorokWhereInput | JogkorokWhereInput[]
    jogkor?: IntFilter<"Jogkorok"> | number
    Felhasznalok?: FelhasznalokListRelationFilter
  }, "jogkor_id">

  export type JogkorokOrderByWithAggregationInput = {
    jogkor_id?: SortOrder
    jogkor?: SortOrder
    _count?: JogkorokCountOrderByAggregateInput
    _avg?: JogkorokAvgOrderByAggregateInput
    _max?: JogkorokMaxOrderByAggregateInput
    _min?: JogkorokMinOrderByAggregateInput
    _sum?: JogkorokSumOrderByAggregateInput
  }

  export type JogkorokScalarWhereWithAggregatesInput = {
    AND?: JogkorokScalarWhereWithAggregatesInput | JogkorokScalarWhereWithAggregatesInput[]
    OR?: JogkorokScalarWhereWithAggregatesInput[]
    NOT?: JogkorokScalarWhereWithAggregatesInput | JogkorokScalarWhereWithAggregatesInput[]
    jogkor_id?: IntWithAggregatesFilter<"Jogkorok"> | number
    jogkor?: IntWithAggregatesFilter<"Jogkorok"> | number
  }

  export type KifizetesekWhereInput = {
    AND?: KifizetesekWhereInput | KifizetesekWhereInput[]
    OR?: KifizetesekWhereInput[]
    NOT?: KifizetesekWhereInput | KifizetesekWhereInput[]
    kifizetes_id?: IntFilter<"Kifizetesek"> | number
    elorehaladas_id?: IntFilter<"Kifizetesek"> | number
    targy?: StringFilter<"Kifizetesek"> | string
    osszeg?: IntFilter<"Kifizetesek"> | number
    kifizetve?: BoolFilter<"Kifizetesek"> | boolean
    TanuloElorehaladas?: XOR<TanuloElorehaladasRelationFilter, TanuloElorehaladasWhereInput>
  }

  export type KifizetesekOrderByWithRelationInput = {
    kifizetes_id?: SortOrder
    elorehaladas_id?: SortOrder
    targy?: SortOrder
    osszeg?: SortOrder
    kifizetve?: SortOrder
    TanuloElorehaladas?: TanuloElorehaladasOrderByWithRelationInput
  }

  export type KifizetesekWhereUniqueInput = Prisma.AtLeast<{
    kifizetes_id?: number
    AND?: KifizetesekWhereInput | KifizetesekWhereInput[]
    OR?: KifizetesekWhereInput[]
    NOT?: KifizetesekWhereInput | KifizetesekWhereInput[]
    elorehaladas_id?: IntFilter<"Kifizetesek"> | number
    targy?: StringFilter<"Kifizetesek"> | string
    osszeg?: IntFilter<"Kifizetesek"> | number
    kifizetve?: BoolFilter<"Kifizetesek"> | boolean
    TanuloElorehaladas?: XOR<TanuloElorehaladasRelationFilter, TanuloElorehaladasWhereInput>
  }, "kifizetes_id">

  export type KifizetesekOrderByWithAggregationInput = {
    kifizetes_id?: SortOrder
    elorehaladas_id?: SortOrder
    targy?: SortOrder
    osszeg?: SortOrder
    kifizetve?: SortOrder
    _count?: KifizetesekCountOrderByAggregateInput
    _avg?: KifizetesekAvgOrderByAggregateInput
    _max?: KifizetesekMaxOrderByAggregateInput
    _min?: KifizetesekMinOrderByAggregateInput
    _sum?: KifizetesekSumOrderByAggregateInput
  }

  export type KifizetesekScalarWhereWithAggregatesInput = {
    AND?: KifizetesekScalarWhereWithAggregatesInput | KifizetesekScalarWhereWithAggregatesInput[]
    OR?: KifizetesekScalarWhereWithAggregatesInput[]
    NOT?: KifizetesekScalarWhereWithAggregatesInput | KifizetesekScalarWhereWithAggregatesInput[]
    kifizetes_id?: IntWithAggregatesFilter<"Kifizetesek"> | number
    elorehaladas_id?: IntWithAggregatesFilter<"Kifizetesek"> | number
    targy?: StringWithAggregatesFilter<"Kifizetesek"> | string
    osszeg?: IntWithAggregatesFilter<"Kifizetesek"> | number
    kifizetve?: BoolWithAggregatesFilter<"Kifizetesek"> | boolean
  }

  export type OrakWhereInput = {
    AND?: OrakWhereInput | OrakWhereInput[]
    OR?: OrakWhereInput[]
    NOT?: OrakWhereInput | OrakWhereInput[]
    ora_id?: IntFilter<"Orak"> | number
    idopont_eleje?: DateTimeFilter<"Orak"> | Date | string
    idopont_vege?: DateTimeFilter<"Orak"> | Date | string
    cim?: StringNullableFilter<"Orak"> | string | null
    helyszin?: StringNullableFilter<"Orak"> | string | null
    Orarend?: OrarendListRelationFilter
  }

  export type OrakOrderByWithRelationInput = {
    ora_id?: SortOrder
    idopont_eleje?: SortOrder
    idopont_vege?: SortOrder
    cim?: SortOrderInput | SortOrder
    helyszin?: SortOrderInput | SortOrder
    Orarend?: OrarendOrderByRelationAggregateInput
  }

  export type OrakWhereUniqueInput = Prisma.AtLeast<{
    ora_id?: number
    AND?: OrakWhereInput | OrakWhereInput[]
    OR?: OrakWhereInput[]
    NOT?: OrakWhereInput | OrakWhereInput[]
    idopont_eleje?: DateTimeFilter<"Orak"> | Date | string
    idopont_vege?: DateTimeFilter<"Orak"> | Date | string
    cim?: StringNullableFilter<"Orak"> | string | null
    helyszin?: StringNullableFilter<"Orak"> | string | null
    Orarend?: OrarendListRelationFilter
  }, "ora_id">

  export type OrakOrderByWithAggregationInput = {
    ora_id?: SortOrder
    idopont_eleje?: SortOrder
    idopont_vege?: SortOrder
    cim?: SortOrderInput | SortOrder
    helyszin?: SortOrderInput | SortOrder
    _count?: OrakCountOrderByAggregateInput
    _avg?: OrakAvgOrderByAggregateInput
    _max?: OrakMaxOrderByAggregateInput
    _min?: OrakMinOrderByAggregateInput
    _sum?: OrakSumOrderByAggregateInput
  }

  export type OrakScalarWhereWithAggregatesInput = {
    AND?: OrakScalarWhereWithAggregatesInput | OrakScalarWhereWithAggregatesInput[]
    OR?: OrakScalarWhereWithAggregatesInput[]
    NOT?: OrakScalarWhereWithAggregatesInput | OrakScalarWhereWithAggregatesInput[]
    ora_id?: IntWithAggregatesFilter<"Orak"> | number
    idopont_eleje?: DateTimeWithAggregatesFilter<"Orak"> | Date | string
    idopont_vege?: DateTimeWithAggregatesFilter<"Orak"> | Date | string
    cim?: StringNullableWithAggregatesFilter<"Orak"> | string | null
    helyszin?: StringNullableWithAggregatesFilter<"Orak"> | string | null
  }

  export type OrarendWhereInput = {
    AND?: OrarendWhereInput | OrarendWhereInput[]
    OR?: OrarendWhereInput[]
    NOT?: OrarendWhereInput | OrarendWhereInput[]
    orarend_id?: IntFilter<"Orarend"> | number
    ora_id?: IntFilter<"Orarend"> | number
    felhasznalo_id?: IntFilter<"Orarend"> | number
    Felhasznalok?: XOR<FelhasznalokRelationFilter, FelhasznalokWhereInput>
    Orak?: XOR<OrakRelationFilter, OrakWhereInput>
  }

  export type OrarendOrderByWithRelationInput = {
    orarend_id?: SortOrder
    ora_id?: SortOrder
    felhasznalo_id?: SortOrder
    Felhasznalok?: FelhasznalokOrderByWithRelationInput
    Orak?: OrakOrderByWithRelationInput
  }

  export type OrarendWhereUniqueInput = Prisma.AtLeast<{
    orarend_id?: number
    AND?: OrarendWhereInput | OrarendWhereInput[]
    OR?: OrarendWhereInput[]
    NOT?: OrarendWhereInput | OrarendWhereInput[]
    ora_id?: IntFilter<"Orarend"> | number
    felhasznalo_id?: IntFilter<"Orarend"> | number
    Felhasznalok?: XOR<FelhasznalokRelationFilter, FelhasznalokWhereInput>
    Orak?: XOR<OrakRelationFilter, OrakWhereInput>
  }, "orarend_id">

  export type OrarendOrderByWithAggregationInput = {
    orarend_id?: SortOrder
    ora_id?: SortOrder
    felhasznalo_id?: SortOrder
    _count?: OrarendCountOrderByAggregateInput
    _avg?: OrarendAvgOrderByAggregateInput
    _max?: OrarendMaxOrderByAggregateInput
    _min?: OrarendMinOrderByAggregateInput
    _sum?: OrarendSumOrderByAggregateInput
  }

  export type OrarendScalarWhereWithAggregatesInput = {
    AND?: OrarendScalarWhereWithAggregatesInput | OrarendScalarWhereWithAggregatesInput[]
    OR?: OrarendScalarWhereWithAggregatesInput[]
    NOT?: OrarendScalarWhereWithAggregatesInput | OrarendScalarWhereWithAggregatesInput[]
    orarend_id?: IntWithAggregatesFilter<"Orarend"> | number
    ora_id?: IntWithAggregatesFilter<"Orarend"> | number
    felhasznalo_id?: IntWithAggregatesFilter<"Orarend"> | number
  }

  export type TanuloElorehaladasWhereInput = {
    AND?: TanuloElorehaladasWhereInput | TanuloElorehaladasWhereInput[]
    OR?: TanuloElorehaladasWhereInput[]
    NOT?: TanuloElorehaladasWhereInput | TanuloElorehaladasWhereInput[]
    elorehaladas_id?: IntFilter<"TanuloElorehaladas"> | number
    tanulo_id?: IntFilter<"TanuloElorehaladas"> | number
    oktato_id?: IntFilter<"TanuloElorehaladas"> | number
    levezetett_orak?: IntFilter<"TanuloElorehaladas"> | number
    Kifizetesek?: KifizetesekListRelationFilter
    FelhasznalokTanulo?: XOR<FelhasznalokRelationFilter, FelhasznalokWhereInput>
    FelhasznalokOktato?: XOR<FelhasznalokRelationFilter, FelhasznalokWhereInput>
    Vizsgajelentkezes?: VizsgajelentkezesListRelationFilter
  }

  export type TanuloElorehaladasOrderByWithRelationInput = {
    elorehaladas_id?: SortOrder
    tanulo_id?: SortOrder
    oktato_id?: SortOrder
    levezetett_orak?: SortOrder
    Kifizetesek?: KifizetesekOrderByRelationAggregateInput
    FelhasznalokTanulo?: FelhasznalokOrderByWithRelationInput
    FelhasznalokOktato?: FelhasznalokOrderByWithRelationInput
    Vizsgajelentkezes?: VizsgajelentkezesOrderByRelationAggregateInput
  }

  export type TanuloElorehaladasWhereUniqueInput = Prisma.AtLeast<{
    elorehaladas_id?: number
    AND?: TanuloElorehaladasWhereInput | TanuloElorehaladasWhereInput[]
    OR?: TanuloElorehaladasWhereInput[]
    NOT?: TanuloElorehaladasWhereInput | TanuloElorehaladasWhereInput[]
    tanulo_id?: IntFilter<"TanuloElorehaladas"> | number
    oktato_id?: IntFilter<"TanuloElorehaladas"> | number
    levezetett_orak?: IntFilter<"TanuloElorehaladas"> | number
    Kifizetesek?: KifizetesekListRelationFilter
    FelhasznalokTanulo?: XOR<FelhasznalokRelationFilter, FelhasznalokWhereInput>
    FelhasznalokOktato?: XOR<FelhasznalokRelationFilter, FelhasznalokWhereInput>
    Vizsgajelentkezes?: VizsgajelentkezesListRelationFilter
  }, "elorehaladas_id">

  export type TanuloElorehaladasOrderByWithAggregationInput = {
    elorehaladas_id?: SortOrder
    tanulo_id?: SortOrder
    oktato_id?: SortOrder
    levezetett_orak?: SortOrder
    _count?: TanuloElorehaladasCountOrderByAggregateInput
    _avg?: TanuloElorehaladasAvgOrderByAggregateInput
    _max?: TanuloElorehaladasMaxOrderByAggregateInput
    _min?: TanuloElorehaladasMinOrderByAggregateInput
    _sum?: TanuloElorehaladasSumOrderByAggregateInput
  }

  export type TanuloElorehaladasScalarWhereWithAggregatesInput = {
    AND?: TanuloElorehaladasScalarWhereWithAggregatesInput | TanuloElorehaladasScalarWhereWithAggregatesInput[]
    OR?: TanuloElorehaladasScalarWhereWithAggregatesInput[]
    NOT?: TanuloElorehaladasScalarWhereWithAggregatesInput | TanuloElorehaladasScalarWhereWithAggregatesInput[]
    elorehaladas_id?: IntWithAggregatesFilter<"TanuloElorehaladas"> | number
    tanulo_id?: IntWithAggregatesFilter<"TanuloElorehaladas"> | number
    oktato_id?: IntWithAggregatesFilter<"TanuloElorehaladas"> | number
    levezetett_orak?: IntWithAggregatesFilter<"TanuloElorehaladas"> | number
  }

  export type VizsgajelentkezesWhereInput = {
    AND?: VizsgajelentkezesWhereInput | VizsgajelentkezesWhereInput[]
    OR?: VizsgajelentkezesWhereInput[]
    NOT?: VizsgajelentkezesWhereInput | VizsgajelentkezesWhereInput[]
    vizsgajelentkezes_id?: IntFilter<"Vizsgajelentkezes"> | number
    tanulo_elorehaladas_id?: IntFilter<"Vizsgajelentkezes"> | number
    vizsga_id?: IntFilter<"Vizsgajelentkezes"> | number
    oktato_jovahagyas?: BoolFilter<"Vizsgajelentkezes"> | boolean
    TanuloElorehaladasV?: XOR<TanuloElorehaladasRelationFilter, TanuloElorehaladasWhereInput>
    Vizsgak?: XOR<VizsgakRelationFilter, VizsgakWhereInput>
  }

  export type VizsgajelentkezesOrderByWithRelationInput = {
    vizsgajelentkezes_id?: SortOrder
    tanulo_elorehaladas_id?: SortOrder
    vizsga_id?: SortOrder
    oktato_jovahagyas?: SortOrder
    TanuloElorehaladasV?: TanuloElorehaladasOrderByWithRelationInput
    Vizsgak?: VizsgakOrderByWithRelationInput
  }

  export type VizsgajelentkezesWhereUniqueInput = Prisma.AtLeast<{
    vizsgajelentkezes_id?: number
    AND?: VizsgajelentkezesWhereInput | VizsgajelentkezesWhereInput[]
    OR?: VizsgajelentkezesWhereInput[]
    NOT?: VizsgajelentkezesWhereInput | VizsgajelentkezesWhereInput[]
    tanulo_elorehaladas_id?: IntFilter<"Vizsgajelentkezes"> | number
    vizsga_id?: IntFilter<"Vizsgajelentkezes"> | number
    oktato_jovahagyas?: BoolFilter<"Vizsgajelentkezes"> | boolean
    TanuloElorehaladasV?: XOR<TanuloElorehaladasRelationFilter, TanuloElorehaladasWhereInput>
    Vizsgak?: XOR<VizsgakRelationFilter, VizsgakWhereInput>
  }, "vizsgajelentkezes_id">

  export type VizsgajelentkezesOrderByWithAggregationInput = {
    vizsgajelentkezes_id?: SortOrder
    tanulo_elorehaladas_id?: SortOrder
    vizsga_id?: SortOrder
    oktato_jovahagyas?: SortOrder
    _count?: VizsgajelentkezesCountOrderByAggregateInput
    _avg?: VizsgajelentkezesAvgOrderByAggregateInput
    _max?: VizsgajelentkezesMaxOrderByAggregateInput
    _min?: VizsgajelentkezesMinOrderByAggregateInput
    _sum?: VizsgajelentkezesSumOrderByAggregateInput
  }

  export type VizsgajelentkezesScalarWhereWithAggregatesInput = {
    AND?: VizsgajelentkezesScalarWhereWithAggregatesInput | VizsgajelentkezesScalarWhereWithAggregatesInput[]
    OR?: VizsgajelentkezesScalarWhereWithAggregatesInput[]
    NOT?: VizsgajelentkezesScalarWhereWithAggregatesInput | VizsgajelentkezesScalarWhereWithAggregatesInput[]
    vizsgajelentkezes_id?: IntWithAggregatesFilter<"Vizsgajelentkezes"> | number
    tanulo_elorehaladas_id?: IntWithAggregatesFilter<"Vizsgajelentkezes"> | number
    vizsga_id?: IntWithAggregatesFilter<"Vizsgajelentkezes"> | number
    oktato_jovahagyas?: BoolWithAggregatesFilter<"Vizsgajelentkezes"> | boolean
  }

  export type VizsgakWhereInput = {
    AND?: VizsgakWhereInput | VizsgakWhereInput[]
    OR?: VizsgakWhereInput[]
    NOT?: VizsgakWhereInput | VizsgakWhereInput[]
    vizsga_id?: IntFilter<"Vizsgak"> | number
    vizsgabiztos_id?: IntNullableFilter<"Vizsgak"> | number | null
    vizsga_datuma?: DateTimeFilter<"Vizsgak"> | Date | string
    tipus_id?: IntFilter<"Vizsgak"> | number
    sikeres?: BoolFilter<"Vizsgak"> | boolean
    Felhasznalok?: XOR<FelhasznalokNullableRelationFilter, FelhasznalokWhereInput> | null
    VizsgaTipus?: XOR<VizsgaTipusRelationFilter, VizsgaTipusWhereInput>
    Vizsgajelentkezes?: VizsgajelentkezesListRelationFilter
  }

  export type VizsgakOrderByWithRelationInput = {
    vizsga_id?: SortOrder
    vizsgabiztos_id?: SortOrderInput | SortOrder
    vizsga_datuma?: SortOrder
    tipus_id?: SortOrder
    sikeres?: SortOrder
    Felhasznalok?: FelhasznalokOrderByWithRelationInput
    VizsgaTipus?: VizsgaTipusOrderByWithRelationInput
    Vizsgajelentkezes?: VizsgajelentkezesOrderByRelationAggregateInput
  }

  export type VizsgakWhereUniqueInput = Prisma.AtLeast<{
    vizsga_id?: number
    AND?: VizsgakWhereInput | VizsgakWhereInput[]
    OR?: VizsgakWhereInput[]
    NOT?: VizsgakWhereInput | VizsgakWhereInput[]
    vizsgabiztos_id?: IntNullableFilter<"Vizsgak"> | number | null
    vizsga_datuma?: DateTimeFilter<"Vizsgak"> | Date | string
    tipus_id?: IntFilter<"Vizsgak"> | number
    sikeres?: BoolFilter<"Vizsgak"> | boolean
    Felhasznalok?: XOR<FelhasznalokNullableRelationFilter, FelhasznalokWhereInput> | null
    VizsgaTipus?: XOR<VizsgaTipusRelationFilter, VizsgaTipusWhereInput>
    Vizsgajelentkezes?: VizsgajelentkezesListRelationFilter
  }, "vizsga_id">

  export type VizsgakOrderByWithAggregationInput = {
    vizsga_id?: SortOrder
    vizsgabiztos_id?: SortOrderInput | SortOrder
    vizsga_datuma?: SortOrder
    tipus_id?: SortOrder
    sikeres?: SortOrder
    _count?: VizsgakCountOrderByAggregateInput
    _avg?: VizsgakAvgOrderByAggregateInput
    _max?: VizsgakMaxOrderByAggregateInput
    _min?: VizsgakMinOrderByAggregateInput
    _sum?: VizsgakSumOrderByAggregateInput
  }

  export type VizsgakScalarWhereWithAggregatesInput = {
    AND?: VizsgakScalarWhereWithAggregatesInput | VizsgakScalarWhereWithAggregatesInput[]
    OR?: VizsgakScalarWhereWithAggregatesInput[]
    NOT?: VizsgakScalarWhereWithAggregatesInput | VizsgakScalarWhereWithAggregatesInput[]
    vizsga_id?: IntWithAggregatesFilter<"Vizsgak"> | number
    vizsgabiztos_id?: IntNullableWithAggregatesFilter<"Vizsgak"> | number | null
    vizsga_datuma?: DateTimeWithAggregatesFilter<"Vizsgak"> | Date | string
    tipus_id?: IntWithAggregatesFilter<"Vizsgak"> | number
    sikeres?: BoolWithAggregatesFilter<"Vizsgak"> | boolean
  }

  export type VizsgaTipusWhereInput = {
    AND?: VizsgaTipusWhereInput | VizsgaTipusWhereInput[]
    OR?: VizsgaTipusWhereInput[]
    NOT?: VizsgaTipusWhereInput | VizsgaTipusWhereInput[]
    vizsga_tipus_id?: IntFilter<"VizsgaTipus"> | number
    tipus?: StringFilter<"VizsgaTipus"> | string
    Vizsgak?: VizsgakListRelationFilter
  }

  export type VizsgaTipusOrderByWithRelationInput = {
    vizsga_tipus_id?: SortOrder
    tipus?: SortOrder
    Vizsgak?: VizsgakOrderByRelationAggregateInput
  }

  export type VizsgaTipusWhereUniqueInput = Prisma.AtLeast<{
    vizsga_tipus_id?: number
    AND?: VizsgaTipusWhereInput | VizsgaTipusWhereInput[]
    OR?: VizsgaTipusWhereInput[]
    NOT?: VizsgaTipusWhereInput | VizsgaTipusWhereInput[]
    tipus?: StringFilter<"VizsgaTipus"> | string
    Vizsgak?: VizsgakListRelationFilter
  }, "vizsga_tipus_id">

  export type VizsgaTipusOrderByWithAggregationInput = {
    vizsga_tipus_id?: SortOrder
    tipus?: SortOrder
    _count?: VizsgaTipusCountOrderByAggregateInput
    _avg?: VizsgaTipusAvgOrderByAggregateInput
    _max?: VizsgaTipusMaxOrderByAggregateInput
    _min?: VizsgaTipusMinOrderByAggregateInput
    _sum?: VizsgaTipusSumOrderByAggregateInput
  }

  export type VizsgaTipusScalarWhereWithAggregatesInput = {
    AND?: VizsgaTipusScalarWhereWithAggregatesInput | VizsgaTipusScalarWhereWithAggregatesInput[]
    OR?: VizsgaTipusScalarWhereWithAggregatesInput[]
    NOT?: VizsgaTipusScalarWhereWithAggregatesInput | VizsgaTipusScalarWhereWithAggregatesInput[]
    vizsga_tipus_id?: IntWithAggregatesFilter<"VizsgaTipus"> | number
    tipus?: StringWithAggregatesFilter<"VizsgaTipus"> | string
  }

  export type FelhasznalokCreateInput = {
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    Jogkorok: JogkorokCreateNestedOneWithoutFelhasznalokInput
    Orarend?: OrarendCreateNestedManyWithoutFelhasznalokInput
    Vizsgak?: VizsgakCreateNestedManyWithoutFelhasznalokInput
    TanuloElorehaladas?: TanuloElorehaladasCreateNestedManyWithoutFelhasznalokTanuloInput
    TanuloElorehaladasV?: TanuloElorehaladasCreateNestedManyWithoutFelhasznalokOktatoInput
  }

  export type FelhasznalokUncheckedCreateInput = {
    felhasznalo_id?: number
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    jogkor_id: number
    Orarend?: OrarendUncheckedCreateNestedManyWithoutFelhasznalokInput
    Vizsgak?: VizsgakUncheckedCreateNestedManyWithoutFelhasznalokInput
    TanuloElorehaladas?: TanuloElorehaladasUncheckedCreateNestedManyWithoutFelhasznalokTanuloInput
    TanuloElorehaladasV?: TanuloElorehaladasUncheckedCreateNestedManyWithoutFelhasznalokOktatoInput
  }

  export type FelhasznalokUpdateInput = {
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
    Jogkorok?: JogkorokUpdateOneRequiredWithoutFelhasznalokNestedInput
    Orarend?: OrarendUpdateManyWithoutFelhasznalokNestedInput
    Vizsgak?: VizsgakUpdateManyWithoutFelhasznalokNestedInput
    TanuloElorehaladas?: TanuloElorehaladasUpdateManyWithoutFelhasznalokTanuloNestedInput
    TanuloElorehaladasV?: TanuloElorehaladasUpdateManyWithoutFelhasznalokOktatoNestedInput
  }

  export type FelhasznalokUncheckedUpdateInput = {
    felhasznalo_id?: IntFieldUpdateOperationsInput | number
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
    jogkor_id?: IntFieldUpdateOperationsInput | number
    Orarend?: OrarendUncheckedUpdateManyWithoutFelhasznalokNestedInput
    Vizsgak?: VizsgakUncheckedUpdateManyWithoutFelhasznalokNestedInput
    TanuloElorehaladas?: TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokTanuloNestedInput
    TanuloElorehaladasV?: TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokOktatoNestedInput
  }

  export type FelhasznalokCreateManyInput = {
    felhasznalo_id?: number
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    jogkor_id: number
  }

  export type FelhasznalokUpdateManyMutationInput = {
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
  }

  export type FelhasznalokUncheckedUpdateManyInput = {
    felhasznalo_id?: IntFieldUpdateOperationsInput | number
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
    jogkor_id?: IntFieldUpdateOperationsInput | number
  }

  export type JogkorokCreateInput = {
    jogkor: number
    Felhasznalok?: FelhasznalokCreateNestedManyWithoutJogkorokInput
  }

  export type JogkorokUncheckedCreateInput = {
    jogkor_id?: number
    jogkor: number
    Felhasznalok?: FelhasznalokUncheckedCreateNestedManyWithoutJogkorokInput
  }

  export type JogkorokUpdateInput = {
    jogkor?: IntFieldUpdateOperationsInput | number
    Felhasznalok?: FelhasznalokUpdateManyWithoutJogkorokNestedInput
  }

  export type JogkorokUncheckedUpdateInput = {
    jogkor_id?: IntFieldUpdateOperationsInput | number
    jogkor?: IntFieldUpdateOperationsInput | number
    Felhasznalok?: FelhasznalokUncheckedUpdateManyWithoutJogkorokNestedInput
  }

  export type JogkorokCreateManyInput = {
    jogkor_id?: number
    jogkor: number
  }

  export type JogkorokUpdateManyMutationInput = {
    jogkor?: IntFieldUpdateOperationsInput | number
  }

  export type JogkorokUncheckedUpdateManyInput = {
    jogkor_id?: IntFieldUpdateOperationsInput | number
    jogkor?: IntFieldUpdateOperationsInput | number
  }

  export type KifizetesekCreateInput = {
    targy: string
    osszeg: number
    kifizetve?: boolean
    TanuloElorehaladas: TanuloElorehaladasCreateNestedOneWithoutKifizetesekInput
  }

  export type KifizetesekUncheckedCreateInput = {
    kifizetes_id?: number
    elorehaladas_id: number
    targy: string
    osszeg: number
    kifizetve?: boolean
  }

  export type KifizetesekUpdateInput = {
    targy?: StringFieldUpdateOperationsInput | string
    osszeg?: IntFieldUpdateOperationsInput | number
    kifizetve?: BoolFieldUpdateOperationsInput | boolean
    TanuloElorehaladas?: TanuloElorehaladasUpdateOneRequiredWithoutKifizetesekNestedInput
  }

  export type KifizetesekUncheckedUpdateInput = {
    kifizetes_id?: IntFieldUpdateOperationsInput | number
    elorehaladas_id?: IntFieldUpdateOperationsInput | number
    targy?: StringFieldUpdateOperationsInput | string
    osszeg?: IntFieldUpdateOperationsInput | number
    kifizetve?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KifizetesekCreateManyInput = {
    kifizetes_id?: number
    elorehaladas_id: number
    targy: string
    osszeg: number
    kifizetve?: boolean
  }

  export type KifizetesekUpdateManyMutationInput = {
    targy?: StringFieldUpdateOperationsInput | string
    osszeg?: IntFieldUpdateOperationsInput | number
    kifizetve?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KifizetesekUncheckedUpdateManyInput = {
    kifizetes_id?: IntFieldUpdateOperationsInput | number
    elorehaladas_id?: IntFieldUpdateOperationsInput | number
    targy?: StringFieldUpdateOperationsInput | string
    osszeg?: IntFieldUpdateOperationsInput | number
    kifizetve?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OrakCreateInput = {
    idopont_eleje: Date | string
    idopont_vege: Date | string
    cim?: string | null
    helyszin?: string | null
    Orarend?: OrarendCreateNestedManyWithoutOrakInput
  }

  export type OrakUncheckedCreateInput = {
    ora_id?: number
    idopont_eleje: Date | string
    idopont_vege: Date | string
    cim?: string | null
    helyszin?: string | null
    Orarend?: OrarendUncheckedCreateNestedManyWithoutOrakInput
  }

  export type OrakUpdateInput = {
    idopont_eleje?: DateTimeFieldUpdateOperationsInput | Date | string
    idopont_vege?: DateTimeFieldUpdateOperationsInput | Date | string
    cim?: NullableStringFieldUpdateOperationsInput | string | null
    helyszin?: NullableStringFieldUpdateOperationsInput | string | null
    Orarend?: OrarendUpdateManyWithoutOrakNestedInput
  }

  export type OrakUncheckedUpdateInput = {
    ora_id?: IntFieldUpdateOperationsInput | number
    idopont_eleje?: DateTimeFieldUpdateOperationsInput | Date | string
    idopont_vege?: DateTimeFieldUpdateOperationsInput | Date | string
    cim?: NullableStringFieldUpdateOperationsInput | string | null
    helyszin?: NullableStringFieldUpdateOperationsInput | string | null
    Orarend?: OrarendUncheckedUpdateManyWithoutOrakNestedInput
  }

  export type OrakCreateManyInput = {
    ora_id?: number
    idopont_eleje: Date | string
    idopont_vege: Date | string
    cim?: string | null
    helyszin?: string | null
  }

  export type OrakUpdateManyMutationInput = {
    idopont_eleje?: DateTimeFieldUpdateOperationsInput | Date | string
    idopont_vege?: DateTimeFieldUpdateOperationsInput | Date | string
    cim?: NullableStringFieldUpdateOperationsInput | string | null
    helyszin?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrakUncheckedUpdateManyInput = {
    ora_id?: IntFieldUpdateOperationsInput | number
    idopont_eleje?: DateTimeFieldUpdateOperationsInput | Date | string
    idopont_vege?: DateTimeFieldUpdateOperationsInput | Date | string
    cim?: NullableStringFieldUpdateOperationsInput | string | null
    helyszin?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrarendCreateInput = {
    Felhasznalok: FelhasznalokCreateNestedOneWithoutOrarendInput
    Orak: OrakCreateNestedOneWithoutOrarendInput
  }

  export type OrarendUncheckedCreateInput = {
    orarend_id?: number
    ora_id: number
    felhasznalo_id: number
  }

  export type OrarendUpdateInput = {
    Felhasznalok?: FelhasznalokUpdateOneRequiredWithoutOrarendNestedInput
    Orak?: OrakUpdateOneRequiredWithoutOrarendNestedInput
  }

  export type OrarendUncheckedUpdateInput = {
    orarend_id?: IntFieldUpdateOperationsInput | number
    ora_id?: IntFieldUpdateOperationsInput | number
    felhasznalo_id?: IntFieldUpdateOperationsInput | number
  }

  export type OrarendCreateManyInput = {
    orarend_id?: number
    ora_id: number
    felhasznalo_id: number
  }

  export type OrarendUpdateManyMutationInput = {

  }

  export type OrarendUncheckedUpdateManyInput = {
    orarend_id?: IntFieldUpdateOperationsInput | number
    ora_id?: IntFieldUpdateOperationsInput | number
    felhasznalo_id?: IntFieldUpdateOperationsInput | number
  }

  export type TanuloElorehaladasCreateInput = {
    levezetett_orak?: number
    Kifizetesek?: KifizetesekCreateNestedManyWithoutTanuloElorehaladasInput
    FelhasznalokTanulo: FelhasznalokCreateNestedOneWithoutTanuloElorehaladasInput
    FelhasznalokOktato: FelhasznalokCreateNestedOneWithoutTanuloElorehaladasVInput
    Vizsgajelentkezes?: VizsgajelentkezesCreateNestedManyWithoutTanuloElorehaladasVInput
  }

  export type TanuloElorehaladasUncheckedCreateInput = {
    elorehaladas_id?: number
    tanulo_id: number
    oktato_id: number
    levezetett_orak?: number
    Kifizetesek?: KifizetesekUncheckedCreateNestedManyWithoutTanuloElorehaladasInput
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedCreateNestedManyWithoutTanuloElorehaladasVInput
  }

  export type TanuloElorehaladasUpdateInput = {
    levezetett_orak?: IntFieldUpdateOperationsInput | number
    Kifizetesek?: KifizetesekUpdateManyWithoutTanuloElorehaladasNestedInput
    FelhasznalokTanulo?: FelhasznalokUpdateOneRequiredWithoutTanuloElorehaladasNestedInput
    FelhasznalokOktato?: FelhasznalokUpdateOneRequiredWithoutTanuloElorehaladasVNestedInput
    Vizsgajelentkezes?: VizsgajelentkezesUpdateManyWithoutTanuloElorehaladasVNestedInput
  }

  export type TanuloElorehaladasUncheckedUpdateInput = {
    elorehaladas_id?: IntFieldUpdateOperationsInput | number
    tanulo_id?: IntFieldUpdateOperationsInput | number
    oktato_id?: IntFieldUpdateOperationsInput | number
    levezetett_orak?: IntFieldUpdateOperationsInput | number
    Kifizetesek?: KifizetesekUncheckedUpdateManyWithoutTanuloElorehaladasNestedInput
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedUpdateManyWithoutTanuloElorehaladasVNestedInput
  }

  export type TanuloElorehaladasCreateManyInput = {
    elorehaladas_id?: number
    tanulo_id: number
    oktato_id: number
    levezetett_orak?: number
  }

  export type TanuloElorehaladasUpdateManyMutationInput = {
    levezetett_orak?: IntFieldUpdateOperationsInput | number
  }

  export type TanuloElorehaladasUncheckedUpdateManyInput = {
    elorehaladas_id?: IntFieldUpdateOperationsInput | number
    tanulo_id?: IntFieldUpdateOperationsInput | number
    oktato_id?: IntFieldUpdateOperationsInput | number
    levezetett_orak?: IntFieldUpdateOperationsInput | number
  }

  export type VizsgajelentkezesCreateInput = {
    oktato_jovahagyas?: boolean
    TanuloElorehaladasV: TanuloElorehaladasCreateNestedOneWithoutVizsgajelentkezesInput
    Vizsgak: VizsgakCreateNestedOneWithoutVizsgajelentkezesInput
  }

  export type VizsgajelentkezesUncheckedCreateInput = {
    vizsgajelentkezes_id?: number
    tanulo_elorehaladas_id: number
    vizsga_id: number
    oktato_jovahagyas?: boolean
  }

  export type VizsgajelentkezesUpdateInput = {
    oktato_jovahagyas?: BoolFieldUpdateOperationsInput | boolean
    TanuloElorehaladasV?: TanuloElorehaladasUpdateOneRequiredWithoutVizsgajelentkezesNestedInput
    Vizsgak?: VizsgakUpdateOneRequiredWithoutVizsgajelentkezesNestedInput
  }

  export type VizsgajelentkezesUncheckedUpdateInput = {
    vizsgajelentkezes_id?: IntFieldUpdateOperationsInput | number
    tanulo_elorehaladas_id?: IntFieldUpdateOperationsInput | number
    vizsga_id?: IntFieldUpdateOperationsInput | number
    oktato_jovahagyas?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VizsgajelentkezesCreateManyInput = {
    vizsgajelentkezes_id?: number
    tanulo_elorehaladas_id: number
    vizsga_id: number
    oktato_jovahagyas?: boolean
  }

  export type VizsgajelentkezesUpdateManyMutationInput = {
    oktato_jovahagyas?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VizsgajelentkezesUncheckedUpdateManyInput = {
    vizsgajelentkezes_id?: IntFieldUpdateOperationsInput | number
    tanulo_elorehaladas_id?: IntFieldUpdateOperationsInput | number
    vizsga_id?: IntFieldUpdateOperationsInput | number
    oktato_jovahagyas?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VizsgakCreateInput = {
    vizsga_datuma: Date | string
    sikeres?: boolean
    Felhasznalok?: FelhasznalokCreateNestedOneWithoutVizsgakInput
    VizsgaTipus: VizsgaTipusCreateNestedOneWithoutVizsgakInput
    Vizsgajelentkezes?: VizsgajelentkezesCreateNestedManyWithoutVizsgakInput
  }

  export type VizsgakUncheckedCreateInput = {
    vizsga_id?: number
    vizsgabiztos_id?: number | null
    vizsga_datuma: Date | string
    tipus_id: number
    sikeres?: boolean
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedCreateNestedManyWithoutVizsgakInput
  }

  export type VizsgakUpdateInput = {
    vizsga_datuma?: DateTimeFieldUpdateOperationsInput | Date | string
    sikeres?: BoolFieldUpdateOperationsInput | boolean
    Felhasznalok?: FelhasznalokUpdateOneWithoutVizsgakNestedInput
    VizsgaTipus?: VizsgaTipusUpdateOneRequiredWithoutVizsgakNestedInput
    Vizsgajelentkezes?: VizsgajelentkezesUpdateManyWithoutVizsgakNestedInput
  }

  export type VizsgakUncheckedUpdateInput = {
    vizsga_id?: IntFieldUpdateOperationsInput | number
    vizsgabiztos_id?: NullableIntFieldUpdateOperationsInput | number | null
    vizsga_datuma?: DateTimeFieldUpdateOperationsInput | Date | string
    tipus_id?: IntFieldUpdateOperationsInput | number
    sikeres?: BoolFieldUpdateOperationsInput | boolean
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedUpdateManyWithoutVizsgakNestedInput
  }

  export type VizsgakCreateManyInput = {
    vizsga_id?: number
    vizsgabiztos_id?: number | null
    vizsga_datuma: Date | string
    tipus_id: number
    sikeres?: boolean
  }

  export type VizsgakUpdateManyMutationInput = {
    vizsga_datuma?: DateTimeFieldUpdateOperationsInput | Date | string
    sikeres?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VizsgakUncheckedUpdateManyInput = {
    vizsga_id?: IntFieldUpdateOperationsInput | number
    vizsgabiztos_id?: NullableIntFieldUpdateOperationsInput | number | null
    vizsga_datuma?: DateTimeFieldUpdateOperationsInput | Date | string
    tipus_id?: IntFieldUpdateOperationsInput | number
    sikeres?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VizsgaTipusCreateInput = {
    tipus: string
    Vizsgak?: VizsgakCreateNestedManyWithoutVizsgaTipusInput
  }

  export type VizsgaTipusUncheckedCreateInput = {
    vizsga_tipus_id?: number
    tipus: string
    Vizsgak?: VizsgakUncheckedCreateNestedManyWithoutVizsgaTipusInput
  }

  export type VizsgaTipusUpdateInput = {
    tipus?: StringFieldUpdateOperationsInput | string
    Vizsgak?: VizsgakUpdateManyWithoutVizsgaTipusNestedInput
  }

  export type VizsgaTipusUncheckedUpdateInput = {
    vizsga_tipus_id?: IntFieldUpdateOperationsInput | number
    tipus?: StringFieldUpdateOperationsInput | string
    Vizsgak?: VizsgakUncheckedUpdateManyWithoutVizsgaTipusNestedInput
  }

  export type VizsgaTipusCreateManyInput = {
    vizsga_tipus_id?: number
    tipus: string
  }

  export type VizsgaTipusUpdateManyMutationInput = {
    tipus?: StringFieldUpdateOperationsInput | string
  }

  export type VizsgaTipusUncheckedUpdateManyInput = {
    vizsga_tipus_id?: IntFieldUpdateOperationsInput | number
    tipus?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type JogkorokRelationFilter = {
    is?: JogkorokWhereInput
    isNot?: JogkorokWhereInput
  }

  export type OrarendListRelationFilter = {
    every?: OrarendWhereInput
    some?: OrarendWhereInput
    none?: OrarendWhereInput
  }

  export type VizsgakListRelationFilter = {
    every?: VizsgakWhereInput
    some?: VizsgakWhereInput
    none?: VizsgakWhereInput
  }

  export type TanuloElorehaladasListRelationFilter = {
    every?: TanuloElorehaladasWhereInput
    some?: TanuloElorehaladasWhereInput
    none?: TanuloElorehaladasWhereInput
  }

  export type OrarendOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VizsgakOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TanuloElorehaladasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FelhasznalokCountOrderByAggregateInput = {
    felhasznalo_id?: SortOrder
    vezeteknev?: SortOrder
    keresztnev?: SortOrder
    email?: SortOrder
    jelszo?: SortOrder
    bankszamla?: SortOrder
    jogkor_id?: SortOrder
  }

  export type FelhasznalokAvgOrderByAggregateInput = {
    felhasznalo_id?: SortOrder
    jogkor_id?: SortOrder
  }

  export type FelhasznalokMaxOrderByAggregateInput = {
    felhasznalo_id?: SortOrder
    vezeteknev?: SortOrder
    keresztnev?: SortOrder
    email?: SortOrder
    jelszo?: SortOrder
    bankszamla?: SortOrder
    jogkor_id?: SortOrder
  }

  export type FelhasznalokMinOrderByAggregateInput = {
    felhasznalo_id?: SortOrder
    vezeteknev?: SortOrder
    keresztnev?: SortOrder
    email?: SortOrder
    jelszo?: SortOrder
    bankszamla?: SortOrder
    jogkor_id?: SortOrder
  }

  export type FelhasznalokSumOrderByAggregateInput = {
    felhasznalo_id?: SortOrder
    jogkor_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FelhasznalokListRelationFilter = {
    every?: FelhasznalokWhereInput
    some?: FelhasznalokWhereInput
    none?: FelhasznalokWhereInput
  }

  export type FelhasznalokOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JogkorokCountOrderByAggregateInput = {
    jogkor_id?: SortOrder
    jogkor?: SortOrder
  }

  export type JogkorokAvgOrderByAggregateInput = {
    jogkor_id?: SortOrder
    jogkor?: SortOrder
  }

  export type JogkorokMaxOrderByAggregateInput = {
    jogkor_id?: SortOrder
    jogkor?: SortOrder
  }

  export type JogkorokMinOrderByAggregateInput = {
    jogkor_id?: SortOrder
    jogkor?: SortOrder
  }

  export type JogkorokSumOrderByAggregateInput = {
    jogkor_id?: SortOrder
    jogkor?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type TanuloElorehaladasRelationFilter = {
    is?: TanuloElorehaladasWhereInput
    isNot?: TanuloElorehaladasWhereInput
  }

  export type KifizetesekCountOrderByAggregateInput = {
    kifizetes_id?: SortOrder
    elorehaladas_id?: SortOrder
    targy?: SortOrder
    osszeg?: SortOrder
    kifizetve?: SortOrder
  }

  export type KifizetesekAvgOrderByAggregateInput = {
    kifizetes_id?: SortOrder
    elorehaladas_id?: SortOrder
    osszeg?: SortOrder
  }

  export type KifizetesekMaxOrderByAggregateInput = {
    kifizetes_id?: SortOrder
    elorehaladas_id?: SortOrder
    targy?: SortOrder
    osszeg?: SortOrder
    kifizetve?: SortOrder
  }

  export type KifizetesekMinOrderByAggregateInput = {
    kifizetes_id?: SortOrder
    elorehaladas_id?: SortOrder
    targy?: SortOrder
    osszeg?: SortOrder
    kifizetve?: SortOrder
  }

  export type KifizetesekSumOrderByAggregateInput = {
    kifizetes_id?: SortOrder
    elorehaladas_id?: SortOrder
    osszeg?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type OrakCountOrderByAggregateInput = {
    ora_id?: SortOrder
    idopont_eleje?: SortOrder
    idopont_vege?: SortOrder
    cim?: SortOrder
    helyszin?: SortOrder
  }

  export type OrakAvgOrderByAggregateInput = {
    ora_id?: SortOrder
  }

  export type OrakMaxOrderByAggregateInput = {
    ora_id?: SortOrder
    idopont_eleje?: SortOrder
    idopont_vege?: SortOrder
    cim?: SortOrder
    helyszin?: SortOrder
  }

  export type OrakMinOrderByAggregateInput = {
    ora_id?: SortOrder
    idopont_eleje?: SortOrder
    idopont_vege?: SortOrder
    cim?: SortOrder
    helyszin?: SortOrder
  }

  export type OrakSumOrderByAggregateInput = {
    ora_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FelhasznalokRelationFilter = {
    is?: FelhasznalokWhereInput
    isNot?: FelhasznalokWhereInput
  }

  export type OrakRelationFilter = {
    is?: OrakWhereInput
    isNot?: OrakWhereInput
  }

  export type OrarendCountOrderByAggregateInput = {
    orarend_id?: SortOrder
    ora_id?: SortOrder
    felhasznalo_id?: SortOrder
  }

  export type OrarendAvgOrderByAggregateInput = {
    orarend_id?: SortOrder
    ora_id?: SortOrder
    felhasznalo_id?: SortOrder
  }

  export type OrarendMaxOrderByAggregateInput = {
    orarend_id?: SortOrder
    ora_id?: SortOrder
    felhasznalo_id?: SortOrder
  }

  export type OrarendMinOrderByAggregateInput = {
    orarend_id?: SortOrder
    ora_id?: SortOrder
    felhasznalo_id?: SortOrder
  }

  export type OrarendSumOrderByAggregateInput = {
    orarend_id?: SortOrder
    ora_id?: SortOrder
    felhasznalo_id?: SortOrder
  }

  export type KifizetesekListRelationFilter = {
    every?: KifizetesekWhereInput
    some?: KifizetesekWhereInput
    none?: KifizetesekWhereInput
  }

  export type VizsgajelentkezesListRelationFilter = {
    every?: VizsgajelentkezesWhereInput
    some?: VizsgajelentkezesWhereInput
    none?: VizsgajelentkezesWhereInput
  }

  export type KifizetesekOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VizsgajelentkezesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TanuloElorehaladasCountOrderByAggregateInput = {
    elorehaladas_id?: SortOrder
    tanulo_id?: SortOrder
    oktato_id?: SortOrder
    levezetett_orak?: SortOrder
  }

  export type TanuloElorehaladasAvgOrderByAggregateInput = {
    elorehaladas_id?: SortOrder
    tanulo_id?: SortOrder
    oktato_id?: SortOrder
    levezetett_orak?: SortOrder
  }

  export type TanuloElorehaladasMaxOrderByAggregateInput = {
    elorehaladas_id?: SortOrder
    tanulo_id?: SortOrder
    oktato_id?: SortOrder
    levezetett_orak?: SortOrder
  }

  export type TanuloElorehaladasMinOrderByAggregateInput = {
    elorehaladas_id?: SortOrder
    tanulo_id?: SortOrder
    oktato_id?: SortOrder
    levezetett_orak?: SortOrder
  }

  export type TanuloElorehaladasSumOrderByAggregateInput = {
    elorehaladas_id?: SortOrder
    tanulo_id?: SortOrder
    oktato_id?: SortOrder
    levezetett_orak?: SortOrder
  }

  export type VizsgakRelationFilter = {
    is?: VizsgakWhereInput
    isNot?: VizsgakWhereInput
  }

  export type VizsgajelentkezesCountOrderByAggregateInput = {
    vizsgajelentkezes_id?: SortOrder
    tanulo_elorehaladas_id?: SortOrder
    vizsga_id?: SortOrder
    oktato_jovahagyas?: SortOrder
  }

  export type VizsgajelentkezesAvgOrderByAggregateInput = {
    vizsgajelentkezes_id?: SortOrder
    tanulo_elorehaladas_id?: SortOrder
    vizsga_id?: SortOrder
  }

  export type VizsgajelentkezesMaxOrderByAggregateInput = {
    vizsgajelentkezes_id?: SortOrder
    tanulo_elorehaladas_id?: SortOrder
    vizsga_id?: SortOrder
    oktato_jovahagyas?: SortOrder
  }

  export type VizsgajelentkezesMinOrderByAggregateInput = {
    vizsgajelentkezes_id?: SortOrder
    tanulo_elorehaladas_id?: SortOrder
    vizsga_id?: SortOrder
    oktato_jovahagyas?: SortOrder
  }

  export type VizsgajelentkezesSumOrderByAggregateInput = {
    vizsgajelentkezes_id?: SortOrder
    tanulo_elorehaladas_id?: SortOrder
    vizsga_id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FelhasznalokNullableRelationFilter = {
    is?: FelhasznalokWhereInput | null
    isNot?: FelhasznalokWhereInput | null
  }

  export type VizsgaTipusRelationFilter = {
    is?: VizsgaTipusWhereInput
    isNot?: VizsgaTipusWhereInput
  }

  export type VizsgakCountOrderByAggregateInput = {
    vizsga_id?: SortOrder
    vizsgabiztos_id?: SortOrder
    vizsga_datuma?: SortOrder
    tipus_id?: SortOrder
    sikeres?: SortOrder
  }

  export type VizsgakAvgOrderByAggregateInput = {
    vizsga_id?: SortOrder
    vizsgabiztos_id?: SortOrder
    tipus_id?: SortOrder
  }

  export type VizsgakMaxOrderByAggregateInput = {
    vizsga_id?: SortOrder
    vizsgabiztos_id?: SortOrder
    vizsga_datuma?: SortOrder
    tipus_id?: SortOrder
    sikeres?: SortOrder
  }

  export type VizsgakMinOrderByAggregateInput = {
    vizsga_id?: SortOrder
    vizsgabiztos_id?: SortOrder
    vizsga_datuma?: SortOrder
    tipus_id?: SortOrder
    sikeres?: SortOrder
  }

  export type VizsgakSumOrderByAggregateInput = {
    vizsga_id?: SortOrder
    vizsgabiztos_id?: SortOrder
    tipus_id?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type VizsgaTipusCountOrderByAggregateInput = {
    vizsga_tipus_id?: SortOrder
    tipus?: SortOrder
  }

  export type VizsgaTipusAvgOrderByAggregateInput = {
    vizsga_tipus_id?: SortOrder
  }

  export type VizsgaTipusMaxOrderByAggregateInput = {
    vizsga_tipus_id?: SortOrder
    tipus?: SortOrder
  }

  export type VizsgaTipusMinOrderByAggregateInput = {
    vizsga_tipus_id?: SortOrder
    tipus?: SortOrder
  }

  export type VizsgaTipusSumOrderByAggregateInput = {
    vizsga_tipus_id?: SortOrder
  }

  export type JogkorokCreateNestedOneWithoutFelhasznalokInput = {
    create?: XOR<JogkorokCreateWithoutFelhasznalokInput, JogkorokUncheckedCreateWithoutFelhasznalokInput>
    connectOrCreate?: JogkorokCreateOrConnectWithoutFelhasznalokInput
    connect?: JogkorokWhereUniqueInput
  }

  export type OrarendCreateNestedManyWithoutFelhasznalokInput = {
    create?: XOR<OrarendCreateWithoutFelhasznalokInput, OrarendUncheckedCreateWithoutFelhasznalokInput> | OrarendCreateWithoutFelhasznalokInput[] | OrarendUncheckedCreateWithoutFelhasznalokInput[]
    connectOrCreate?: OrarendCreateOrConnectWithoutFelhasznalokInput | OrarendCreateOrConnectWithoutFelhasznalokInput[]
    createMany?: OrarendCreateManyFelhasznalokInputEnvelope
    connect?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
  }

  export type VizsgakCreateNestedManyWithoutFelhasznalokInput = {
    create?: XOR<VizsgakCreateWithoutFelhasznalokInput, VizsgakUncheckedCreateWithoutFelhasznalokInput> | VizsgakCreateWithoutFelhasznalokInput[] | VizsgakUncheckedCreateWithoutFelhasznalokInput[]
    connectOrCreate?: VizsgakCreateOrConnectWithoutFelhasznalokInput | VizsgakCreateOrConnectWithoutFelhasznalokInput[]
    createMany?: VizsgakCreateManyFelhasznalokInputEnvelope
    connect?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
  }

  export type TanuloElorehaladasCreateNestedManyWithoutFelhasznalokTanuloInput = {
    create?: XOR<TanuloElorehaladasCreateWithoutFelhasznalokTanuloInput, TanuloElorehaladasUncheckedCreateWithoutFelhasznalokTanuloInput> | TanuloElorehaladasCreateWithoutFelhasznalokTanuloInput[] | TanuloElorehaladasUncheckedCreateWithoutFelhasznalokTanuloInput[]
    connectOrCreate?: TanuloElorehaladasCreateOrConnectWithoutFelhasznalokTanuloInput | TanuloElorehaladasCreateOrConnectWithoutFelhasznalokTanuloInput[]
    createMany?: TanuloElorehaladasCreateManyFelhasznalokTanuloInputEnvelope
    connect?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
  }

  export type TanuloElorehaladasCreateNestedManyWithoutFelhasznalokOktatoInput = {
    create?: XOR<TanuloElorehaladasCreateWithoutFelhasznalokOktatoInput, TanuloElorehaladasUncheckedCreateWithoutFelhasznalokOktatoInput> | TanuloElorehaladasCreateWithoutFelhasznalokOktatoInput[] | TanuloElorehaladasUncheckedCreateWithoutFelhasznalokOktatoInput[]
    connectOrCreate?: TanuloElorehaladasCreateOrConnectWithoutFelhasznalokOktatoInput | TanuloElorehaladasCreateOrConnectWithoutFelhasznalokOktatoInput[]
    createMany?: TanuloElorehaladasCreateManyFelhasznalokOktatoInputEnvelope
    connect?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
  }

  export type OrarendUncheckedCreateNestedManyWithoutFelhasznalokInput = {
    create?: XOR<OrarendCreateWithoutFelhasznalokInput, OrarendUncheckedCreateWithoutFelhasznalokInput> | OrarendCreateWithoutFelhasznalokInput[] | OrarendUncheckedCreateWithoutFelhasznalokInput[]
    connectOrCreate?: OrarendCreateOrConnectWithoutFelhasznalokInput | OrarendCreateOrConnectWithoutFelhasznalokInput[]
    createMany?: OrarendCreateManyFelhasznalokInputEnvelope
    connect?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
  }

  export type VizsgakUncheckedCreateNestedManyWithoutFelhasznalokInput = {
    create?: XOR<VizsgakCreateWithoutFelhasznalokInput, VizsgakUncheckedCreateWithoutFelhasznalokInput> | VizsgakCreateWithoutFelhasznalokInput[] | VizsgakUncheckedCreateWithoutFelhasznalokInput[]
    connectOrCreate?: VizsgakCreateOrConnectWithoutFelhasznalokInput | VizsgakCreateOrConnectWithoutFelhasznalokInput[]
    createMany?: VizsgakCreateManyFelhasznalokInputEnvelope
    connect?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
  }

  export type TanuloElorehaladasUncheckedCreateNestedManyWithoutFelhasznalokTanuloInput = {
    create?: XOR<TanuloElorehaladasCreateWithoutFelhasznalokTanuloInput, TanuloElorehaladasUncheckedCreateWithoutFelhasznalokTanuloInput> | TanuloElorehaladasCreateWithoutFelhasznalokTanuloInput[] | TanuloElorehaladasUncheckedCreateWithoutFelhasznalokTanuloInput[]
    connectOrCreate?: TanuloElorehaladasCreateOrConnectWithoutFelhasznalokTanuloInput | TanuloElorehaladasCreateOrConnectWithoutFelhasznalokTanuloInput[]
    createMany?: TanuloElorehaladasCreateManyFelhasznalokTanuloInputEnvelope
    connect?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
  }

  export type TanuloElorehaladasUncheckedCreateNestedManyWithoutFelhasznalokOktatoInput = {
    create?: XOR<TanuloElorehaladasCreateWithoutFelhasznalokOktatoInput, TanuloElorehaladasUncheckedCreateWithoutFelhasznalokOktatoInput> | TanuloElorehaladasCreateWithoutFelhasznalokOktatoInput[] | TanuloElorehaladasUncheckedCreateWithoutFelhasznalokOktatoInput[]
    connectOrCreate?: TanuloElorehaladasCreateOrConnectWithoutFelhasznalokOktatoInput | TanuloElorehaladasCreateOrConnectWithoutFelhasznalokOktatoInput[]
    createMany?: TanuloElorehaladasCreateManyFelhasznalokOktatoInputEnvelope
    connect?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type JogkorokUpdateOneRequiredWithoutFelhasznalokNestedInput = {
    create?: XOR<JogkorokCreateWithoutFelhasznalokInput, JogkorokUncheckedCreateWithoutFelhasznalokInput>
    connectOrCreate?: JogkorokCreateOrConnectWithoutFelhasznalokInput
    upsert?: JogkorokUpsertWithoutFelhasznalokInput
    connect?: JogkorokWhereUniqueInput
    update?: XOR<XOR<JogkorokUpdateToOneWithWhereWithoutFelhasznalokInput, JogkorokUpdateWithoutFelhasznalokInput>, JogkorokUncheckedUpdateWithoutFelhasznalokInput>
  }

  export type OrarendUpdateManyWithoutFelhasznalokNestedInput = {
    create?: XOR<OrarendCreateWithoutFelhasznalokInput, OrarendUncheckedCreateWithoutFelhasznalokInput> | OrarendCreateWithoutFelhasznalokInput[] | OrarendUncheckedCreateWithoutFelhasznalokInput[]
    connectOrCreate?: OrarendCreateOrConnectWithoutFelhasznalokInput | OrarendCreateOrConnectWithoutFelhasznalokInput[]
    upsert?: OrarendUpsertWithWhereUniqueWithoutFelhasznalokInput | OrarendUpsertWithWhereUniqueWithoutFelhasznalokInput[]
    createMany?: OrarendCreateManyFelhasznalokInputEnvelope
    set?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    disconnect?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    delete?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    connect?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    update?: OrarendUpdateWithWhereUniqueWithoutFelhasznalokInput | OrarendUpdateWithWhereUniqueWithoutFelhasznalokInput[]
    updateMany?: OrarendUpdateManyWithWhereWithoutFelhasznalokInput | OrarendUpdateManyWithWhereWithoutFelhasznalokInput[]
    deleteMany?: OrarendScalarWhereInput | OrarendScalarWhereInput[]
  }

  export type VizsgakUpdateManyWithoutFelhasznalokNestedInput = {
    create?: XOR<VizsgakCreateWithoutFelhasznalokInput, VizsgakUncheckedCreateWithoutFelhasznalokInput> | VizsgakCreateWithoutFelhasznalokInput[] | VizsgakUncheckedCreateWithoutFelhasznalokInput[]
    connectOrCreate?: VizsgakCreateOrConnectWithoutFelhasznalokInput | VizsgakCreateOrConnectWithoutFelhasznalokInput[]
    upsert?: VizsgakUpsertWithWhereUniqueWithoutFelhasznalokInput | VizsgakUpsertWithWhereUniqueWithoutFelhasznalokInput[]
    createMany?: VizsgakCreateManyFelhasznalokInputEnvelope
    set?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    disconnect?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    delete?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    connect?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    update?: VizsgakUpdateWithWhereUniqueWithoutFelhasznalokInput | VizsgakUpdateWithWhereUniqueWithoutFelhasznalokInput[]
    updateMany?: VizsgakUpdateManyWithWhereWithoutFelhasznalokInput | VizsgakUpdateManyWithWhereWithoutFelhasznalokInput[]
    deleteMany?: VizsgakScalarWhereInput | VizsgakScalarWhereInput[]
  }

  export type TanuloElorehaladasUpdateManyWithoutFelhasznalokTanuloNestedInput = {
    create?: XOR<TanuloElorehaladasCreateWithoutFelhasznalokTanuloInput, TanuloElorehaladasUncheckedCreateWithoutFelhasznalokTanuloInput> | TanuloElorehaladasCreateWithoutFelhasznalokTanuloInput[] | TanuloElorehaladasUncheckedCreateWithoutFelhasznalokTanuloInput[]
    connectOrCreate?: TanuloElorehaladasCreateOrConnectWithoutFelhasznalokTanuloInput | TanuloElorehaladasCreateOrConnectWithoutFelhasznalokTanuloInput[]
    upsert?: TanuloElorehaladasUpsertWithWhereUniqueWithoutFelhasznalokTanuloInput | TanuloElorehaladasUpsertWithWhereUniqueWithoutFelhasznalokTanuloInput[]
    createMany?: TanuloElorehaladasCreateManyFelhasznalokTanuloInputEnvelope
    set?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    disconnect?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    delete?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    connect?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    update?: TanuloElorehaladasUpdateWithWhereUniqueWithoutFelhasznalokTanuloInput | TanuloElorehaladasUpdateWithWhereUniqueWithoutFelhasznalokTanuloInput[]
    updateMany?: TanuloElorehaladasUpdateManyWithWhereWithoutFelhasznalokTanuloInput | TanuloElorehaladasUpdateManyWithWhereWithoutFelhasznalokTanuloInput[]
    deleteMany?: TanuloElorehaladasScalarWhereInput | TanuloElorehaladasScalarWhereInput[]
  }

  export type TanuloElorehaladasUpdateManyWithoutFelhasznalokOktatoNestedInput = {
    create?: XOR<TanuloElorehaladasCreateWithoutFelhasznalokOktatoInput, TanuloElorehaladasUncheckedCreateWithoutFelhasznalokOktatoInput> | TanuloElorehaladasCreateWithoutFelhasznalokOktatoInput[] | TanuloElorehaladasUncheckedCreateWithoutFelhasznalokOktatoInput[]
    connectOrCreate?: TanuloElorehaladasCreateOrConnectWithoutFelhasznalokOktatoInput | TanuloElorehaladasCreateOrConnectWithoutFelhasznalokOktatoInput[]
    upsert?: TanuloElorehaladasUpsertWithWhereUniqueWithoutFelhasznalokOktatoInput | TanuloElorehaladasUpsertWithWhereUniqueWithoutFelhasznalokOktatoInput[]
    createMany?: TanuloElorehaladasCreateManyFelhasznalokOktatoInputEnvelope
    set?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    disconnect?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    delete?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    connect?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    update?: TanuloElorehaladasUpdateWithWhereUniqueWithoutFelhasznalokOktatoInput | TanuloElorehaladasUpdateWithWhereUniqueWithoutFelhasznalokOktatoInput[]
    updateMany?: TanuloElorehaladasUpdateManyWithWhereWithoutFelhasznalokOktatoInput | TanuloElorehaladasUpdateManyWithWhereWithoutFelhasznalokOktatoInput[]
    deleteMany?: TanuloElorehaladasScalarWhereInput | TanuloElorehaladasScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrarendUncheckedUpdateManyWithoutFelhasznalokNestedInput = {
    create?: XOR<OrarendCreateWithoutFelhasznalokInput, OrarendUncheckedCreateWithoutFelhasznalokInput> | OrarendCreateWithoutFelhasznalokInput[] | OrarendUncheckedCreateWithoutFelhasznalokInput[]
    connectOrCreate?: OrarendCreateOrConnectWithoutFelhasznalokInput | OrarendCreateOrConnectWithoutFelhasznalokInput[]
    upsert?: OrarendUpsertWithWhereUniqueWithoutFelhasznalokInput | OrarendUpsertWithWhereUniqueWithoutFelhasznalokInput[]
    createMany?: OrarendCreateManyFelhasznalokInputEnvelope
    set?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    disconnect?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    delete?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    connect?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    update?: OrarendUpdateWithWhereUniqueWithoutFelhasznalokInput | OrarendUpdateWithWhereUniqueWithoutFelhasznalokInput[]
    updateMany?: OrarendUpdateManyWithWhereWithoutFelhasznalokInput | OrarendUpdateManyWithWhereWithoutFelhasznalokInput[]
    deleteMany?: OrarendScalarWhereInput | OrarendScalarWhereInput[]
  }

  export type VizsgakUncheckedUpdateManyWithoutFelhasznalokNestedInput = {
    create?: XOR<VizsgakCreateWithoutFelhasznalokInput, VizsgakUncheckedCreateWithoutFelhasznalokInput> | VizsgakCreateWithoutFelhasznalokInput[] | VizsgakUncheckedCreateWithoutFelhasznalokInput[]
    connectOrCreate?: VizsgakCreateOrConnectWithoutFelhasznalokInput | VizsgakCreateOrConnectWithoutFelhasznalokInput[]
    upsert?: VizsgakUpsertWithWhereUniqueWithoutFelhasznalokInput | VizsgakUpsertWithWhereUniqueWithoutFelhasznalokInput[]
    createMany?: VizsgakCreateManyFelhasznalokInputEnvelope
    set?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    disconnect?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    delete?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    connect?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    update?: VizsgakUpdateWithWhereUniqueWithoutFelhasznalokInput | VizsgakUpdateWithWhereUniqueWithoutFelhasznalokInput[]
    updateMany?: VizsgakUpdateManyWithWhereWithoutFelhasznalokInput | VizsgakUpdateManyWithWhereWithoutFelhasznalokInput[]
    deleteMany?: VizsgakScalarWhereInput | VizsgakScalarWhereInput[]
  }

  export type TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokTanuloNestedInput = {
    create?: XOR<TanuloElorehaladasCreateWithoutFelhasznalokTanuloInput, TanuloElorehaladasUncheckedCreateWithoutFelhasznalokTanuloInput> | TanuloElorehaladasCreateWithoutFelhasznalokTanuloInput[] | TanuloElorehaladasUncheckedCreateWithoutFelhasznalokTanuloInput[]
    connectOrCreate?: TanuloElorehaladasCreateOrConnectWithoutFelhasznalokTanuloInput | TanuloElorehaladasCreateOrConnectWithoutFelhasznalokTanuloInput[]
    upsert?: TanuloElorehaladasUpsertWithWhereUniqueWithoutFelhasznalokTanuloInput | TanuloElorehaladasUpsertWithWhereUniqueWithoutFelhasznalokTanuloInput[]
    createMany?: TanuloElorehaladasCreateManyFelhasznalokTanuloInputEnvelope
    set?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    disconnect?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    delete?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    connect?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    update?: TanuloElorehaladasUpdateWithWhereUniqueWithoutFelhasznalokTanuloInput | TanuloElorehaladasUpdateWithWhereUniqueWithoutFelhasznalokTanuloInput[]
    updateMany?: TanuloElorehaladasUpdateManyWithWhereWithoutFelhasznalokTanuloInput | TanuloElorehaladasUpdateManyWithWhereWithoutFelhasznalokTanuloInput[]
    deleteMany?: TanuloElorehaladasScalarWhereInput | TanuloElorehaladasScalarWhereInput[]
  }

  export type TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokOktatoNestedInput = {
    create?: XOR<TanuloElorehaladasCreateWithoutFelhasznalokOktatoInput, TanuloElorehaladasUncheckedCreateWithoutFelhasznalokOktatoInput> | TanuloElorehaladasCreateWithoutFelhasznalokOktatoInput[] | TanuloElorehaladasUncheckedCreateWithoutFelhasznalokOktatoInput[]
    connectOrCreate?: TanuloElorehaladasCreateOrConnectWithoutFelhasznalokOktatoInput | TanuloElorehaladasCreateOrConnectWithoutFelhasznalokOktatoInput[]
    upsert?: TanuloElorehaladasUpsertWithWhereUniqueWithoutFelhasznalokOktatoInput | TanuloElorehaladasUpsertWithWhereUniqueWithoutFelhasznalokOktatoInput[]
    createMany?: TanuloElorehaladasCreateManyFelhasznalokOktatoInputEnvelope
    set?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    disconnect?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    delete?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    connect?: TanuloElorehaladasWhereUniqueInput | TanuloElorehaladasWhereUniqueInput[]
    update?: TanuloElorehaladasUpdateWithWhereUniqueWithoutFelhasznalokOktatoInput | TanuloElorehaladasUpdateWithWhereUniqueWithoutFelhasznalokOktatoInput[]
    updateMany?: TanuloElorehaladasUpdateManyWithWhereWithoutFelhasznalokOktatoInput | TanuloElorehaladasUpdateManyWithWhereWithoutFelhasznalokOktatoInput[]
    deleteMany?: TanuloElorehaladasScalarWhereInput | TanuloElorehaladasScalarWhereInput[]
  }

  export type FelhasznalokCreateNestedManyWithoutJogkorokInput = {
    create?: XOR<FelhasznalokCreateWithoutJogkorokInput, FelhasznalokUncheckedCreateWithoutJogkorokInput> | FelhasznalokCreateWithoutJogkorokInput[] | FelhasznalokUncheckedCreateWithoutJogkorokInput[]
    connectOrCreate?: FelhasznalokCreateOrConnectWithoutJogkorokInput | FelhasznalokCreateOrConnectWithoutJogkorokInput[]
    createMany?: FelhasznalokCreateManyJogkorokInputEnvelope
    connect?: FelhasznalokWhereUniqueInput | FelhasznalokWhereUniqueInput[]
  }

  export type FelhasznalokUncheckedCreateNestedManyWithoutJogkorokInput = {
    create?: XOR<FelhasznalokCreateWithoutJogkorokInput, FelhasznalokUncheckedCreateWithoutJogkorokInput> | FelhasznalokCreateWithoutJogkorokInput[] | FelhasznalokUncheckedCreateWithoutJogkorokInput[]
    connectOrCreate?: FelhasznalokCreateOrConnectWithoutJogkorokInput | FelhasznalokCreateOrConnectWithoutJogkorokInput[]
    createMany?: FelhasznalokCreateManyJogkorokInputEnvelope
    connect?: FelhasznalokWhereUniqueInput | FelhasznalokWhereUniqueInput[]
  }

  export type FelhasznalokUpdateManyWithoutJogkorokNestedInput = {
    create?: XOR<FelhasznalokCreateWithoutJogkorokInput, FelhasznalokUncheckedCreateWithoutJogkorokInput> | FelhasznalokCreateWithoutJogkorokInput[] | FelhasznalokUncheckedCreateWithoutJogkorokInput[]
    connectOrCreate?: FelhasznalokCreateOrConnectWithoutJogkorokInput | FelhasznalokCreateOrConnectWithoutJogkorokInput[]
    upsert?: FelhasznalokUpsertWithWhereUniqueWithoutJogkorokInput | FelhasznalokUpsertWithWhereUniqueWithoutJogkorokInput[]
    createMany?: FelhasznalokCreateManyJogkorokInputEnvelope
    set?: FelhasznalokWhereUniqueInput | FelhasznalokWhereUniqueInput[]
    disconnect?: FelhasznalokWhereUniqueInput | FelhasznalokWhereUniqueInput[]
    delete?: FelhasznalokWhereUniqueInput | FelhasznalokWhereUniqueInput[]
    connect?: FelhasznalokWhereUniqueInput | FelhasznalokWhereUniqueInput[]
    update?: FelhasznalokUpdateWithWhereUniqueWithoutJogkorokInput | FelhasznalokUpdateWithWhereUniqueWithoutJogkorokInput[]
    updateMany?: FelhasznalokUpdateManyWithWhereWithoutJogkorokInput | FelhasznalokUpdateManyWithWhereWithoutJogkorokInput[]
    deleteMany?: FelhasznalokScalarWhereInput | FelhasznalokScalarWhereInput[]
  }

  export type FelhasznalokUncheckedUpdateManyWithoutJogkorokNestedInput = {
    create?: XOR<FelhasznalokCreateWithoutJogkorokInput, FelhasznalokUncheckedCreateWithoutJogkorokInput> | FelhasznalokCreateWithoutJogkorokInput[] | FelhasznalokUncheckedCreateWithoutJogkorokInput[]
    connectOrCreate?: FelhasznalokCreateOrConnectWithoutJogkorokInput | FelhasznalokCreateOrConnectWithoutJogkorokInput[]
    upsert?: FelhasznalokUpsertWithWhereUniqueWithoutJogkorokInput | FelhasznalokUpsertWithWhereUniqueWithoutJogkorokInput[]
    createMany?: FelhasznalokCreateManyJogkorokInputEnvelope
    set?: FelhasznalokWhereUniqueInput | FelhasznalokWhereUniqueInput[]
    disconnect?: FelhasznalokWhereUniqueInput | FelhasznalokWhereUniqueInput[]
    delete?: FelhasznalokWhereUniqueInput | FelhasznalokWhereUniqueInput[]
    connect?: FelhasznalokWhereUniqueInput | FelhasznalokWhereUniqueInput[]
    update?: FelhasznalokUpdateWithWhereUniqueWithoutJogkorokInput | FelhasznalokUpdateWithWhereUniqueWithoutJogkorokInput[]
    updateMany?: FelhasznalokUpdateManyWithWhereWithoutJogkorokInput | FelhasznalokUpdateManyWithWhereWithoutJogkorokInput[]
    deleteMany?: FelhasznalokScalarWhereInput | FelhasznalokScalarWhereInput[]
  }

  export type TanuloElorehaladasCreateNestedOneWithoutKifizetesekInput = {
    create?: XOR<TanuloElorehaladasCreateWithoutKifizetesekInput, TanuloElorehaladasUncheckedCreateWithoutKifizetesekInput>
    connectOrCreate?: TanuloElorehaladasCreateOrConnectWithoutKifizetesekInput
    connect?: TanuloElorehaladasWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type TanuloElorehaladasUpdateOneRequiredWithoutKifizetesekNestedInput = {
    create?: XOR<TanuloElorehaladasCreateWithoutKifizetesekInput, TanuloElorehaladasUncheckedCreateWithoutKifizetesekInput>
    connectOrCreate?: TanuloElorehaladasCreateOrConnectWithoutKifizetesekInput
    upsert?: TanuloElorehaladasUpsertWithoutKifizetesekInput
    connect?: TanuloElorehaladasWhereUniqueInput
    update?: XOR<XOR<TanuloElorehaladasUpdateToOneWithWhereWithoutKifizetesekInput, TanuloElorehaladasUpdateWithoutKifizetesekInput>, TanuloElorehaladasUncheckedUpdateWithoutKifizetesekInput>
  }

  export type OrarendCreateNestedManyWithoutOrakInput = {
    create?: XOR<OrarendCreateWithoutOrakInput, OrarendUncheckedCreateWithoutOrakInput> | OrarendCreateWithoutOrakInput[] | OrarendUncheckedCreateWithoutOrakInput[]
    connectOrCreate?: OrarendCreateOrConnectWithoutOrakInput | OrarendCreateOrConnectWithoutOrakInput[]
    createMany?: OrarendCreateManyOrakInputEnvelope
    connect?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
  }

  export type OrarendUncheckedCreateNestedManyWithoutOrakInput = {
    create?: XOR<OrarendCreateWithoutOrakInput, OrarendUncheckedCreateWithoutOrakInput> | OrarendCreateWithoutOrakInput[] | OrarendUncheckedCreateWithoutOrakInput[]
    connectOrCreate?: OrarendCreateOrConnectWithoutOrakInput | OrarendCreateOrConnectWithoutOrakInput[]
    createMany?: OrarendCreateManyOrakInputEnvelope
    connect?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type OrarendUpdateManyWithoutOrakNestedInput = {
    create?: XOR<OrarendCreateWithoutOrakInput, OrarendUncheckedCreateWithoutOrakInput> | OrarendCreateWithoutOrakInput[] | OrarendUncheckedCreateWithoutOrakInput[]
    connectOrCreate?: OrarendCreateOrConnectWithoutOrakInput | OrarendCreateOrConnectWithoutOrakInput[]
    upsert?: OrarendUpsertWithWhereUniqueWithoutOrakInput | OrarendUpsertWithWhereUniqueWithoutOrakInput[]
    createMany?: OrarendCreateManyOrakInputEnvelope
    set?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    disconnect?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    delete?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    connect?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    update?: OrarendUpdateWithWhereUniqueWithoutOrakInput | OrarendUpdateWithWhereUniqueWithoutOrakInput[]
    updateMany?: OrarendUpdateManyWithWhereWithoutOrakInput | OrarendUpdateManyWithWhereWithoutOrakInput[]
    deleteMany?: OrarendScalarWhereInput | OrarendScalarWhereInput[]
  }

  export type OrarendUncheckedUpdateManyWithoutOrakNestedInput = {
    create?: XOR<OrarendCreateWithoutOrakInput, OrarendUncheckedCreateWithoutOrakInput> | OrarendCreateWithoutOrakInput[] | OrarendUncheckedCreateWithoutOrakInput[]
    connectOrCreate?: OrarendCreateOrConnectWithoutOrakInput | OrarendCreateOrConnectWithoutOrakInput[]
    upsert?: OrarendUpsertWithWhereUniqueWithoutOrakInput | OrarendUpsertWithWhereUniqueWithoutOrakInput[]
    createMany?: OrarendCreateManyOrakInputEnvelope
    set?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    disconnect?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    delete?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    connect?: OrarendWhereUniqueInput | OrarendWhereUniqueInput[]
    update?: OrarendUpdateWithWhereUniqueWithoutOrakInput | OrarendUpdateWithWhereUniqueWithoutOrakInput[]
    updateMany?: OrarendUpdateManyWithWhereWithoutOrakInput | OrarendUpdateManyWithWhereWithoutOrakInput[]
    deleteMany?: OrarendScalarWhereInput | OrarendScalarWhereInput[]
  }

  export type FelhasznalokCreateNestedOneWithoutOrarendInput = {
    create?: XOR<FelhasznalokCreateWithoutOrarendInput, FelhasznalokUncheckedCreateWithoutOrarendInput>
    connectOrCreate?: FelhasznalokCreateOrConnectWithoutOrarendInput
    connect?: FelhasznalokWhereUniqueInput
  }

  export type OrakCreateNestedOneWithoutOrarendInput = {
    create?: XOR<OrakCreateWithoutOrarendInput, OrakUncheckedCreateWithoutOrarendInput>
    connectOrCreate?: OrakCreateOrConnectWithoutOrarendInput
    connect?: OrakWhereUniqueInput
  }

  export type FelhasznalokUpdateOneRequiredWithoutOrarendNestedInput = {
    create?: XOR<FelhasznalokCreateWithoutOrarendInput, FelhasznalokUncheckedCreateWithoutOrarendInput>
    connectOrCreate?: FelhasznalokCreateOrConnectWithoutOrarendInput
    upsert?: FelhasznalokUpsertWithoutOrarendInput
    connect?: FelhasznalokWhereUniqueInput
    update?: XOR<XOR<FelhasznalokUpdateToOneWithWhereWithoutOrarendInput, FelhasznalokUpdateWithoutOrarendInput>, FelhasznalokUncheckedUpdateWithoutOrarendInput>
  }

  export type OrakUpdateOneRequiredWithoutOrarendNestedInput = {
    create?: XOR<OrakCreateWithoutOrarendInput, OrakUncheckedCreateWithoutOrarendInput>
    connectOrCreate?: OrakCreateOrConnectWithoutOrarendInput
    upsert?: OrakUpsertWithoutOrarendInput
    connect?: OrakWhereUniqueInput
    update?: XOR<XOR<OrakUpdateToOneWithWhereWithoutOrarendInput, OrakUpdateWithoutOrarendInput>, OrakUncheckedUpdateWithoutOrarendInput>
  }

  export type KifizetesekCreateNestedManyWithoutTanuloElorehaladasInput = {
    create?: XOR<KifizetesekCreateWithoutTanuloElorehaladasInput, KifizetesekUncheckedCreateWithoutTanuloElorehaladasInput> | KifizetesekCreateWithoutTanuloElorehaladasInput[] | KifizetesekUncheckedCreateWithoutTanuloElorehaladasInput[]
    connectOrCreate?: KifizetesekCreateOrConnectWithoutTanuloElorehaladasInput | KifizetesekCreateOrConnectWithoutTanuloElorehaladasInput[]
    createMany?: KifizetesekCreateManyTanuloElorehaladasInputEnvelope
    connect?: KifizetesekWhereUniqueInput | KifizetesekWhereUniqueInput[]
  }

  export type FelhasznalokCreateNestedOneWithoutTanuloElorehaladasInput = {
    create?: XOR<FelhasznalokCreateWithoutTanuloElorehaladasInput, FelhasznalokUncheckedCreateWithoutTanuloElorehaladasInput>
    connectOrCreate?: FelhasznalokCreateOrConnectWithoutTanuloElorehaladasInput
    connect?: FelhasznalokWhereUniqueInput
  }

  export type FelhasznalokCreateNestedOneWithoutTanuloElorehaladasVInput = {
    create?: XOR<FelhasznalokCreateWithoutTanuloElorehaladasVInput, FelhasznalokUncheckedCreateWithoutTanuloElorehaladasVInput>
    connectOrCreate?: FelhasznalokCreateOrConnectWithoutTanuloElorehaladasVInput
    connect?: FelhasznalokWhereUniqueInput
  }

  export type VizsgajelentkezesCreateNestedManyWithoutTanuloElorehaladasVInput = {
    create?: XOR<VizsgajelentkezesCreateWithoutTanuloElorehaladasVInput, VizsgajelentkezesUncheckedCreateWithoutTanuloElorehaladasVInput> | VizsgajelentkezesCreateWithoutTanuloElorehaladasVInput[] | VizsgajelentkezesUncheckedCreateWithoutTanuloElorehaladasVInput[]
    connectOrCreate?: VizsgajelentkezesCreateOrConnectWithoutTanuloElorehaladasVInput | VizsgajelentkezesCreateOrConnectWithoutTanuloElorehaladasVInput[]
    createMany?: VizsgajelentkezesCreateManyTanuloElorehaladasVInputEnvelope
    connect?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
  }

  export type KifizetesekUncheckedCreateNestedManyWithoutTanuloElorehaladasInput = {
    create?: XOR<KifizetesekCreateWithoutTanuloElorehaladasInput, KifizetesekUncheckedCreateWithoutTanuloElorehaladasInput> | KifizetesekCreateWithoutTanuloElorehaladasInput[] | KifizetesekUncheckedCreateWithoutTanuloElorehaladasInput[]
    connectOrCreate?: KifizetesekCreateOrConnectWithoutTanuloElorehaladasInput | KifizetesekCreateOrConnectWithoutTanuloElorehaladasInput[]
    createMany?: KifizetesekCreateManyTanuloElorehaladasInputEnvelope
    connect?: KifizetesekWhereUniqueInput | KifizetesekWhereUniqueInput[]
  }

  export type VizsgajelentkezesUncheckedCreateNestedManyWithoutTanuloElorehaladasVInput = {
    create?: XOR<VizsgajelentkezesCreateWithoutTanuloElorehaladasVInput, VizsgajelentkezesUncheckedCreateWithoutTanuloElorehaladasVInput> | VizsgajelentkezesCreateWithoutTanuloElorehaladasVInput[] | VizsgajelentkezesUncheckedCreateWithoutTanuloElorehaladasVInput[]
    connectOrCreate?: VizsgajelentkezesCreateOrConnectWithoutTanuloElorehaladasVInput | VizsgajelentkezesCreateOrConnectWithoutTanuloElorehaladasVInput[]
    createMany?: VizsgajelentkezesCreateManyTanuloElorehaladasVInputEnvelope
    connect?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
  }

  export type KifizetesekUpdateManyWithoutTanuloElorehaladasNestedInput = {
    create?: XOR<KifizetesekCreateWithoutTanuloElorehaladasInput, KifizetesekUncheckedCreateWithoutTanuloElorehaladasInput> | KifizetesekCreateWithoutTanuloElorehaladasInput[] | KifizetesekUncheckedCreateWithoutTanuloElorehaladasInput[]
    connectOrCreate?: KifizetesekCreateOrConnectWithoutTanuloElorehaladasInput | KifizetesekCreateOrConnectWithoutTanuloElorehaladasInput[]
    upsert?: KifizetesekUpsertWithWhereUniqueWithoutTanuloElorehaladasInput | KifizetesekUpsertWithWhereUniqueWithoutTanuloElorehaladasInput[]
    createMany?: KifizetesekCreateManyTanuloElorehaladasInputEnvelope
    set?: KifizetesekWhereUniqueInput | KifizetesekWhereUniqueInput[]
    disconnect?: KifizetesekWhereUniqueInput | KifizetesekWhereUniqueInput[]
    delete?: KifizetesekWhereUniqueInput | KifizetesekWhereUniqueInput[]
    connect?: KifizetesekWhereUniqueInput | KifizetesekWhereUniqueInput[]
    update?: KifizetesekUpdateWithWhereUniqueWithoutTanuloElorehaladasInput | KifizetesekUpdateWithWhereUniqueWithoutTanuloElorehaladasInput[]
    updateMany?: KifizetesekUpdateManyWithWhereWithoutTanuloElorehaladasInput | KifizetesekUpdateManyWithWhereWithoutTanuloElorehaladasInput[]
    deleteMany?: KifizetesekScalarWhereInput | KifizetesekScalarWhereInput[]
  }

  export type FelhasznalokUpdateOneRequiredWithoutTanuloElorehaladasNestedInput = {
    create?: XOR<FelhasznalokCreateWithoutTanuloElorehaladasInput, FelhasznalokUncheckedCreateWithoutTanuloElorehaladasInput>
    connectOrCreate?: FelhasznalokCreateOrConnectWithoutTanuloElorehaladasInput
    upsert?: FelhasznalokUpsertWithoutTanuloElorehaladasInput
    connect?: FelhasznalokWhereUniqueInput
    update?: XOR<XOR<FelhasznalokUpdateToOneWithWhereWithoutTanuloElorehaladasInput, FelhasznalokUpdateWithoutTanuloElorehaladasInput>, FelhasznalokUncheckedUpdateWithoutTanuloElorehaladasInput>
  }

  export type FelhasznalokUpdateOneRequiredWithoutTanuloElorehaladasVNestedInput = {
    create?: XOR<FelhasznalokCreateWithoutTanuloElorehaladasVInput, FelhasznalokUncheckedCreateWithoutTanuloElorehaladasVInput>
    connectOrCreate?: FelhasznalokCreateOrConnectWithoutTanuloElorehaladasVInput
    upsert?: FelhasznalokUpsertWithoutTanuloElorehaladasVInput
    connect?: FelhasznalokWhereUniqueInput
    update?: XOR<XOR<FelhasznalokUpdateToOneWithWhereWithoutTanuloElorehaladasVInput, FelhasznalokUpdateWithoutTanuloElorehaladasVInput>, FelhasznalokUncheckedUpdateWithoutTanuloElorehaladasVInput>
  }

  export type VizsgajelentkezesUpdateManyWithoutTanuloElorehaladasVNestedInput = {
    create?: XOR<VizsgajelentkezesCreateWithoutTanuloElorehaladasVInput, VizsgajelentkezesUncheckedCreateWithoutTanuloElorehaladasVInput> | VizsgajelentkezesCreateWithoutTanuloElorehaladasVInput[] | VizsgajelentkezesUncheckedCreateWithoutTanuloElorehaladasVInput[]
    connectOrCreate?: VizsgajelentkezesCreateOrConnectWithoutTanuloElorehaladasVInput | VizsgajelentkezesCreateOrConnectWithoutTanuloElorehaladasVInput[]
    upsert?: VizsgajelentkezesUpsertWithWhereUniqueWithoutTanuloElorehaladasVInput | VizsgajelentkezesUpsertWithWhereUniqueWithoutTanuloElorehaladasVInput[]
    createMany?: VizsgajelentkezesCreateManyTanuloElorehaladasVInputEnvelope
    set?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    disconnect?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    delete?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    connect?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    update?: VizsgajelentkezesUpdateWithWhereUniqueWithoutTanuloElorehaladasVInput | VizsgajelentkezesUpdateWithWhereUniqueWithoutTanuloElorehaladasVInput[]
    updateMany?: VizsgajelentkezesUpdateManyWithWhereWithoutTanuloElorehaladasVInput | VizsgajelentkezesUpdateManyWithWhereWithoutTanuloElorehaladasVInput[]
    deleteMany?: VizsgajelentkezesScalarWhereInput | VizsgajelentkezesScalarWhereInput[]
  }

  export type KifizetesekUncheckedUpdateManyWithoutTanuloElorehaladasNestedInput = {
    create?: XOR<KifizetesekCreateWithoutTanuloElorehaladasInput, KifizetesekUncheckedCreateWithoutTanuloElorehaladasInput> | KifizetesekCreateWithoutTanuloElorehaladasInput[] | KifizetesekUncheckedCreateWithoutTanuloElorehaladasInput[]
    connectOrCreate?: KifizetesekCreateOrConnectWithoutTanuloElorehaladasInput | KifizetesekCreateOrConnectWithoutTanuloElorehaladasInput[]
    upsert?: KifizetesekUpsertWithWhereUniqueWithoutTanuloElorehaladasInput | KifizetesekUpsertWithWhereUniqueWithoutTanuloElorehaladasInput[]
    createMany?: KifizetesekCreateManyTanuloElorehaladasInputEnvelope
    set?: KifizetesekWhereUniqueInput | KifizetesekWhereUniqueInput[]
    disconnect?: KifizetesekWhereUniqueInput | KifizetesekWhereUniqueInput[]
    delete?: KifizetesekWhereUniqueInput | KifizetesekWhereUniqueInput[]
    connect?: KifizetesekWhereUniqueInput | KifizetesekWhereUniqueInput[]
    update?: KifizetesekUpdateWithWhereUniqueWithoutTanuloElorehaladasInput | KifizetesekUpdateWithWhereUniqueWithoutTanuloElorehaladasInput[]
    updateMany?: KifizetesekUpdateManyWithWhereWithoutTanuloElorehaladasInput | KifizetesekUpdateManyWithWhereWithoutTanuloElorehaladasInput[]
    deleteMany?: KifizetesekScalarWhereInput | KifizetesekScalarWhereInput[]
  }

  export type VizsgajelentkezesUncheckedUpdateManyWithoutTanuloElorehaladasVNestedInput = {
    create?: XOR<VizsgajelentkezesCreateWithoutTanuloElorehaladasVInput, VizsgajelentkezesUncheckedCreateWithoutTanuloElorehaladasVInput> | VizsgajelentkezesCreateWithoutTanuloElorehaladasVInput[] | VizsgajelentkezesUncheckedCreateWithoutTanuloElorehaladasVInput[]
    connectOrCreate?: VizsgajelentkezesCreateOrConnectWithoutTanuloElorehaladasVInput | VizsgajelentkezesCreateOrConnectWithoutTanuloElorehaladasVInput[]
    upsert?: VizsgajelentkezesUpsertWithWhereUniqueWithoutTanuloElorehaladasVInput | VizsgajelentkezesUpsertWithWhereUniqueWithoutTanuloElorehaladasVInput[]
    createMany?: VizsgajelentkezesCreateManyTanuloElorehaladasVInputEnvelope
    set?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    disconnect?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    delete?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    connect?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    update?: VizsgajelentkezesUpdateWithWhereUniqueWithoutTanuloElorehaladasVInput | VizsgajelentkezesUpdateWithWhereUniqueWithoutTanuloElorehaladasVInput[]
    updateMany?: VizsgajelentkezesUpdateManyWithWhereWithoutTanuloElorehaladasVInput | VizsgajelentkezesUpdateManyWithWhereWithoutTanuloElorehaladasVInput[]
    deleteMany?: VizsgajelentkezesScalarWhereInput | VizsgajelentkezesScalarWhereInput[]
  }

  export type TanuloElorehaladasCreateNestedOneWithoutVizsgajelentkezesInput = {
    create?: XOR<TanuloElorehaladasCreateWithoutVizsgajelentkezesInput, TanuloElorehaladasUncheckedCreateWithoutVizsgajelentkezesInput>
    connectOrCreate?: TanuloElorehaladasCreateOrConnectWithoutVizsgajelentkezesInput
    connect?: TanuloElorehaladasWhereUniqueInput
  }

  export type VizsgakCreateNestedOneWithoutVizsgajelentkezesInput = {
    create?: XOR<VizsgakCreateWithoutVizsgajelentkezesInput, VizsgakUncheckedCreateWithoutVizsgajelentkezesInput>
    connectOrCreate?: VizsgakCreateOrConnectWithoutVizsgajelentkezesInput
    connect?: VizsgakWhereUniqueInput
  }

  export type TanuloElorehaladasUpdateOneRequiredWithoutVizsgajelentkezesNestedInput = {
    create?: XOR<TanuloElorehaladasCreateWithoutVizsgajelentkezesInput, TanuloElorehaladasUncheckedCreateWithoutVizsgajelentkezesInput>
    connectOrCreate?: TanuloElorehaladasCreateOrConnectWithoutVizsgajelentkezesInput
    upsert?: TanuloElorehaladasUpsertWithoutVizsgajelentkezesInput
    connect?: TanuloElorehaladasWhereUniqueInput
    update?: XOR<XOR<TanuloElorehaladasUpdateToOneWithWhereWithoutVizsgajelentkezesInput, TanuloElorehaladasUpdateWithoutVizsgajelentkezesInput>, TanuloElorehaladasUncheckedUpdateWithoutVizsgajelentkezesInput>
  }

  export type VizsgakUpdateOneRequiredWithoutVizsgajelentkezesNestedInput = {
    create?: XOR<VizsgakCreateWithoutVizsgajelentkezesInput, VizsgakUncheckedCreateWithoutVizsgajelentkezesInput>
    connectOrCreate?: VizsgakCreateOrConnectWithoutVizsgajelentkezesInput
    upsert?: VizsgakUpsertWithoutVizsgajelentkezesInput
    connect?: VizsgakWhereUniqueInput
    update?: XOR<XOR<VizsgakUpdateToOneWithWhereWithoutVizsgajelentkezesInput, VizsgakUpdateWithoutVizsgajelentkezesInput>, VizsgakUncheckedUpdateWithoutVizsgajelentkezesInput>
  }

  export type FelhasznalokCreateNestedOneWithoutVizsgakInput = {
    create?: XOR<FelhasznalokCreateWithoutVizsgakInput, FelhasznalokUncheckedCreateWithoutVizsgakInput>
    connectOrCreate?: FelhasznalokCreateOrConnectWithoutVizsgakInput
    connect?: FelhasznalokWhereUniqueInput
  }

  export type VizsgaTipusCreateNestedOneWithoutVizsgakInput = {
    create?: XOR<VizsgaTipusCreateWithoutVizsgakInput, VizsgaTipusUncheckedCreateWithoutVizsgakInput>
    connectOrCreate?: VizsgaTipusCreateOrConnectWithoutVizsgakInput
    connect?: VizsgaTipusWhereUniqueInput
  }

  export type VizsgajelentkezesCreateNestedManyWithoutVizsgakInput = {
    create?: XOR<VizsgajelentkezesCreateWithoutVizsgakInput, VizsgajelentkezesUncheckedCreateWithoutVizsgakInput> | VizsgajelentkezesCreateWithoutVizsgakInput[] | VizsgajelentkezesUncheckedCreateWithoutVizsgakInput[]
    connectOrCreate?: VizsgajelentkezesCreateOrConnectWithoutVizsgakInput | VizsgajelentkezesCreateOrConnectWithoutVizsgakInput[]
    createMany?: VizsgajelentkezesCreateManyVizsgakInputEnvelope
    connect?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
  }

  export type VizsgajelentkezesUncheckedCreateNestedManyWithoutVizsgakInput = {
    create?: XOR<VizsgajelentkezesCreateWithoutVizsgakInput, VizsgajelentkezesUncheckedCreateWithoutVizsgakInput> | VizsgajelentkezesCreateWithoutVizsgakInput[] | VizsgajelentkezesUncheckedCreateWithoutVizsgakInput[]
    connectOrCreate?: VizsgajelentkezesCreateOrConnectWithoutVizsgakInput | VizsgajelentkezesCreateOrConnectWithoutVizsgakInput[]
    createMany?: VizsgajelentkezesCreateManyVizsgakInputEnvelope
    connect?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
  }

  export type FelhasznalokUpdateOneWithoutVizsgakNestedInput = {
    create?: XOR<FelhasznalokCreateWithoutVizsgakInput, FelhasznalokUncheckedCreateWithoutVizsgakInput>
    connectOrCreate?: FelhasznalokCreateOrConnectWithoutVizsgakInput
    upsert?: FelhasznalokUpsertWithoutVizsgakInput
    disconnect?: FelhasznalokWhereInput | boolean
    delete?: FelhasznalokWhereInput | boolean
    connect?: FelhasznalokWhereUniqueInput
    update?: XOR<XOR<FelhasznalokUpdateToOneWithWhereWithoutVizsgakInput, FelhasznalokUpdateWithoutVizsgakInput>, FelhasznalokUncheckedUpdateWithoutVizsgakInput>
  }

  export type VizsgaTipusUpdateOneRequiredWithoutVizsgakNestedInput = {
    create?: XOR<VizsgaTipusCreateWithoutVizsgakInput, VizsgaTipusUncheckedCreateWithoutVizsgakInput>
    connectOrCreate?: VizsgaTipusCreateOrConnectWithoutVizsgakInput
    upsert?: VizsgaTipusUpsertWithoutVizsgakInput
    connect?: VizsgaTipusWhereUniqueInput
    update?: XOR<XOR<VizsgaTipusUpdateToOneWithWhereWithoutVizsgakInput, VizsgaTipusUpdateWithoutVizsgakInput>, VizsgaTipusUncheckedUpdateWithoutVizsgakInput>
  }

  export type VizsgajelentkezesUpdateManyWithoutVizsgakNestedInput = {
    create?: XOR<VizsgajelentkezesCreateWithoutVizsgakInput, VizsgajelentkezesUncheckedCreateWithoutVizsgakInput> | VizsgajelentkezesCreateWithoutVizsgakInput[] | VizsgajelentkezesUncheckedCreateWithoutVizsgakInput[]
    connectOrCreate?: VizsgajelentkezesCreateOrConnectWithoutVizsgakInput | VizsgajelentkezesCreateOrConnectWithoutVizsgakInput[]
    upsert?: VizsgajelentkezesUpsertWithWhereUniqueWithoutVizsgakInput | VizsgajelentkezesUpsertWithWhereUniqueWithoutVizsgakInput[]
    createMany?: VizsgajelentkezesCreateManyVizsgakInputEnvelope
    set?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    disconnect?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    delete?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    connect?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    update?: VizsgajelentkezesUpdateWithWhereUniqueWithoutVizsgakInput | VizsgajelentkezesUpdateWithWhereUniqueWithoutVizsgakInput[]
    updateMany?: VizsgajelentkezesUpdateManyWithWhereWithoutVizsgakInput | VizsgajelentkezesUpdateManyWithWhereWithoutVizsgakInput[]
    deleteMany?: VizsgajelentkezesScalarWhereInput | VizsgajelentkezesScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VizsgajelentkezesUncheckedUpdateManyWithoutVizsgakNestedInput = {
    create?: XOR<VizsgajelentkezesCreateWithoutVizsgakInput, VizsgajelentkezesUncheckedCreateWithoutVizsgakInput> | VizsgajelentkezesCreateWithoutVizsgakInput[] | VizsgajelentkezesUncheckedCreateWithoutVizsgakInput[]
    connectOrCreate?: VizsgajelentkezesCreateOrConnectWithoutVizsgakInput | VizsgajelentkezesCreateOrConnectWithoutVizsgakInput[]
    upsert?: VizsgajelentkezesUpsertWithWhereUniqueWithoutVizsgakInput | VizsgajelentkezesUpsertWithWhereUniqueWithoutVizsgakInput[]
    createMany?: VizsgajelentkezesCreateManyVizsgakInputEnvelope
    set?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    disconnect?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    delete?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    connect?: VizsgajelentkezesWhereUniqueInput | VizsgajelentkezesWhereUniqueInput[]
    update?: VizsgajelentkezesUpdateWithWhereUniqueWithoutVizsgakInput | VizsgajelentkezesUpdateWithWhereUniqueWithoutVizsgakInput[]
    updateMany?: VizsgajelentkezesUpdateManyWithWhereWithoutVizsgakInput | VizsgajelentkezesUpdateManyWithWhereWithoutVizsgakInput[]
    deleteMany?: VizsgajelentkezesScalarWhereInput | VizsgajelentkezesScalarWhereInput[]
  }

  export type VizsgakCreateNestedManyWithoutVizsgaTipusInput = {
    create?: XOR<VizsgakCreateWithoutVizsgaTipusInput, VizsgakUncheckedCreateWithoutVizsgaTipusInput> | VizsgakCreateWithoutVizsgaTipusInput[] | VizsgakUncheckedCreateWithoutVizsgaTipusInput[]
    connectOrCreate?: VizsgakCreateOrConnectWithoutVizsgaTipusInput | VizsgakCreateOrConnectWithoutVizsgaTipusInput[]
    createMany?: VizsgakCreateManyVizsgaTipusInputEnvelope
    connect?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
  }

  export type VizsgakUncheckedCreateNestedManyWithoutVizsgaTipusInput = {
    create?: XOR<VizsgakCreateWithoutVizsgaTipusInput, VizsgakUncheckedCreateWithoutVizsgaTipusInput> | VizsgakCreateWithoutVizsgaTipusInput[] | VizsgakUncheckedCreateWithoutVizsgaTipusInput[]
    connectOrCreate?: VizsgakCreateOrConnectWithoutVizsgaTipusInput | VizsgakCreateOrConnectWithoutVizsgaTipusInput[]
    createMany?: VizsgakCreateManyVizsgaTipusInputEnvelope
    connect?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
  }

  export type VizsgakUpdateManyWithoutVizsgaTipusNestedInput = {
    create?: XOR<VizsgakCreateWithoutVizsgaTipusInput, VizsgakUncheckedCreateWithoutVizsgaTipusInput> | VizsgakCreateWithoutVizsgaTipusInput[] | VizsgakUncheckedCreateWithoutVizsgaTipusInput[]
    connectOrCreate?: VizsgakCreateOrConnectWithoutVizsgaTipusInput | VizsgakCreateOrConnectWithoutVizsgaTipusInput[]
    upsert?: VizsgakUpsertWithWhereUniqueWithoutVizsgaTipusInput | VizsgakUpsertWithWhereUniqueWithoutVizsgaTipusInput[]
    createMany?: VizsgakCreateManyVizsgaTipusInputEnvelope
    set?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    disconnect?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    delete?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    connect?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    update?: VizsgakUpdateWithWhereUniqueWithoutVizsgaTipusInput | VizsgakUpdateWithWhereUniqueWithoutVizsgaTipusInput[]
    updateMany?: VizsgakUpdateManyWithWhereWithoutVizsgaTipusInput | VizsgakUpdateManyWithWhereWithoutVizsgaTipusInput[]
    deleteMany?: VizsgakScalarWhereInput | VizsgakScalarWhereInput[]
  }

  export type VizsgakUncheckedUpdateManyWithoutVizsgaTipusNestedInput = {
    create?: XOR<VizsgakCreateWithoutVizsgaTipusInput, VizsgakUncheckedCreateWithoutVizsgaTipusInput> | VizsgakCreateWithoutVizsgaTipusInput[] | VizsgakUncheckedCreateWithoutVizsgaTipusInput[]
    connectOrCreate?: VizsgakCreateOrConnectWithoutVizsgaTipusInput | VizsgakCreateOrConnectWithoutVizsgaTipusInput[]
    upsert?: VizsgakUpsertWithWhereUniqueWithoutVizsgaTipusInput | VizsgakUpsertWithWhereUniqueWithoutVizsgaTipusInput[]
    createMany?: VizsgakCreateManyVizsgaTipusInputEnvelope
    set?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    disconnect?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    delete?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    connect?: VizsgakWhereUniqueInput | VizsgakWhereUniqueInput[]
    update?: VizsgakUpdateWithWhereUniqueWithoutVizsgaTipusInput | VizsgakUpdateWithWhereUniqueWithoutVizsgaTipusInput[]
    updateMany?: VizsgakUpdateManyWithWhereWithoutVizsgaTipusInput | VizsgakUpdateManyWithWhereWithoutVizsgaTipusInput[]
    deleteMany?: VizsgakScalarWhereInput | VizsgakScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type JogkorokCreateWithoutFelhasznalokInput = {
    jogkor: number
  }

  export type JogkorokUncheckedCreateWithoutFelhasznalokInput = {
    jogkor_id?: number
    jogkor: number
  }

  export type JogkorokCreateOrConnectWithoutFelhasznalokInput = {
    where: JogkorokWhereUniqueInput
    create: XOR<JogkorokCreateWithoutFelhasznalokInput, JogkorokUncheckedCreateWithoutFelhasznalokInput>
  }

  export type OrarendCreateWithoutFelhasznalokInput = {
    Orak: OrakCreateNestedOneWithoutOrarendInput
  }

  export type OrarendUncheckedCreateWithoutFelhasznalokInput = {
    orarend_id?: number
    ora_id: number
  }

  export type OrarendCreateOrConnectWithoutFelhasznalokInput = {
    where: OrarendWhereUniqueInput
    create: XOR<OrarendCreateWithoutFelhasznalokInput, OrarendUncheckedCreateWithoutFelhasznalokInput>
  }

  export type OrarendCreateManyFelhasznalokInputEnvelope = {
    data: OrarendCreateManyFelhasznalokInput | OrarendCreateManyFelhasznalokInput[]
    skipDuplicates?: boolean
  }

  export type VizsgakCreateWithoutFelhasznalokInput = {
    vizsga_datuma: Date | string
    sikeres?: boolean
    VizsgaTipus: VizsgaTipusCreateNestedOneWithoutVizsgakInput
    Vizsgajelentkezes?: VizsgajelentkezesCreateNestedManyWithoutVizsgakInput
  }

  export type VizsgakUncheckedCreateWithoutFelhasznalokInput = {
    vizsga_id?: number
    vizsga_datuma: Date | string
    tipus_id: number
    sikeres?: boolean
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedCreateNestedManyWithoutVizsgakInput
  }

  export type VizsgakCreateOrConnectWithoutFelhasznalokInput = {
    where: VizsgakWhereUniqueInput
    create: XOR<VizsgakCreateWithoutFelhasznalokInput, VizsgakUncheckedCreateWithoutFelhasznalokInput>
  }

  export type VizsgakCreateManyFelhasznalokInputEnvelope = {
    data: VizsgakCreateManyFelhasznalokInput | VizsgakCreateManyFelhasznalokInput[]
    skipDuplicates?: boolean
  }

  export type TanuloElorehaladasCreateWithoutFelhasznalokTanuloInput = {
    levezetett_orak?: number
    Kifizetesek?: KifizetesekCreateNestedManyWithoutTanuloElorehaladasInput
    FelhasznalokOktato: FelhasznalokCreateNestedOneWithoutTanuloElorehaladasVInput
    Vizsgajelentkezes?: VizsgajelentkezesCreateNestedManyWithoutTanuloElorehaladasVInput
  }

  export type TanuloElorehaladasUncheckedCreateWithoutFelhasznalokTanuloInput = {
    elorehaladas_id?: number
    oktato_id: number
    levezetett_orak?: number
    Kifizetesek?: KifizetesekUncheckedCreateNestedManyWithoutTanuloElorehaladasInput
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedCreateNestedManyWithoutTanuloElorehaladasVInput
  }

  export type TanuloElorehaladasCreateOrConnectWithoutFelhasznalokTanuloInput = {
    where: TanuloElorehaladasWhereUniqueInput
    create: XOR<TanuloElorehaladasCreateWithoutFelhasznalokTanuloInput, TanuloElorehaladasUncheckedCreateWithoutFelhasznalokTanuloInput>
  }

  export type TanuloElorehaladasCreateManyFelhasznalokTanuloInputEnvelope = {
    data: TanuloElorehaladasCreateManyFelhasznalokTanuloInput | TanuloElorehaladasCreateManyFelhasznalokTanuloInput[]
    skipDuplicates?: boolean
  }

  export type TanuloElorehaladasCreateWithoutFelhasznalokOktatoInput = {
    levezetett_orak?: number
    Kifizetesek?: KifizetesekCreateNestedManyWithoutTanuloElorehaladasInput
    FelhasznalokTanulo: FelhasznalokCreateNestedOneWithoutTanuloElorehaladasInput
    Vizsgajelentkezes?: VizsgajelentkezesCreateNestedManyWithoutTanuloElorehaladasVInput
  }

  export type TanuloElorehaladasUncheckedCreateWithoutFelhasznalokOktatoInput = {
    elorehaladas_id?: number
    tanulo_id: number
    levezetett_orak?: number
    Kifizetesek?: KifizetesekUncheckedCreateNestedManyWithoutTanuloElorehaladasInput
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedCreateNestedManyWithoutTanuloElorehaladasVInput
  }

  export type TanuloElorehaladasCreateOrConnectWithoutFelhasznalokOktatoInput = {
    where: TanuloElorehaladasWhereUniqueInput
    create: XOR<TanuloElorehaladasCreateWithoutFelhasznalokOktatoInput, TanuloElorehaladasUncheckedCreateWithoutFelhasznalokOktatoInput>
  }

  export type TanuloElorehaladasCreateManyFelhasznalokOktatoInputEnvelope = {
    data: TanuloElorehaladasCreateManyFelhasznalokOktatoInput | TanuloElorehaladasCreateManyFelhasznalokOktatoInput[]
    skipDuplicates?: boolean
  }

  export type JogkorokUpsertWithoutFelhasznalokInput = {
    update: XOR<JogkorokUpdateWithoutFelhasznalokInput, JogkorokUncheckedUpdateWithoutFelhasznalokInput>
    create: XOR<JogkorokCreateWithoutFelhasznalokInput, JogkorokUncheckedCreateWithoutFelhasznalokInput>
    where?: JogkorokWhereInput
  }

  export type JogkorokUpdateToOneWithWhereWithoutFelhasznalokInput = {
    where?: JogkorokWhereInput
    data: XOR<JogkorokUpdateWithoutFelhasznalokInput, JogkorokUncheckedUpdateWithoutFelhasznalokInput>
  }

  export type JogkorokUpdateWithoutFelhasznalokInput = {
    jogkor?: IntFieldUpdateOperationsInput | number
  }

  export type JogkorokUncheckedUpdateWithoutFelhasznalokInput = {
    jogkor_id?: IntFieldUpdateOperationsInput | number
    jogkor?: IntFieldUpdateOperationsInput | number
  }

  export type OrarendUpsertWithWhereUniqueWithoutFelhasznalokInput = {
    where: OrarendWhereUniqueInput
    update: XOR<OrarendUpdateWithoutFelhasznalokInput, OrarendUncheckedUpdateWithoutFelhasznalokInput>
    create: XOR<OrarendCreateWithoutFelhasznalokInput, OrarendUncheckedCreateWithoutFelhasznalokInput>
  }

  export type OrarendUpdateWithWhereUniqueWithoutFelhasznalokInput = {
    where: OrarendWhereUniqueInput
    data: XOR<OrarendUpdateWithoutFelhasznalokInput, OrarendUncheckedUpdateWithoutFelhasznalokInput>
  }

  export type OrarendUpdateManyWithWhereWithoutFelhasznalokInput = {
    where: OrarendScalarWhereInput
    data: XOR<OrarendUpdateManyMutationInput, OrarendUncheckedUpdateManyWithoutFelhasznalokInput>
  }

  export type OrarendScalarWhereInput = {
    AND?: OrarendScalarWhereInput | OrarendScalarWhereInput[]
    OR?: OrarendScalarWhereInput[]
    NOT?: OrarendScalarWhereInput | OrarendScalarWhereInput[]
    orarend_id?: IntFilter<"Orarend"> | number
    ora_id?: IntFilter<"Orarend"> | number
    felhasznalo_id?: IntFilter<"Orarend"> | number
  }

  export type VizsgakUpsertWithWhereUniqueWithoutFelhasznalokInput = {
    where: VizsgakWhereUniqueInput
    update: XOR<VizsgakUpdateWithoutFelhasznalokInput, VizsgakUncheckedUpdateWithoutFelhasznalokInput>
    create: XOR<VizsgakCreateWithoutFelhasznalokInput, VizsgakUncheckedCreateWithoutFelhasznalokInput>
  }

  export type VizsgakUpdateWithWhereUniqueWithoutFelhasznalokInput = {
    where: VizsgakWhereUniqueInput
    data: XOR<VizsgakUpdateWithoutFelhasznalokInput, VizsgakUncheckedUpdateWithoutFelhasznalokInput>
  }

  export type VizsgakUpdateManyWithWhereWithoutFelhasznalokInput = {
    where: VizsgakScalarWhereInput
    data: XOR<VizsgakUpdateManyMutationInput, VizsgakUncheckedUpdateManyWithoutFelhasznalokInput>
  }

  export type VizsgakScalarWhereInput = {
    AND?: VizsgakScalarWhereInput | VizsgakScalarWhereInput[]
    OR?: VizsgakScalarWhereInput[]
    NOT?: VizsgakScalarWhereInput | VizsgakScalarWhereInput[]
    vizsga_id?: IntFilter<"Vizsgak"> | number
    vizsgabiztos_id?: IntNullableFilter<"Vizsgak"> | number | null
    vizsga_datuma?: DateTimeFilter<"Vizsgak"> | Date | string
    tipus_id?: IntFilter<"Vizsgak"> | number
    sikeres?: BoolFilter<"Vizsgak"> | boolean
  }

  export type TanuloElorehaladasUpsertWithWhereUniqueWithoutFelhasznalokTanuloInput = {
    where: TanuloElorehaladasWhereUniqueInput
    update: XOR<TanuloElorehaladasUpdateWithoutFelhasznalokTanuloInput, TanuloElorehaladasUncheckedUpdateWithoutFelhasznalokTanuloInput>
    create: XOR<TanuloElorehaladasCreateWithoutFelhasznalokTanuloInput, TanuloElorehaladasUncheckedCreateWithoutFelhasznalokTanuloInput>
  }

  export type TanuloElorehaladasUpdateWithWhereUniqueWithoutFelhasznalokTanuloInput = {
    where: TanuloElorehaladasWhereUniqueInput
    data: XOR<TanuloElorehaladasUpdateWithoutFelhasznalokTanuloInput, TanuloElorehaladasUncheckedUpdateWithoutFelhasznalokTanuloInput>
  }

  export type TanuloElorehaladasUpdateManyWithWhereWithoutFelhasznalokTanuloInput = {
    where: TanuloElorehaladasScalarWhereInput
    data: XOR<TanuloElorehaladasUpdateManyMutationInput, TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokTanuloInput>
  }

  export type TanuloElorehaladasScalarWhereInput = {
    AND?: TanuloElorehaladasScalarWhereInput | TanuloElorehaladasScalarWhereInput[]
    OR?: TanuloElorehaladasScalarWhereInput[]
    NOT?: TanuloElorehaladasScalarWhereInput | TanuloElorehaladasScalarWhereInput[]
    elorehaladas_id?: IntFilter<"TanuloElorehaladas"> | number
    tanulo_id?: IntFilter<"TanuloElorehaladas"> | number
    oktato_id?: IntFilter<"TanuloElorehaladas"> | number
    levezetett_orak?: IntFilter<"TanuloElorehaladas"> | number
  }

  export type TanuloElorehaladasUpsertWithWhereUniqueWithoutFelhasznalokOktatoInput = {
    where: TanuloElorehaladasWhereUniqueInput
    update: XOR<TanuloElorehaladasUpdateWithoutFelhasznalokOktatoInput, TanuloElorehaladasUncheckedUpdateWithoutFelhasznalokOktatoInput>
    create: XOR<TanuloElorehaladasCreateWithoutFelhasznalokOktatoInput, TanuloElorehaladasUncheckedCreateWithoutFelhasznalokOktatoInput>
  }

  export type TanuloElorehaladasUpdateWithWhereUniqueWithoutFelhasznalokOktatoInput = {
    where: TanuloElorehaladasWhereUniqueInput
    data: XOR<TanuloElorehaladasUpdateWithoutFelhasznalokOktatoInput, TanuloElorehaladasUncheckedUpdateWithoutFelhasznalokOktatoInput>
  }

  export type TanuloElorehaladasUpdateManyWithWhereWithoutFelhasznalokOktatoInput = {
    where: TanuloElorehaladasScalarWhereInput
    data: XOR<TanuloElorehaladasUpdateManyMutationInput, TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokOktatoInput>
  }

  export type FelhasznalokCreateWithoutJogkorokInput = {
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    Orarend?: OrarendCreateNestedManyWithoutFelhasznalokInput
    Vizsgak?: VizsgakCreateNestedManyWithoutFelhasznalokInput
    TanuloElorehaladas?: TanuloElorehaladasCreateNestedManyWithoutFelhasznalokTanuloInput
    TanuloElorehaladasV?: TanuloElorehaladasCreateNestedManyWithoutFelhasznalokOktatoInput
  }

  export type FelhasznalokUncheckedCreateWithoutJogkorokInput = {
    felhasznalo_id?: number
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    Orarend?: OrarendUncheckedCreateNestedManyWithoutFelhasznalokInput
    Vizsgak?: VizsgakUncheckedCreateNestedManyWithoutFelhasznalokInput
    TanuloElorehaladas?: TanuloElorehaladasUncheckedCreateNestedManyWithoutFelhasznalokTanuloInput
    TanuloElorehaladasV?: TanuloElorehaladasUncheckedCreateNestedManyWithoutFelhasznalokOktatoInput
  }

  export type FelhasznalokCreateOrConnectWithoutJogkorokInput = {
    where: FelhasznalokWhereUniqueInput
    create: XOR<FelhasznalokCreateWithoutJogkorokInput, FelhasznalokUncheckedCreateWithoutJogkorokInput>
  }

  export type FelhasznalokCreateManyJogkorokInputEnvelope = {
    data: FelhasznalokCreateManyJogkorokInput | FelhasznalokCreateManyJogkorokInput[]
    skipDuplicates?: boolean
  }

  export type FelhasznalokUpsertWithWhereUniqueWithoutJogkorokInput = {
    where: FelhasznalokWhereUniqueInput
    update: XOR<FelhasznalokUpdateWithoutJogkorokInput, FelhasznalokUncheckedUpdateWithoutJogkorokInput>
    create: XOR<FelhasznalokCreateWithoutJogkorokInput, FelhasznalokUncheckedCreateWithoutJogkorokInput>
  }

  export type FelhasznalokUpdateWithWhereUniqueWithoutJogkorokInput = {
    where: FelhasznalokWhereUniqueInput
    data: XOR<FelhasznalokUpdateWithoutJogkorokInput, FelhasznalokUncheckedUpdateWithoutJogkorokInput>
  }

  export type FelhasznalokUpdateManyWithWhereWithoutJogkorokInput = {
    where: FelhasznalokScalarWhereInput
    data: XOR<FelhasznalokUpdateManyMutationInput, FelhasznalokUncheckedUpdateManyWithoutJogkorokInput>
  }

  export type FelhasznalokScalarWhereInput = {
    AND?: FelhasznalokScalarWhereInput | FelhasznalokScalarWhereInput[]
    OR?: FelhasznalokScalarWhereInput[]
    NOT?: FelhasznalokScalarWhereInput | FelhasznalokScalarWhereInput[]
    felhasznalo_id?: IntFilter<"Felhasznalok"> | number
    vezeteknev?: StringFilter<"Felhasznalok"> | string
    keresztnev?: StringFilter<"Felhasznalok"> | string
    email?: StringFilter<"Felhasznalok"> | string
    jelszo?: StringFilter<"Felhasznalok"> | string
    bankszamla?: StringFilter<"Felhasznalok"> | string
    jogkor_id?: IntFilter<"Felhasznalok"> | number
  }

  export type TanuloElorehaladasCreateWithoutKifizetesekInput = {
    levezetett_orak?: number
    FelhasznalokTanulo: FelhasznalokCreateNestedOneWithoutTanuloElorehaladasInput
    FelhasznalokOktato: FelhasznalokCreateNestedOneWithoutTanuloElorehaladasVInput
    Vizsgajelentkezes?: VizsgajelentkezesCreateNestedManyWithoutTanuloElorehaladasVInput
  }

  export type TanuloElorehaladasUncheckedCreateWithoutKifizetesekInput = {
    elorehaladas_id?: number
    tanulo_id: number
    oktato_id: number
    levezetett_orak?: number
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedCreateNestedManyWithoutTanuloElorehaladasVInput
  }

  export type TanuloElorehaladasCreateOrConnectWithoutKifizetesekInput = {
    where: TanuloElorehaladasWhereUniqueInput
    create: XOR<TanuloElorehaladasCreateWithoutKifizetesekInput, TanuloElorehaladasUncheckedCreateWithoutKifizetesekInput>
  }

  export type TanuloElorehaladasUpsertWithoutKifizetesekInput = {
    update: XOR<TanuloElorehaladasUpdateWithoutKifizetesekInput, TanuloElorehaladasUncheckedUpdateWithoutKifizetesekInput>
    create: XOR<TanuloElorehaladasCreateWithoutKifizetesekInput, TanuloElorehaladasUncheckedCreateWithoutKifizetesekInput>
    where?: TanuloElorehaladasWhereInput
  }

  export type TanuloElorehaladasUpdateToOneWithWhereWithoutKifizetesekInput = {
    where?: TanuloElorehaladasWhereInput
    data: XOR<TanuloElorehaladasUpdateWithoutKifizetesekInput, TanuloElorehaladasUncheckedUpdateWithoutKifizetesekInput>
  }

  export type TanuloElorehaladasUpdateWithoutKifizetesekInput = {
    levezetett_orak?: IntFieldUpdateOperationsInput | number
    FelhasznalokTanulo?: FelhasznalokUpdateOneRequiredWithoutTanuloElorehaladasNestedInput
    FelhasznalokOktato?: FelhasznalokUpdateOneRequiredWithoutTanuloElorehaladasVNestedInput
    Vizsgajelentkezes?: VizsgajelentkezesUpdateManyWithoutTanuloElorehaladasVNestedInput
  }

  export type TanuloElorehaladasUncheckedUpdateWithoutKifizetesekInput = {
    elorehaladas_id?: IntFieldUpdateOperationsInput | number
    tanulo_id?: IntFieldUpdateOperationsInput | number
    oktato_id?: IntFieldUpdateOperationsInput | number
    levezetett_orak?: IntFieldUpdateOperationsInput | number
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedUpdateManyWithoutTanuloElorehaladasVNestedInput
  }

  export type OrarendCreateWithoutOrakInput = {
    Felhasznalok: FelhasznalokCreateNestedOneWithoutOrarendInput
  }

  export type OrarendUncheckedCreateWithoutOrakInput = {
    orarend_id?: number
    felhasznalo_id: number
  }

  export type OrarendCreateOrConnectWithoutOrakInput = {
    where: OrarendWhereUniqueInput
    create: XOR<OrarendCreateWithoutOrakInput, OrarendUncheckedCreateWithoutOrakInput>
  }

  export type OrarendCreateManyOrakInputEnvelope = {
    data: OrarendCreateManyOrakInput | OrarendCreateManyOrakInput[]
    skipDuplicates?: boolean
  }

  export type OrarendUpsertWithWhereUniqueWithoutOrakInput = {
    where: OrarendWhereUniqueInput
    update: XOR<OrarendUpdateWithoutOrakInput, OrarendUncheckedUpdateWithoutOrakInput>
    create: XOR<OrarendCreateWithoutOrakInput, OrarendUncheckedCreateWithoutOrakInput>
  }

  export type OrarendUpdateWithWhereUniqueWithoutOrakInput = {
    where: OrarendWhereUniqueInput
    data: XOR<OrarendUpdateWithoutOrakInput, OrarendUncheckedUpdateWithoutOrakInput>
  }

  export type OrarendUpdateManyWithWhereWithoutOrakInput = {
    where: OrarendScalarWhereInput
    data: XOR<OrarendUpdateManyMutationInput, OrarendUncheckedUpdateManyWithoutOrakInput>
  }

  export type FelhasznalokCreateWithoutOrarendInput = {
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    Jogkorok: JogkorokCreateNestedOneWithoutFelhasznalokInput
    Vizsgak?: VizsgakCreateNestedManyWithoutFelhasznalokInput
    TanuloElorehaladas?: TanuloElorehaladasCreateNestedManyWithoutFelhasznalokTanuloInput
    TanuloElorehaladasV?: TanuloElorehaladasCreateNestedManyWithoutFelhasznalokOktatoInput
  }

  export type FelhasznalokUncheckedCreateWithoutOrarendInput = {
    felhasznalo_id?: number
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    jogkor_id: number
    Vizsgak?: VizsgakUncheckedCreateNestedManyWithoutFelhasznalokInput
    TanuloElorehaladas?: TanuloElorehaladasUncheckedCreateNestedManyWithoutFelhasznalokTanuloInput
    TanuloElorehaladasV?: TanuloElorehaladasUncheckedCreateNestedManyWithoutFelhasznalokOktatoInput
  }

  export type FelhasznalokCreateOrConnectWithoutOrarendInput = {
    where: FelhasznalokWhereUniqueInput
    create: XOR<FelhasznalokCreateWithoutOrarendInput, FelhasznalokUncheckedCreateWithoutOrarendInput>
  }

  export type OrakCreateWithoutOrarendInput = {
    idopont_eleje: Date | string
    idopont_vege: Date | string
    cim?: string | null
    helyszin?: string | null
  }

  export type OrakUncheckedCreateWithoutOrarendInput = {
    ora_id?: number
    idopont_eleje: Date | string
    idopont_vege: Date | string
    cim?: string | null
    helyszin?: string | null
  }

  export type OrakCreateOrConnectWithoutOrarendInput = {
    where: OrakWhereUniqueInput
    create: XOR<OrakCreateWithoutOrarendInput, OrakUncheckedCreateWithoutOrarendInput>
  }

  export type FelhasznalokUpsertWithoutOrarendInput = {
    update: XOR<FelhasznalokUpdateWithoutOrarendInput, FelhasznalokUncheckedUpdateWithoutOrarendInput>
    create: XOR<FelhasznalokCreateWithoutOrarendInput, FelhasznalokUncheckedCreateWithoutOrarendInput>
    where?: FelhasznalokWhereInput
  }

  export type FelhasznalokUpdateToOneWithWhereWithoutOrarendInput = {
    where?: FelhasznalokWhereInput
    data: XOR<FelhasznalokUpdateWithoutOrarendInput, FelhasznalokUncheckedUpdateWithoutOrarendInput>
  }

  export type FelhasznalokUpdateWithoutOrarendInput = {
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
    Jogkorok?: JogkorokUpdateOneRequiredWithoutFelhasznalokNestedInput
    Vizsgak?: VizsgakUpdateManyWithoutFelhasznalokNestedInput
    TanuloElorehaladas?: TanuloElorehaladasUpdateManyWithoutFelhasznalokTanuloNestedInput
    TanuloElorehaladasV?: TanuloElorehaladasUpdateManyWithoutFelhasznalokOktatoNestedInput
  }

  export type FelhasznalokUncheckedUpdateWithoutOrarendInput = {
    felhasznalo_id?: IntFieldUpdateOperationsInput | number
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
    jogkor_id?: IntFieldUpdateOperationsInput | number
    Vizsgak?: VizsgakUncheckedUpdateManyWithoutFelhasznalokNestedInput
    TanuloElorehaladas?: TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokTanuloNestedInput
    TanuloElorehaladasV?: TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokOktatoNestedInput
  }

  export type OrakUpsertWithoutOrarendInput = {
    update: XOR<OrakUpdateWithoutOrarendInput, OrakUncheckedUpdateWithoutOrarendInput>
    create: XOR<OrakCreateWithoutOrarendInput, OrakUncheckedCreateWithoutOrarendInput>
    where?: OrakWhereInput
  }

  export type OrakUpdateToOneWithWhereWithoutOrarendInput = {
    where?: OrakWhereInput
    data: XOR<OrakUpdateWithoutOrarendInput, OrakUncheckedUpdateWithoutOrarendInput>
  }

  export type OrakUpdateWithoutOrarendInput = {
    idopont_eleje?: DateTimeFieldUpdateOperationsInput | Date | string
    idopont_vege?: DateTimeFieldUpdateOperationsInput | Date | string
    cim?: NullableStringFieldUpdateOperationsInput | string | null
    helyszin?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrakUncheckedUpdateWithoutOrarendInput = {
    ora_id?: IntFieldUpdateOperationsInput | number
    idopont_eleje?: DateTimeFieldUpdateOperationsInput | Date | string
    idopont_vege?: DateTimeFieldUpdateOperationsInput | Date | string
    cim?: NullableStringFieldUpdateOperationsInput | string | null
    helyszin?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KifizetesekCreateWithoutTanuloElorehaladasInput = {
    targy: string
    osszeg: number
    kifizetve?: boolean
  }

  export type KifizetesekUncheckedCreateWithoutTanuloElorehaladasInput = {
    kifizetes_id?: number
    targy: string
    osszeg: number
    kifizetve?: boolean
  }

  export type KifizetesekCreateOrConnectWithoutTanuloElorehaladasInput = {
    where: KifizetesekWhereUniqueInput
    create: XOR<KifizetesekCreateWithoutTanuloElorehaladasInput, KifizetesekUncheckedCreateWithoutTanuloElorehaladasInput>
  }

  export type KifizetesekCreateManyTanuloElorehaladasInputEnvelope = {
    data: KifizetesekCreateManyTanuloElorehaladasInput | KifizetesekCreateManyTanuloElorehaladasInput[]
    skipDuplicates?: boolean
  }

  export type FelhasznalokCreateWithoutTanuloElorehaladasInput = {
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    Jogkorok: JogkorokCreateNestedOneWithoutFelhasznalokInput
    Orarend?: OrarendCreateNestedManyWithoutFelhasznalokInput
    Vizsgak?: VizsgakCreateNestedManyWithoutFelhasznalokInput
    TanuloElorehaladasV?: TanuloElorehaladasCreateNestedManyWithoutFelhasznalokOktatoInput
  }

  export type FelhasznalokUncheckedCreateWithoutTanuloElorehaladasInput = {
    felhasznalo_id?: number
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    jogkor_id: number
    Orarend?: OrarendUncheckedCreateNestedManyWithoutFelhasznalokInput
    Vizsgak?: VizsgakUncheckedCreateNestedManyWithoutFelhasznalokInput
    TanuloElorehaladasV?: TanuloElorehaladasUncheckedCreateNestedManyWithoutFelhasznalokOktatoInput
  }

  export type FelhasznalokCreateOrConnectWithoutTanuloElorehaladasInput = {
    where: FelhasznalokWhereUniqueInput
    create: XOR<FelhasznalokCreateWithoutTanuloElorehaladasInput, FelhasznalokUncheckedCreateWithoutTanuloElorehaladasInput>
  }

  export type FelhasznalokCreateWithoutTanuloElorehaladasVInput = {
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    Jogkorok: JogkorokCreateNestedOneWithoutFelhasznalokInput
    Orarend?: OrarendCreateNestedManyWithoutFelhasznalokInput
    Vizsgak?: VizsgakCreateNestedManyWithoutFelhasznalokInput
    TanuloElorehaladas?: TanuloElorehaladasCreateNestedManyWithoutFelhasznalokTanuloInput
  }

  export type FelhasznalokUncheckedCreateWithoutTanuloElorehaladasVInput = {
    felhasznalo_id?: number
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    jogkor_id: number
    Orarend?: OrarendUncheckedCreateNestedManyWithoutFelhasznalokInput
    Vizsgak?: VizsgakUncheckedCreateNestedManyWithoutFelhasznalokInput
    TanuloElorehaladas?: TanuloElorehaladasUncheckedCreateNestedManyWithoutFelhasznalokTanuloInput
  }

  export type FelhasznalokCreateOrConnectWithoutTanuloElorehaladasVInput = {
    where: FelhasznalokWhereUniqueInput
    create: XOR<FelhasznalokCreateWithoutTanuloElorehaladasVInput, FelhasznalokUncheckedCreateWithoutTanuloElorehaladasVInput>
  }

  export type VizsgajelentkezesCreateWithoutTanuloElorehaladasVInput = {
    oktato_jovahagyas?: boolean
    Vizsgak: VizsgakCreateNestedOneWithoutVizsgajelentkezesInput
  }

  export type VizsgajelentkezesUncheckedCreateWithoutTanuloElorehaladasVInput = {
    vizsgajelentkezes_id?: number
    vizsga_id: number
    oktato_jovahagyas?: boolean
  }

  export type VizsgajelentkezesCreateOrConnectWithoutTanuloElorehaladasVInput = {
    where: VizsgajelentkezesWhereUniqueInput
    create: XOR<VizsgajelentkezesCreateWithoutTanuloElorehaladasVInput, VizsgajelentkezesUncheckedCreateWithoutTanuloElorehaladasVInput>
  }

  export type VizsgajelentkezesCreateManyTanuloElorehaladasVInputEnvelope = {
    data: VizsgajelentkezesCreateManyTanuloElorehaladasVInput | VizsgajelentkezesCreateManyTanuloElorehaladasVInput[]
    skipDuplicates?: boolean
  }

  export type KifizetesekUpsertWithWhereUniqueWithoutTanuloElorehaladasInput = {
    where: KifizetesekWhereUniqueInput
    update: XOR<KifizetesekUpdateWithoutTanuloElorehaladasInput, KifizetesekUncheckedUpdateWithoutTanuloElorehaladasInput>
    create: XOR<KifizetesekCreateWithoutTanuloElorehaladasInput, KifizetesekUncheckedCreateWithoutTanuloElorehaladasInput>
  }

  export type KifizetesekUpdateWithWhereUniqueWithoutTanuloElorehaladasInput = {
    where: KifizetesekWhereUniqueInput
    data: XOR<KifizetesekUpdateWithoutTanuloElorehaladasInput, KifizetesekUncheckedUpdateWithoutTanuloElorehaladasInput>
  }

  export type KifizetesekUpdateManyWithWhereWithoutTanuloElorehaladasInput = {
    where: KifizetesekScalarWhereInput
    data: XOR<KifizetesekUpdateManyMutationInput, KifizetesekUncheckedUpdateManyWithoutTanuloElorehaladasInput>
  }

  export type KifizetesekScalarWhereInput = {
    AND?: KifizetesekScalarWhereInput | KifizetesekScalarWhereInput[]
    OR?: KifizetesekScalarWhereInput[]
    NOT?: KifizetesekScalarWhereInput | KifizetesekScalarWhereInput[]
    kifizetes_id?: IntFilter<"Kifizetesek"> | number
    elorehaladas_id?: IntFilter<"Kifizetesek"> | number
    targy?: StringFilter<"Kifizetesek"> | string
    osszeg?: IntFilter<"Kifizetesek"> | number
    kifizetve?: BoolFilter<"Kifizetesek"> | boolean
  }

  export type FelhasznalokUpsertWithoutTanuloElorehaladasInput = {
    update: XOR<FelhasznalokUpdateWithoutTanuloElorehaladasInput, FelhasznalokUncheckedUpdateWithoutTanuloElorehaladasInput>
    create: XOR<FelhasznalokCreateWithoutTanuloElorehaladasInput, FelhasznalokUncheckedCreateWithoutTanuloElorehaladasInput>
    where?: FelhasznalokWhereInput
  }

  export type FelhasznalokUpdateToOneWithWhereWithoutTanuloElorehaladasInput = {
    where?: FelhasznalokWhereInput
    data: XOR<FelhasznalokUpdateWithoutTanuloElorehaladasInput, FelhasznalokUncheckedUpdateWithoutTanuloElorehaladasInput>
  }

  export type FelhasznalokUpdateWithoutTanuloElorehaladasInput = {
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
    Jogkorok?: JogkorokUpdateOneRequiredWithoutFelhasznalokNestedInput
    Orarend?: OrarendUpdateManyWithoutFelhasznalokNestedInput
    Vizsgak?: VizsgakUpdateManyWithoutFelhasznalokNestedInput
    TanuloElorehaladasV?: TanuloElorehaladasUpdateManyWithoutFelhasznalokOktatoNestedInput
  }

  export type FelhasznalokUncheckedUpdateWithoutTanuloElorehaladasInput = {
    felhasznalo_id?: IntFieldUpdateOperationsInput | number
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
    jogkor_id?: IntFieldUpdateOperationsInput | number
    Orarend?: OrarendUncheckedUpdateManyWithoutFelhasznalokNestedInput
    Vizsgak?: VizsgakUncheckedUpdateManyWithoutFelhasznalokNestedInput
    TanuloElorehaladasV?: TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokOktatoNestedInput
  }

  export type FelhasznalokUpsertWithoutTanuloElorehaladasVInput = {
    update: XOR<FelhasznalokUpdateWithoutTanuloElorehaladasVInput, FelhasznalokUncheckedUpdateWithoutTanuloElorehaladasVInput>
    create: XOR<FelhasznalokCreateWithoutTanuloElorehaladasVInput, FelhasznalokUncheckedCreateWithoutTanuloElorehaladasVInput>
    where?: FelhasznalokWhereInput
  }

  export type FelhasznalokUpdateToOneWithWhereWithoutTanuloElorehaladasVInput = {
    where?: FelhasznalokWhereInput
    data: XOR<FelhasznalokUpdateWithoutTanuloElorehaladasVInput, FelhasznalokUncheckedUpdateWithoutTanuloElorehaladasVInput>
  }

  export type FelhasznalokUpdateWithoutTanuloElorehaladasVInput = {
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
    Jogkorok?: JogkorokUpdateOneRequiredWithoutFelhasznalokNestedInput
    Orarend?: OrarendUpdateManyWithoutFelhasznalokNestedInput
    Vizsgak?: VizsgakUpdateManyWithoutFelhasznalokNestedInput
    TanuloElorehaladas?: TanuloElorehaladasUpdateManyWithoutFelhasznalokTanuloNestedInput
  }

  export type FelhasznalokUncheckedUpdateWithoutTanuloElorehaladasVInput = {
    felhasznalo_id?: IntFieldUpdateOperationsInput | number
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
    jogkor_id?: IntFieldUpdateOperationsInput | number
    Orarend?: OrarendUncheckedUpdateManyWithoutFelhasznalokNestedInput
    Vizsgak?: VizsgakUncheckedUpdateManyWithoutFelhasznalokNestedInput
    TanuloElorehaladas?: TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokTanuloNestedInput
  }

  export type VizsgajelentkezesUpsertWithWhereUniqueWithoutTanuloElorehaladasVInput = {
    where: VizsgajelentkezesWhereUniqueInput
    update: XOR<VizsgajelentkezesUpdateWithoutTanuloElorehaladasVInput, VizsgajelentkezesUncheckedUpdateWithoutTanuloElorehaladasVInput>
    create: XOR<VizsgajelentkezesCreateWithoutTanuloElorehaladasVInput, VizsgajelentkezesUncheckedCreateWithoutTanuloElorehaladasVInput>
  }

  export type VizsgajelentkezesUpdateWithWhereUniqueWithoutTanuloElorehaladasVInput = {
    where: VizsgajelentkezesWhereUniqueInput
    data: XOR<VizsgajelentkezesUpdateWithoutTanuloElorehaladasVInput, VizsgajelentkezesUncheckedUpdateWithoutTanuloElorehaladasVInput>
  }

  export type VizsgajelentkezesUpdateManyWithWhereWithoutTanuloElorehaladasVInput = {
    where: VizsgajelentkezesScalarWhereInput
    data: XOR<VizsgajelentkezesUpdateManyMutationInput, VizsgajelentkezesUncheckedUpdateManyWithoutTanuloElorehaladasVInput>
  }

  export type VizsgajelentkezesScalarWhereInput = {
    AND?: VizsgajelentkezesScalarWhereInput | VizsgajelentkezesScalarWhereInput[]
    OR?: VizsgajelentkezesScalarWhereInput[]
    NOT?: VizsgajelentkezesScalarWhereInput | VizsgajelentkezesScalarWhereInput[]
    vizsgajelentkezes_id?: IntFilter<"Vizsgajelentkezes"> | number
    tanulo_elorehaladas_id?: IntFilter<"Vizsgajelentkezes"> | number
    vizsga_id?: IntFilter<"Vizsgajelentkezes"> | number
    oktato_jovahagyas?: BoolFilter<"Vizsgajelentkezes"> | boolean
  }

  export type TanuloElorehaladasCreateWithoutVizsgajelentkezesInput = {
    levezetett_orak?: number
    Kifizetesek?: KifizetesekCreateNestedManyWithoutTanuloElorehaladasInput
    FelhasznalokTanulo: FelhasznalokCreateNestedOneWithoutTanuloElorehaladasInput
    FelhasznalokOktato: FelhasznalokCreateNestedOneWithoutTanuloElorehaladasVInput
  }

  export type TanuloElorehaladasUncheckedCreateWithoutVizsgajelentkezesInput = {
    elorehaladas_id?: number
    tanulo_id: number
    oktato_id: number
    levezetett_orak?: number
    Kifizetesek?: KifizetesekUncheckedCreateNestedManyWithoutTanuloElorehaladasInput
  }

  export type TanuloElorehaladasCreateOrConnectWithoutVizsgajelentkezesInput = {
    where: TanuloElorehaladasWhereUniqueInput
    create: XOR<TanuloElorehaladasCreateWithoutVizsgajelentkezesInput, TanuloElorehaladasUncheckedCreateWithoutVizsgajelentkezesInput>
  }

  export type VizsgakCreateWithoutVizsgajelentkezesInput = {
    vizsga_datuma: Date | string
    sikeres?: boolean
    Felhasznalok?: FelhasznalokCreateNestedOneWithoutVizsgakInput
    VizsgaTipus: VizsgaTipusCreateNestedOneWithoutVizsgakInput
  }

  export type VizsgakUncheckedCreateWithoutVizsgajelentkezesInput = {
    vizsga_id?: number
    vizsgabiztos_id?: number | null
    vizsga_datuma: Date | string
    tipus_id: number
    sikeres?: boolean
  }

  export type VizsgakCreateOrConnectWithoutVizsgajelentkezesInput = {
    where: VizsgakWhereUniqueInput
    create: XOR<VizsgakCreateWithoutVizsgajelentkezesInput, VizsgakUncheckedCreateWithoutVizsgajelentkezesInput>
  }

  export type TanuloElorehaladasUpsertWithoutVizsgajelentkezesInput = {
    update: XOR<TanuloElorehaladasUpdateWithoutVizsgajelentkezesInput, TanuloElorehaladasUncheckedUpdateWithoutVizsgajelentkezesInput>
    create: XOR<TanuloElorehaladasCreateWithoutVizsgajelentkezesInput, TanuloElorehaladasUncheckedCreateWithoutVizsgajelentkezesInput>
    where?: TanuloElorehaladasWhereInput
  }

  export type TanuloElorehaladasUpdateToOneWithWhereWithoutVizsgajelentkezesInput = {
    where?: TanuloElorehaladasWhereInput
    data: XOR<TanuloElorehaladasUpdateWithoutVizsgajelentkezesInput, TanuloElorehaladasUncheckedUpdateWithoutVizsgajelentkezesInput>
  }

  export type TanuloElorehaladasUpdateWithoutVizsgajelentkezesInput = {
    levezetett_orak?: IntFieldUpdateOperationsInput | number
    Kifizetesek?: KifizetesekUpdateManyWithoutTanuloElorehaladasNestedInput
    FelhasznalokTanulo?: FelhasznalokUpdateOneRequiredWithoutTanuloElorehaladasNestedInput
    FelhasznalokOktato?: FelhasznalokUpdateOneRequiredWithoutTanuloElorehaladasVNestedInput
  }

  export type TanuloElorehaladasUncheckedUpdateWithoutVizsgajelentkezesInput = {
    elorehaladas_id?: IntFieldUpdateOperationsInput | number
    tanulo_id?: IntFieldUpdateOperationsInput | number
    oktato_id?: IntFieldUpdateOperationsInput | number
    levezetett_orak?: IntFieldUpdateOperationsInput | number
    Kifizetesek?: KifizetesekUncheckedUpdateManyWithoutTanuloElorehaladasNestedInput
  }

  export type VizsgakUpsertWithoutVizsgajelentkezesInput = {
    update: XOR<VizsgakUpdateWithoutVizsgajelentkezesInput, VizsgakUncheckedUpdateWithoutVizsgajelentkezesInput>
    create: XOR<VizsgakCreateWithoutVizsgajelentkezesInput, VizsgakUncheckedCreateWithoutVizsgajelentkezesInput>
    where?: VizsgakWhereInput
  }

  export type VizsgakUpdateToOneWithWhereWithoutVizsgajelentkezesInput = {
    where?: VizsgakWhereInput
    data: XOR<VizsgakUpdateWithoutVizsgajelentkezesInput, VizsgakUncheckedUpdateWithoutVizsgajelentkezesInput>
  }

  export type VizsgakUpdateWithoutVizsgajelentkezesInput = {
    vizsga_datuma?: DateTimeFieldUpdateOperationsInput | Date | string
    sikeres?: BoolFieldUpdateOperationsInput | boolean
    Felhasznalok?: FelhasznalokUpdateOneWithoutVizsgakNestedInput
    VizsgaTipus?: VizsgaTipusUpdateOneRequiredWithoutVizsgakNestedInput
  }

  export type VizsgakUncheckedUpdateWithoutVizsgajelentkezesInput = {
    vizsga_id?: IntFieldUpdateOperationsInput | number
    vizsgabiztos_id?: NullableIntFieldUpdateOperationsInput | number | null
    vizsga_datuma?: DateTimeFieldUpdateOperationsInput | Date | string
    tipus_id?: IntFieldUpdateOperationsInput | number
    sikeres?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FelhasznalokCreateWithoutVizsgakInput = {
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    Jogkorok: JogkorokCreateNestedOneWithoutFelhasznalokInput
    Orarend?: OrarendCreateNestedManyWithoutFelhasznalokInput
    TanuloElorehaladas?: TanuloElorehaladasCreateNestedManyWithoutFelhasznalokTanuloInput
    TanuloElorehaladasV?: TanuloElorehaladasCreateNestedManyWithoutFelhasznalokOktatoInput
  }

  export type FelhasznalokUncheckedCreateWithoutVizsgakInput = {
    felhasznalo_id?: number
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
    jogkor_id: number
    Orarend?: OrarendUncheckedCreateNestedManyWithoutFelhasznalokInput
    TanuloElorehaladas?: TanuloElorehaladasUncheckedCreateNestedManyWithoutFelhasznalokTanuloInput
    TanuloElorehaladasV?: TanuloElorehaladasUncheckedCreateNestedManyWithoutFelhasznalokOktatoInput
  }

  export type FelhasznalokCreateOrConnectWithoutVizsgakInput = {
    where: FelhasznalokWhereUniqueInput
    create: XOR<FelhasznalokCreateWithoutVizsgakInput, FelhasznalokUncheckedCreateWithoutVizsgakInput>
  }

  export type VizsgaTipusCreateWithoutVizsgakInput = {
    tipus: string
  }

  export type VizsgaTipusUncheckedCreateWithoutVizsgakInput = {
    vizsga_tipus_id?: number
    tipus: string
  }

  export type VizsgaTipusCreateOrConnectWithoutVizsgakInput = {
    where: VizsgaTipusWhereUniqueInput
    create: XOR<VizsgaTipusCreateWithoutVizsgakInput, VizsgaTipusUncheckedCreateWithoutVizsgakInput>
  }

  export type VizsgajelentkezesCreateWithoutVizsgakInput = {
    oktato_jovahagyas?: boolean
    TanuloElorehaladasV: TanuloElorehaladasCreateNestedOneWithoutVizsgajelentkezesInput
  }

  export type VizsgajelentkezesUncheckedCreateWithoutVizsgakInput = {
    vizsgajelentkezes_id?: number
    tanulo_elorehaladas_id: number
    oktato_jovahagyas?: boolean
  }

  export type VizsgajelentkezesCreateOrConnectWithoutVizsgakInput = {
    where: VizsgajelentkezesWhereUniqueInput
    create: XOR<VizsgajelentkezesCreateWithoutVizsgakInput, VizsgajelentkezesUncheckedCreateWithoutVizsgakInput>
  }

  export type VizsgajelentkezesCreateManyVizsgakInputEnvelope = {
    data: VizsgajelentkezesCreateManyVizsgakInput | VizsgajelentkezesCreateManyVizsgakInput[]
    skipDuplicates?: boolean
  }

  export type FelhasznalokUpsertWithoutVizsgakInput = {
    update: XOR<FelhasznalokUpdateWithoutVizsgakInput, FelhasznalokUncheckedUpdateWithoutVizsgakInput>
    create: XOR<FelhasznalokCreateWithoutVizsgakInput, FelhasznalokUncheckedCreateWithoutVizsgakInput>
    where?: FelhasznalokWhereInput
  }

  export type FelhasznalokUpdateToOneWithWhereWithoutVizsgakInput = {
    where?: FelhasznalokWhereInput
    data: XOR<FelhasznalokUpdateWithoutVizsgakInput, FelhasznalokUncheckedUpdateWithoutVizsgakInput>
  }

  export type FelhasznalokUpdateWithoutVizsgakInput = {
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
    Jogkorok?: JogkorokUpdateOneRequiredWithoutFelhasznalokNestedInput
    Orarend?: OrarendUpdateManyWithoutFelhasznalokNestedInput
    TanuloElorehaladas?: TanuloElorehaladasUpdateManyWithoutFelhasznalokTanuloNestedInput
    TanuloElorehaladasV?: TanuloElorehaladasUpdateManyWithoutFelhasznalokOktatoNestedInput
  }

  export type FelhasznalokUncheckedUpdateWithoutVizsgakInput = {
    felhasznalo_id?: IntFieldUpdateOperationsInput | number
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
    jogkor_id?: IntFieldUpdateOperationsInput | number
    Orarend?: OrarendUncheckedUpdateManyWithoutFelhasznalokNestedInput
    TanuloElorehaladas?: TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokTanuloNestedInput
    TanuloElorehaladasV?: TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokOktatoNestedInput
  }

  export type VizsgaTipusUpsertWithoutVizsgakInput = {
    update: XOR<VizsgaTipusUpdateWithoutVizsgakInput, VizsgaTipusUncheckedUpdateWithoutVizsgakInput>
    create: XOR<VizsgaTipusCreateWithoutVizsgakInput, VizsgaTipusUncheckedCreateWithoutVizsgakInput>
    where?: VizsgaTipusWhereInput
  }

  export type VizsgaTipusUpdateToOneWithWhereWithoutVizsgakInput = {
    where?: VizsgaTipusWhereInput
    data: XOR<VizsgaTipusUpdateWithoutVizsgakInput, VizsgaTipusUncheckedUpdateWithoutVizsgakInput>
  }

  export type VizsgaTipusUpdateWithoutVizsgakInput = {
    tipus?: StringFieldUpdateOperationsInput | string
  }

  export type VizsgaTipusUncheckedUpdateWithoutVizsgakInput = {
    vizsga_tipus_id?: IntFieldUpdateOperationsInput | number
    tipus?: StringFieldUpdateOperationsInput | string
  }

  export type VizsgajelentkezesUpsertWithWhereUniqueWithoutVizsgakInput = {
    where: VizsgajelentkezesWhereUniqueInput
    update: XOR<VizsgajelentkezesUpdateWithoutVizsgakInput, VizsgajelentkezesUncheckedUpdateWithoutVizsgakInput>
    create: XOR<VizsgajelentkezesCreateWithoutVizsgakInput, VizsgajelentkezesUncheckedCreateWithoutVizsgakInput>
  }

  export type VizsgajelentkezesUpdateWithWhereUniqueWithoutVizsgakInput = {
    where: VizsgajelentkezesWhereUniqueInput
    data: XOR<VizsgajelentkezesUpdateWithoutVizsgakInput, VizsgajelentkezesUncheckedUpdateWithoutVizsgakInput>
  }

  export type VizsgajelentkezesUpdateManyWithWhereWithoutVizsgakInput = {
    where: VizsgajelentkezesScalarWhereInput
    data: XOR<VizsgajelentkezesUpdateManyMutationInput, VizsgajelentkezesUncheckedUpdateManyWithoutVizsgakInput>
  }

  export type VizsgakCreateWithoutVizsgaTipusInput = {
    vizsga_datuma: Date | string
    sikeres?: boolean
    Felhasznalok?: FelhasznalokCreateNestedOneWithoutVizsgakInput
    Vizsgajelentkezes?: VizsgajelentkezesCreateNestedManyWithoutVizsgakInput
  }

  export type VizsgakUncheckedCreateWithoutVizsgaTipusInput = {
    vizsga_id?: number
    vizsgabiztos_id?: number | null
    vizsga_datuma: Date | string
    sikeres?: boolean
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedCreateNestedManyWithoutVizsgakInput
  }

  export type VizsgakCreateOrConnectWithoutVizsgaTipusInput = {
    where: VizsgakWhereUniqueInput
    create: XOR<VizsgakCreateWithoutVizsgaTipusInput, VizsgakUncheckedCreateWithoutVizsgaTipusInput>
  }

  export type VizsgakCreateManyVizsgaTipusInputEnvelope = {
    data: VizsgakCreateManyVizsgaTipusInput | VizsgakCreateManyVizsgaTipusInput[]
    skipDuplicates?: boolean
  }

  export type VizsgakUpsertWithWhereUniqueWithoutVizsgaTipusInput = {
    where: VizsgakWhereUniqueInput
    update: XOR<VizsgakUpdateWithoutVizsgaTipusInput, VizsgakUncheckedUpdateWithoutVizsgaTipusInput>
    create: XOR<VizsgakCreateWithoutVizsgaTipusInput, VizsgakUncheckedCreateWithoutVizsgaTipusInput>
  }

  export type VizsgakUpdateWithWhereUniqueWithoutVizsgaTipusInput = {
    where: VizsgakWhereUniqueInput
    data: XOR<VizsgakUpdateWithoutVizsgaTipusInput, VizsgakUncheckedUpdateWithoutVizsgaTipusInput>
  }

  export type VizsgakUpdateManyWithWhereWithoutVizsgaTipusInput = {
    where: VizsgakScalarWhereInput
    data: XOR<VizsgakUpdateManyMutationInput, VizsgakUncheckedUpdateManyWithoutVizsgaTipusInput>
  }

  export type OrarendCreateManyFelhasznalokInput = {
    orarend_id?: number
    ora_id: number
  }

  export type VizsgakCreateManyFelhasznalokInput = {
    vizsga_id?: number
    vizsga_datuma: Date | string
    tipus_id: number
    sikeres?: boolean
  }

  export type TanuloElorehaladasCreateManyFelhasznalokTanuloInput = {
    elorehaladas_id?: number
    oktato_id: number
    levezetett_orak?: number
  }

  export type TanuloElorehaladasCreateManyFelhasznalokOktatoInput = {
    elorehaladas_id?: number
    tanulo_id: number
    levezetett_orak?: number
  }

  export type OrarendUpdateWithoutFelhasznalokInput = {
    Orak?: OrakUpdateOneRequiredWithoutOrarendNestedInput
  }

  export type OrarendUncheckedUpdateWithoutFelhasznalokInput = {
    orarend_id?: IntFieldUpdateOperationsInput | number
    ora_id?: IntFieldUpdateOperationsInput | number
  }

  export type OrarendUncheckedUpdateManyWithoutFelhasznalokInput = {
    orarend_id?: IntFieldUpdateOperationsInput | number
    ora_id?: IntFieldUpdateOperationsInput | number
  }

  export type VizsgakUpdateWithoutFelhasznalokInput = {
    vizsga_datuma?: DateTimeFieldUpdateOperationsInput | Date | string
    sikeres?: BoolFieldUpdateOperationsInput | boolean
    VizsgaTipus?: VizsgaTipusUpdateOneRequiredWithoutVizsgakNestedInput
    Vizsgajelentkezes?: VizsgajelentkezesUpdateManyWithoutVizsgakNestedInput
  }

  export type VizsgakUncheckedUpdateWithoutFelhasznalokInput = {
    vizsga_id?: IntFieldUpdateOperationsInput | number
    vizsga_datuma?: DateTimeFieldUpdateOperationsInput | Date | string
    tipus_id?: IntFieldUpdateOperationsInput | number
    sikeres?: BoolFieldUpdateOperationsInput | boolean
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedUpdateManyWithoutVizsgakNestedInput
  }

  export type VizsgakUncheckedUpdateManyWithoutFelhasznalokInput = {
    vizsga_id?: IntFieldUpdateOperationsInput | number
    vizsga_datuma?: DateTimeFieldUpdateOperationsInput | Date | string
    tipus_id?: IntFieldUpdateOperationsInput | number
    sikeres?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TanuloElorehaladasUpdateWithoutFelhasznalokTanuloInput = {
    levezetett_orak?: IntFieldUpdateOperationsInput | number
    Kifizetesek?: KifizetesekUpdateManyWithoutTanuloElorehaladasNestedInput
    FelhasznalokOktato?: FelhasznalokUpdateOneRequiredWithoutTanuloElorehaladasVNestedInput
    Vizsgajelentkezes?: VizsgajelentkezesUpdateManyWithoutTanuloElorehaladasVNestedInput
  }

  export type TanuloElorehaladasUncheckedUpdateWithoutFelhasznalokTanuloInput = {
    elorehaladas_id?: IntFieldUpdateOperationsInput | number
    oktato_id?: IntFieldUpdateOperationsInput | number
    levezetett_orak?: IntFieldUpdateOperationsInput | number
    Kifizetesek?: KifizetesekUncheckedUpdateManyWithoutTanuloElorehaladasNestedInput
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedUpdateManyWithoutTanuloElorehaladasVNestedInput
  }

  export type TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokTanuloInput = {
    elorehaladas_id?: IntFieldUpdateOperationsInput | number
    oktato_id?: IntFieldUpdateOperationsInput | number
    levezetett_orak?: IntFieldUpdateOperationsInput | number
  }

  export type TanuloElorehaladasUpdateWithoutFelhasznalokOktatoInput = {
    levezetett_orak?: IntFieldUpdateOperationsInput | number
    Kifizetesek?: KifizetesekUpdateManyWithoutTanuloElorehaladasNestedInput
    FelhasznalokTanulo?: FelhasznalokUpdateOneRequiredWithoutTanuloElorehaladasNestedInput
    Vizsgajelentkezes?: VizsgajelentkezesUpdateManyWithoutTanuloElorehaladasVNestedInput
  }

  export type TanuloElorehaladasUncheckedUpdateWithoutFelhasznalokOktatoInput = {
    elorehaladas_id?: IntFieldUpdateOperationsInput | number
    tanulo_id?: IntFieldUpdateOperationsInput | number
    levezetett_orak?: IntFieldUpdateOperationsInput | number
    Kifizetesek?: KifizetesekUncheckedUpdateManyWithoutTanuloElorehaladasNestedInput
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedUpdateManyWithoutTanuloElorehaladasVNestedInput
  }

  export type TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokOktatoInput = {
    elorehaladas_id?: IntFieldUpdateOperationsInput | number
    tanulo_id?: IntFieldUpdateOperationsInput | number
    levezetett_orak?: IntFieldUpdateOperationsInput | number
  }

  export type FelhasznalokCreateManyJogkorokInput = {
    felhasznalo_id?: number
    vezeteknev: string
    keresztnev: string
    email: string
    jelszo: string
    bankszamla: string
  }

  export type FelhasznalokUpdateWithoutJogkorokInput = {
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
    Orarend?: OrarendUpdateManyWithoutFelhasznalokNestedInput
    Vizsgak?: VizsgakUpdateManyWithoutFelhasznalokNestedInput
    TanuloElorehaladas?: TanuloElorehaladasUpdateManyWithoutFelhasznalokTanuloNestedInput
    TanuloElorehaladasV?: TanuloElorehaladasUpdateManyWithoutFelhasznalokOktatoNestedInput
  }

  export type FelhasznalokUncheckedUpdateWithoutJogkorokInput = {
    felhasznalo_id?: IntFieldUpdateOperationsInput | number
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
    Orarend?: OrarendUncheckedUpdateManyWithoutFelhasznalokNestedInput
    Vizsgak?: VizsgakUncheckedUpdateManyWithoutFelhasznalokNestedInput
    TanuloElorehaladas?: TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokTanuloNestedInput
    TanuloElorehaladasV?: TanuloElorehaladasUncheckedUpdateManyWithoutFelhasznalokOktatoNestedInput
  }

  export type FelhasznalokUncheckedUpdateManyWithoutJogkorokInput = {
    felhasznalo_id?: IntFieldUpdateOperationsInput | number
    vezeteknev?: StringFieldUpdateOperationsInput | string
    keresztnev?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    jelszo?: StringFieldUpdateOperationsInput | string
    bankszamla?: StringFieldUpdateOperationsInput | string
  }

  export type OrarendCreateManyOrakInput = {
    orarend_id?: number
    felhasznalo_id: number
  }

  export type OrarendUpdateWithoutOrakInput = {
    Felhasznalok?: FelhasznalokUpdateOneRequiredWithoutOrarendNestedInput
  }

  export type OrarendUncheckedUpdateWithoutOrakInput = {
    orarend_id?: IntFieldUpdateOperationsInput | number
    felhasznalo_id?: IntFieldUpdateOperationsInput | number
  }

  export type OrarendUncheckedUpdateManyWithoutOrakInput = {
    orarend_id?: IntFieldUpdateOperationsInput | number
    felhasznalo_id?: IntFieldUpdateOperationsInput | number
  }

  export type KifizetesekCreateManyTanuloElorehaladasInput = {
    kifizetes_id?: number
    targy: string
    osszeg: number
    kifizetve?: boolean
  }

  export type VizsgajelentkezesCreateManyTanuloElorehaladasVInput = {
    vizsgajelentkezes_id?: number
    vizsga_id: number
    oktato_jovahagyas?: boolean
  }

  export type KifizetesekUpdateWithoutTanuloElorehaladasInput = {
    targy?: StringFieldUpdateOperationsInput | string
    osszeg?: IntFieldUpdateOperationsInput | number
    kifizetve?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KifizetesekUncheckedUpdateWithoutTanuloElorehaladasInput = {
    kifizetes_id?: IntFieldUpdateOperationsInput | number
    targy?: StringFieldUpdateOperationsInput | string
    osszeg?: IntFieldUpdateOperationsInput | number
    kifizetve?: BoolFieldUpdateOperationsInput | boolean
  }

  export type KifizetesekUncheckedUpdateManyWithoutTanuloElorehaladasInput = {
    kifizetes_id?: IntFieldUpdateOperationsInput | number
    targy?: StringFieldUpdateOperationsInput | string
    osszeg?: IntFieldUpdateOperationsInput | number
    kifizetve?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VizsgajelentkezesUpdateWithoutTanuloElorehaladasVInput = {
    oktato_jovahagyas?: BoolFieldUpdateOperationsInput | boolean
    Vizsgak?: VizsgakUpdateOneRequiredWithoutVizsgajelentkezesNestedInput
  }

  export type VizsgajelentkezesUncheckedUpdateWithoutTanuloElorehaladasVInput = {
    vizsgajelentkezes_id?: IntFieldUpdateOperationsInput | number
    vizsga_id?: IntFieldUpdateOperationsInput | number
    oktato_jovahagyas?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VizsgajelentkezesUncheckedUpdateManyWithoutTanuloElorehaladasVInput = {
    vizsgajelentkezes_id?: IntFieldUpdateOperationsInput | number
    vizsga_id?: IntFieldUpdateOperationsInput | number
    oktato_jovahagyas?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VizsgajelentkezesCreateManyVizsgakInput = {
    vizsgajelentkezes_id?: number
    tanulo_elorehaladas_id: number
    oktato_jovahagyas?: boolean
  }

  export type VizsgajelentkezesUpdateWithoutVizsgakInput = {
    oktato_jovahagyas?: BoolFieldUpdateOperationsInput | boolean
    TanuloElorehaladasV?: TanuloElorehaladasUpdateOneRequiredWithoutVizsgajelentkezesNestedInput
  }

  export type VizsgajelentkezesUncheckedUpdateWithoutVizsgakInput = {
    vizsgajelentkezes_id?: IntFieldUpdateOperationsInput | number
    tanulo_elorehaladas_id?: IntFieldUpdateOperationsInput | number
    oktato_jovahagyas?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VizsgajelentkezesUncheckedUpdateManyWithoutVizsgakInput = {
    vizsgajelentkezes_id?: IntFieldUpdateOperationsInput | number
    tanulo_elorehaladas_id?: IntFieldUpdateOperationsInput | number
    oktato_jovahagyas?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VizsgakCreateManyVizsgaTipusInput = {
    vizsga_id?: number
    vizsgabiztos_id?: number | null
    vizsga_datuma: Date | string
    sikeres?: boolean
  }

  export type VizsgakUpdateWithoutVizsgaTipusInput = {
    vizsga_datuma?: DateTimeFieldUpdateOperationsInput | Date | string
    sikeres?: BoolFieldUpdateOperationsInput | boolean
    Felhasznalok?: FelhasznalokUpdateOneWithoutVizsgakNestedInput
    Vizsgajelentkezes?: VizsgajelentkezesUpdateManyWithoutVizsgakNestedInput
  }

  export type VizsgakUncheckedUpdateWithoutVizsgaTipusInput = {
    vizsga_id?: IntFieldUpdateOperationsInput | number
    vizsgabiztos_id?: NullableIntFieldUpdateOperationsInput | number | null
    vizsga_datuma?: DateTimeFieldUpdateOperationsInput | Date | string
    sikeres?: BoolFieldUpdateOperationsInput | boolean
    Vizsgajelentkezes?: VizsgajelentkezesUncheckedUpdateManyWithoutVizsgakNestedInput
  }

  export type VizsgakUncheckedUpdateManyWithoutVizsgaTipusInput = {
    vizsga_id?: IntFieldUpdateOperationsInput | number
    vizsgabiztos_id?: NullableIntFieldUpdateOperationsInput | number | null
    vizsga_datuma?: DateTimeFieldUpdateOperationsInput | Date | string
    sikeres?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use FelhasznalokCountOutputTypeDefaultArgs instead
     */
    export type FelhasznalokCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FelhasznalokCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JogkorokCountOutputTypeDefaultArgs instead
     */
    export type JogkorokCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JogkorokCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrakCountOutputTypeDefaultArgs instead
     */
    export type OrakCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrakCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TanuloElorehaladasCountOutputTypeDefaultArgs instead
     */
    export type TanuloElorehaladasCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TanuloElorehaladasCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VizsgakCountOutputTypeDefaultArgs instead
     */
    export type VizsgakCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VizsgakCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VizsgaTipusCountOutputTypeDefaultArgs instead
     */
    export type VizsgaTipusCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VizsgaTipusCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FelhasznalokDefaultArgs instead
     */
    export type FelhasznalokArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FelhasznalokDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JogkorokDefaultArgs instead
     */
    export type JogkorokArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JogkorokDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KifizetesekDefaultArgs instead
     */
    export type KifizetesekArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KifizetesekDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrakDefaultArgs instead
     */
    export type OrakArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrakDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrarendDefaultArgs instead
     */
    export type OrarendArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrarendDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TanuloElorehaladasDefaultArgs instead
     */
    export type TanuloElorehaladasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TanuloElorehaladasDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VizsgajelentkezesDefaultArgs instead
     */
    export type VizsgajelentkezesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VizsgajelentkezesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VizsgakDefaultArgs instead
     */
    export type VizsgakArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VizsgakDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VizsgaTipusDefaultArgs instead
     */
    export type VizsgaTipusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VizsgaTipusDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}