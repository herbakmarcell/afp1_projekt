"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = exports.reverse = exports.underscore = exports.bright = exports.dimmed = exports.gray = exports.cyan = exports.magenta = exports.blue = exports.red = exports.yellow = exports.green = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const color_1 = __importDefault(require("./color/color")); // import color object from color.ts
// Common Functions
const Common_1 = require("./Common/Common");
// API Functions
const Fetch_1 = require("./API/Fetch"); // import Fetch functions from Fetch.ts
// function for green
/**
 * The "green" function logs each element in an array of "globe" type with the color green and returns
 * the original array.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe". The function then
 * iterates over each argument using a forEach loop and logs the argument to the console with the color
 * green. Finally, the function returns the
 * @returns an array of objects of type `globe`.
 */
function green(...Payload) {
    Payload.forEach((payload) => {
        console.log(color_1.default.green, payload);
    });
    return {
        Status: 'Success',
        Payload,
        Message: `The function ${color_1.default.green} has been executed successfully`
    };
} // end of green
exports.green = green;
// function for yellow
/**
 * The "yellow" function logs each payload in yellow color and returns the payloads.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments as an array of type "globe". The function then iterates over each
 * element of the array and logs it to the console with the color yellow. Finally, the function returns
 * the original array of "globe"
 * @returns an array of objects of type `globe`.
 */
function yellow(...Payload) {
    Payload.forEach((payload) => {
        console.log(color_1.default.yellow, payload);
    });
    return {
        Status: 'Success',
        Payload,
        Message: `The function ${color_1.default.yellow} has been executed successfully`
    };
} // end of yellow
exports.yellow = yellow;
// function for red
/**
 * The "red" function logs each payload in red color and returns the payloads.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments as an array of type "globe". The function then iterates over each
 * element of the array and logs it to the console with the color red. Finally, the function returns
 * the original array of "globe"
 * @returns an array of objects of type `globe`.
 */
function red(...Payload) {
    Payload.forEach((payload) => {
        console.log(color_1.default.red, payload);
    });
    return {
        Status: 'Success',
        Payload,
        Message: `The function ${color_1.default.red} has been executed successfully`
    };
} // end of red
exports.red = red;
// function for blue
/**
 * The "blue" function logs each payload in blue color and returns the payloads.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments as an array of globe objects. The function then iterates over each
 * globe object in the array and logs its contents to the console with the color blue. Finally, the
 * function returns the original array of globe objects.
 * @returns The function `blue` is returning an array of `globe` objects.
 */
function blue(...Payload) {
    Payload.forEach((payload) => {
        console.log(color_1.default.blue, payload);
    });
    return {
        Status: 'Success',
        Payload,
        Message: `The function ${color_1.default.blue} has been executed successfully`
    };
} // end of blue
exports.blue = blue;
// function for magenta
/**
 * The function "magenta" logs each element in an array of "globe" type with the color magenta and
 * returns the array.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe". The function then
 * iterates over each argument using a forEach loop and logs the argument to the console with the
 * magenta color using the "color" object
 * @returns an array of objects of type `globe`.
 */
function magenta(...Payload) {
    Payload.forEach((payload) => {
        console.log(color_1.default.magenta, payload);
    });
    return {
        Status: 'Success',
        Payload,
        Message: `The function ${color_1.default.magenta} has been executed successfully`
    };
} // end of magenta
exports.magenta = magenta;
// function for cyan
/**
 * The function "cyan" logs the given payloads in cyan color and returns them.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe". The function then
 * iterates over each argument using a forEach loop and logs the argument to the console with the color
 * cyan. Finally, the function returns the
 * @returns The function `cyan` is returning an array of `globe` objects.
 */
function cyan(...Payload) {
    Payload.forEach((payload) => {
        console.log(color_1.default.cyan, payload);
    });
    return {
        Status: 'Success',
        Payload,
        Message: `The function ${color_1.default.cyan} has been executed successfully`
    };
} // end of cyan
exports.cyan = cyan;
// function for gray
/**
 * The "gray" function logs each element in an array of "globe" type with a gray color and returns the
 * original array.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe". The function then
 * iterates over each argument using a forEach loop and logs the argument to the console with the color
 * gray. Finally, the function returns the
 * @returns an array of `globe` objects, which is the same as the `Payload` parameter passed to the
 * function.
 */
function gray(...Payload) {
    Payload.forEach((payload) => {
        console.log(color_1.default.gray, payload);
    });
    return {
        Status: 'Success',
        Payload,
        Message: `The function ${color_1.default.gray} has been executed successfully`
    };
} // end of gray
exports.gray = gray;
// function for dimmed
/**
 * The "dimmed" function logs each element in an array of "globe" objects with a dimmed color and
 * returns the original array.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe", which is not
 * defined in the code snippet provided. The function then iterates over each argument using a forEach
 * loop and logs the argument to the console with
 * @returns The function `dimmed` is returning an array of `globe` objects, which is the same as the
 * `Payload` parameter passed to the function.
 */
function dimmed(...Payload) {
    Payload.forEach((payload) => {
        console.log(color_1.default.dimmed, payload);
    });
    return {
        Status: 'Success',
        Payload,
        Message: `The function ${color_1.default.dimmed} has been executed successfully`
    };
} // end of dimmed
exports.dimmed = dimmed;
// function for bright
/**
 * The "bright" function logs each element in an array of "globe" objects with a bright color and
 * returns the original array.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe", which is not
 * defined in the code snippet provided. The function then iterates over each argument using the
 * forEach method and logs the argument to the console with
 * @returns The function `bright` is returning an array of `globe` objects after logging each object
 * with the `color.bright` property to the console.
 */
function bright(...Payload) {
    Payload.forEach((payload) => {
        console.log(color_1.default.bright, payload);
    });
    return {
        Status: 'Success',
        Payload,
        Message: `The function ${color_1.default.bright} has been executed successfully`
    };
} // end of bright
exports.bright = bright;
// function for underscore
/**
 * The function "underscore" logs each element in an array and returns the array.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe". The function then
 * iterates over each argument using the forEach method and logs it to the console with an underscore
 * color. Finally, the function returns the original
 * @returns an array of `globe` objects, which is the same as the `Payload` parameter passed to the
 * function.
 */
function underscore(...Payload) {
    Payload.forEach((payload) => {
        console.log(color_1.default.underscore, payload);
    });
    return {
        Status: 'Success',
        Payload,
        Message: `The function ${color_1.default.underscore} has been executed successfully`
    };
} // end of Underscore
exports.underscore = underscore;
// function for reverse
/**
 * The function "reverse" takes in an array of "globe" type and logs each element in reverse order
 * while returning the original array.
 * @param {globe[]} Payload - The parameter `Payload` is an array of `globe` type elements. The
 * `reverse` function takes this array as input and logs each element in reverse order using the
 * `console.log` function. Finally, the function returns the same array in reverse order.
 * @returns an array of `globe` elements after logging each element in the array to the console with
 * the color `reverse`.
 */
function reverse(...Payload) {
    Payload.forEach((payload) => {
        console.log(color_1.default.reverse, payload);
    });
    return {
        Status: 'Success',
        Payload,
        Message: `The function ${color_1.default.reverse} has been executed successfully`
    };
} // end of Underscore
exports.reverse = reverse;
// Node Encryption Class
class nodeDecryption {
    constructor(Key) {
        this.Key = Key;
    }
    Decrypt(Data) {
        return __awaiter(this, void 0, void 0, function* () {
            // Encrypt data
            const decryptedData = yield (0, Common_1.Decrypt)(Data, this.Key);
            return decryptedData;
        });
    }
    Encrypt(Data) {
        return __awaiter(this, void 0, void 0, function* () {
            // Convert data to string
            const ReadyData = JSON.stringify(Data);
            // Encrypt data
            const encryptedData = yield (0, Common_1.Encrypt)(ReadyData, this.Key);
            return encryptedData;
        });
    }
    DecryptSync(Data) {
        // Encrypt data
        const decryptedData = (0, Common_1.DecryptSync)(Data, this.Key);
        return decryptedData;
    }
    EncryptSync(Data) {
        // Convert data to string
        const ReadyData = JSON.stringify(Data);
        // Encrypt data
        const encryptedData = (0, Common_1.EncryptSync)(ReadyData, this.Key);
        return encryptedData;
    }
}
// Export Node Common Functions
exports.Node = {
    NodeEncrypt: nodeDecryption,
    API: {
        Get: Fetch_1.GetFetch,
        Delete: Fetch_1.DeleteFetch,
        Post: Fetch_1.PostFetch,
        Put: Fetch_1.PutFetch
    }
};
//# sourceMappingURL=outer.js.map