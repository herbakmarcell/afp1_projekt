"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecryptSync = exports.EncryptSync = exports.Decrypt = exports.Encrypt = void 0;
// Encrypt and Decrypt Imports
const crypto_js_1 = __importDefault(require("crypto-js"));
/**
 * The function reActUpdateDocumentTitle updates the title of the document.
 * @param {str} title - The `title` parameter is a string that represents the new title for the
 * document.
 */
/**
 * The function reActEncrypt takes a string of data and encrypts it using the AES algorithm with a
 * specified key.
 * @param {str} Data - The `Data` parameter is the string that you want to encrypt. It is the data that
 * you want to keep secure and confidential.
 * @param [Key=YourKey] - The "Key" parameter is an optional parameter that represents the encryption
 * key used to encrypt the data. If no key is provided, the default value is set to 'YourKey'.
 * @returns the encrypted data as a string.
 */
function Encrypt(Data, Key = 'YourKey') {
    return __awaiter(this, void 0, void 0, function* () {
        // Encrypt data
        const encryptedData = crypto_js_1.default.AES.encrypt(Data, Key).toString(); // Encrypt data
        return encryptedData; // Return encrypted data
    });
}
exports.Encrypt = Encrypt;
/**
 * The `nodeDecrypt` function takes in an encrypted data string and a key, decrypts the data using
 * AES-CBC encryption, and returns the decrypted data as a UTF-8 string.
 * @param {str} Data - The `Data` parameter is a string that represents the encrypted data that you
 * want to decrypt.
 * @param [Key=YourKey] - The `Key` parameter is the encryption key used to decrypt the data. It is a
 * string value that represents the secret key used in the AES-CBC encryption algorithm. By default,
 * the value is set to 'YourKey', but you can provide your own key as an argument when calling the `
 * @returns the decrypted data as a UTF-8 string.
 */
function Decrypt(Data, Key = 'YourKey') {
    return __awaiter(this, void 0, void 0, function* () {
        // Decrypt data
        const bytes = crypto_js_1.default.AES.decrypt(Data, Key);
        const decryptedText = bytes.toString(crypto_js_1.default.enc.Utf8);
        // Return decrypted data
        return decryptedText; // Return decrypted data
    });
}
exports.Decrypt = Decrypt;
// Sync Functions
function EncryptSync(Data, Key = 'YourKey') {
    // Encrypt data
    const encryptedData = crypto_js_1.default.AES.encrypt(Data, Key).toString(); // Encrypt data
    return encryptedData; // Return encrypted data
}
exports.EncryptSync = EncryptSync;
function DecryptSync(Data, Key = 'YourKey') {
    // Decrypt data
    const bytes = crypto_js_1.default.AES.decrypt(Data, Key);
    const decryptedText = bytes.toString(crypto_js_1.default.enc.Utf8);
    // Return decrypted data
    return decryptedText; // Return decrypted data
}
exports.DecryptSync = DecryptSync;
//# sourceMappingURL=Common.js.map