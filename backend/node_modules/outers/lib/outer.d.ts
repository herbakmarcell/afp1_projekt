import { GetFetch, DeleteFetch, PostFetch, PutFetch } from './API/Fetch';
type globe = string | number | boolean | object | null | undefined | symbol | bigint;
/**
 * The "green" function logs each element in an array of "globe" type with the color green and returns
 * the original array.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe". The function then
 * iterates over each argument using a forEach loop and logs the argument to the console with the color
 * green. Finally, the function returns the
 * @returns an array of objects of type `globe`.
 */
export declare function green(...Payload: unknown[]): globe;
/**
 * The "yellow" function logs each payload in yellow color and returns the payloads.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments as an array of type "globe". The function then iterates over each
 * element of the array and logs it to the console with the color yellow. Finally, the function returns
 * the original array of "globe"
 * @returns an array of objects of type `globe`.
 */
export declare function yellow(...Payload: unknown[]): globe;
/**
 * The "red" function logs each payload in red color and returns the payloads.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments as an array of type "globe". The function then iterates over each
 * element of the array and logs it to the console with the color red. Finally, the function returns
 * the original array of "globe"
 * @returns an array of objects of type `globe`.
 */
export declare function red(...Payload: unknown[]): globe;
/**
 * The "blue" function logs each payload in blue color and returns the payloads.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments as an array of globe objects. The function then iterates over each
 * globe object in the array and logs its contents to the console with the color blue. Finally, the
 * function returns the original array of globe objects.
 * @returns The function `blue` is returning an array of `globe` objects.
 */
export declare function blue(...Payload: unknown[]): globe;
/**
 * The function "magenta" logs each element in an array of "globe" type with the color magenta and
 * returns the array.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe". The function then
 * iterates over each argument using a forEach loop and logs the argument to the console with the
 * magenta color using the "color" object
 * @returns an array of objects of type `globe`.
 */
export declare function magenta(...Payload: unknown[]): globe;
/**
 * The function "cyan" logs the given payloads in cyan color and returns them.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe". The function then
 * iterates over each argument using a forEach loop and logs the argument to the console with the color
 * cyan. Finally, the function returns the
 * @returns The function `cyan` is returning an array of `globe` objects.
 */
export declare function cyan(...Payload: unknown[]): globe;
/**
 * The "gray" function logs each element in an array of "globe" type with a gray color and returns the
 * original array.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe". The function then
 * iterates over each argument using a forEach loop and logs the argument to the console with the color
 * gray. Finally, the function returns the
 * @returns an array of `globe` objects, which is the same as the `Payload` parameter passed to the
 * function.
 */
export declare function gray(...Payload: unknown[]): globe;
/**
 * The "dimmed" function logs each element in an array of "globe" objects with a dimmed color and
 * returns the original array.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe", which is not
 * defined in the code snippet provided. The function then iterates over each argument using a forEach
 * loop and logs the argument to the console with
 * @returns The function `dimmed` is returning an array of `globe` objects, which is the same as the
 * `Payload` parameter passed to the function.
 */
export declare function dimmed(...Payload: unknown[]): globe;
/**
 * The "bright" function logs each element in an array of "globe" objects with a bright color and
 * returns the original array.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe", which is not
 * defined in the code snippet provided. The function then iterates over each argument using the
 * forEach method and logs the argument to the console with
 * @returns The function `bright` is returning an array of `globe` objects after logging each object
 * with the `color.bright` property to the console.
 */
export declare function bright(...Payload: unknown[]): globe;
/**
 * The function "underscore" logs each element in an array and returns the array.
 * @param {globe[]} Payload - Payload is a rest parameter that allows the function to accept an
 * indefinite number of arguments. In this case, the arguments are of type "globe". The function then
 * iterates over each argument using the forEach method and logs it to the console with an underscore
 * color. Finally, the function returns the original
 * @returns an array of `globe` objects, which is the same as the `Payload` parameter passed to the
 * function.
 */
export declare function underscore(...Payload: unknown[]): globe;
/**
 * The function "reverse" takes in an array of "globe" type and logs each element in reverse order
 * while returning the original array.
 * @param {globe[]} Payload - The parameter `Payload` is an array of `globe` type elements. The
 * `reverse` function takes this array as input and logs each element in reverse order using the
 * `console.log` function. Finally, the function returns the same array in reverse order.
 * @returns an array of `globe` elements after logging each element in the array to the console with
 * the color `reverse`.
 */
export declare function reverse(...Payload: unknown[]): globe;
declare class nodeDecryption {
    private Key;
    constructor(Key: string);
    Decrypt(Data: string): Promise<string>;
    Encrypt(Data: any): Promise<string>;
    DecryptSync(Data: string): string;
    EncryptSync(Data: any): string;
}
export declare const Node: {
    NodeEncrypt: typeof nodeDecryption;
    API: {
        Get: typeof GetFetch;
        Delete: typeof DeleteFetch;
        Post: typeof PostFetch;
        Put: typeof PutFetch;
    };
};
export {};
